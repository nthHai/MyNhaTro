/**
* DevExpress HTML/JS Reporting (viewer\parameters\previewParametersViewModel.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { AccordionKeyboardHelper, ajax } from '@devexpress/analytics-core/analytics-internal';
import { getLocalization, TabInfoWithPropertyGrid } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { HandlerUri } from '../settings';
import { ParameterHelper } from './parameterHelper';
import { ParameterPanelItemBase } from './parameterPanelItemBase';
import { PreviewParameter } from './previewParameter';
import * as $ from 'jquery';
export class PreviewParametersViewModel extends ParameterPanelItemBase {
    constructor(reportPreview, parameterHelper, enableKeyboardSupport) {
        super(parameterHelper);
        this._needToUpdateParameter = ko.observable(false);
        this._getParametersStateRequest = (argsObject) => {
            return ajax(HandlerUri(), 'getParametersState', encodeURIComponent(JSON.stringify(argsObject)), (message, jqXHR, textStatus) => this._reportPreview._processError(getLocalization('Cannot supply filtered lookup values to a report parameter editor', 'ASPxReportsStringId.WebDocumentViewer_GetLookUpValuesError'), jqXHR));
        };
        this._getDoneGetParametersStateHandler = (changedParameter) => {
            var parametersViewModel = this;
            return (response) => {
                try {
                    if (!response || !response.parameters) {
                        return;
                    }
                    response.parameters.forEach((parametersInfoCollection) => {
                        var matchedParameter = parametersViewModel._parameters.filter((p) => { return p.path === parametersInfoCollection.Key; })[0];
                        if (!parametersViewModel._shouldProcessParameter(matchedParameter))
                            return;
                        matchedParameter.visible(parametersInfoCollection.Value.visible);
                        matchedParameter.enabled(parametersInfoCollection.Value.enabled);
                        if (parametersViewModel._parameters.indexOf(changedParameter) < parametersViewModel._parameters.indexOf(matchedParameter) && parametersInfoCollection.Value.lookUpValues != null) {
                            parametersViewModel._setLookUpValues(matchedParameter, parametersInfoCollection.Value.lookUpValues);
                        }
                    });
                }
                finally {
                    parametersViewModel.parametersLoading(false);
                }
            };
        };
        this._getFailGetParametersStateHandler = () => {
            var parametersViewModel = this;
            return (jqXHRError) => {
                parametersViewModel.parametersLoading(false);
            };
        };
        this.restore = () => {
            if (this.parametersLoading()) {
                return;
            }
            try {
                this.parametersLoading(true);
                this._parameters.forEach((parameter) => {
                    if (!this._shouldProcessParameter(parameter))
                        return;
                    parameter.lookUpValues(parameter._originalLookUpValues);
                    parameter.initialize(parameter._originalValue, this.parameterHelper);
                });
            }
            finally {
                this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersReset && this.parameterHelper.callbacks.parametersReset(this, this._parameters);
                this.parametersLoading(false);
            }
        };
        this.getInfo = ko.observable(null);
        this.processInvisibleParameters = false;
        this.parametersLoading = ko.observable(false);
        this.prevParametersStateRequest = $.Deferred();
        this._reportPreview = reportPreview;
        this.validateAndSubmit = (params) => {
            var result = params && params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
            if (!result || result.isValid)
                this.submit();
        };
        this.submit = () => {
            if (this.parametersLoading())
                return;
            this.parametersLoading(true);
            var promise = reportPreview.startBuild();
            promise && promise.done((val) => { this.parametersLoading(false); });
        };
        this._disposables.push(reportPreview.originalParametersInfo.subscribe((originalParametersInfo) => {
            this.initialize(originalParametersInfo);
        }));
        this.initialize(reportPreview.originalParametersInfo());
        var notEmpty = ko.pureComputed(() => !this.isEmpty());
        this.tabInfo = new TabInfoWithPropertyGrid({
            text: 'Parameters',
            template: 'dxrd-preview-parameters',
            model: this,
            keyboardHelper: enableKeyboardSupport ? new AccordionKeyboardHelper() : undefined,
            localizationId: 'PreviewStringId.RibbonPreview_Parameters_Caption',
            imageClassName: 'parameters',
            imageTemplateName: 'dxrd-svg-tabs-parameters',
            visible: notEmpty
        });
        var popupVisibleSwitch = ko.observable(false);
        var popupVisible = ko.pureComputed({
            read: () => {
                return notEmpty() && popupVisibleSwitch();
            },
            write: (newVal) => {
                return popupVisibleSwitch(newVal);
            }
        });
        this.popupInfo = { visible: popupVisible, notEmpty: notEmpty };
        this._disposables.push(this.popupInfo);
        this._disposables.push({
            dispose: () => {
                var _a;
                clearTimeout(this._updateParametersTimeOut);
                (_a = this.prevParametersStateRequest) === null || _a === void 0 ? void 0 : _a.reject();
            }
        });
    }
    get _visibleParameters() {
        return this._parameters.filter((p) => { return p.visible(); });
    }
    _shouldProcessParameter(param) {
        return this.processInvisibleParameters || (param && (param.visible() || param.hasVisibleExpression || param.isFilteredLookUpSettings));
    }
    _convertLocalDateToUTC(localDate) {
        return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()));
    }
    subscribeParameter(parameter) {
        var needToUpdateParameter = this._needToUpdateParameter() || (this._shouldProcessParameter(parameter)) &&
            (parameter.isFilteredLookUpSettings || parameter.hasBindedExpressions);
        this._needToUpdateParameter(needToUpdateParameter);
        if (this._shouldProcessParameter(parameter)) {
            this._disposables.push((parameter.isMultiValueWithLookUp ? parameter._value : parameter.value).subscribe((newValue) => {
                if (this._needToUpdateParameter()) {
                    this.updateParameters(parameter);
                }
            }));
        }
    }
    _setLookUpValues(parameter, lookUpValues) {
        if (!lookUpValues) {
            parameter.lookUpValues([]);
            return;
        }
        parameter.lookUpValues(this.parameterHelper.mapLookUpValues(parameter.type, lookUpValues));
        var _parameterValuesContainedInLookUps = this._getParameterValuesContainedInLookups(lookUpValues, parameter);
        if (parameter.isMultiValue) {
            parameter.initialize(_parameterValuesContainedInLookUps.length > 0 ? _parameterValuesContainedInLookUps : [], this.parameterHelper);
        }
        else {
            parameter.initialize(_parameterValuesContainedInLookUps[0] && _parameterValuesContainedInLookUps[0].Value || (lookUpValues.length > 0 ? lookUpValues[0].Value : null), this.parameterHelper);
        }
    }
    _getParameterValuesContainedInLookups(parameterLookUpValues, parameter) {
        if (parameterLookUpValues) {
            if (parameter.isMultiValue) {
                var selectedItems = parameter.value().value();
                return selectedItems.filter((item) => this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, item).length > 0);
            }
            else {
                return this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, parameter.value());
            }
        }
        return [];
    }
    _filterParameterValuesContainsInLookups(parameterLookUpValues, parameterType, value) {
        return parameterLookUpValues.filter((x) => PreviewParameter._compareValues(this.parameterHelper.getValueConverter(parameterType)(x.Value), value));
    }
    initialize(originalParametersInfo) {
        originalParametersInfo && this.parameterHelper.initialize(originalParametersInfo.knownEnums);
        super.initialize(originalParametersInfo);
        if (!originalParametersInfo)
            return;
        var layout = originalParametersInfo.parameterPanelLayout;
        if ((!layout || layout.layoutItems.length === 0) && originalParametersInfo.parameters) {
            this._parameters.forEach(x => this._add(x, {}));
        }
        this.isEmpty(this._visibleParameters.length === 0);
        var actualParametersInfo = [];
        this._parameters.forEach(x => {
            this.subscribeParameter(x);
            actualParametersInfo.push({ value: x.value, parameterDescriptor: x.getParameterDescriptor(), lookUpValues: x.lookUpValues });
        });
        if (this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersInitialized) {
            this.parameterHelper.callbacks.parametersInitialized(this, actualParametersInfo, this.submit, originalParametersInfo.shouldRequestParameters);
        }
        if (this._reportPreview.documentId)
            return;
        if (!originalParametersInfo.shouldRequestParameters || this.isEmpty()) {
            this.submit();
        }
        else {
            this._reportPreview.removeEmptyPages();
            this.tabInfo.active(true);
            if (this.tabInfo.visible() && ko.isWriteableObservable(this.tabInfo.collapsed))
                this.tabInfo.collapsed(false);
            this.popupInfo.visible(true);
            this._reportPreview.pageLoading(false);
        }
    }
    getPathsAfterPath(parameterPath) {
        var startIndex = 0;
        for (var index = 0; index < this._parameters.length; index++) {
            if (this._parameters[index].path === parameterPath) {
                startIndex = index + 1;
                break;
            }
        }
        var paths = this._parameters
            .filter((param, index) => {
            return this._shouldProcessParameter(param) &&
                (param.hasBindedExpressions || param.isFilteredLookUpSettings && index >= startIndex);
        })
            .map((x) => x.path);
        return paths || [];
    }
    serializeParameters() {
        var params = [], self = this;
        this._parameters.forEach((parameter) => {
            var convertItem = (item) => {
                return (parameter.type === 'System.DateTime' && !!item && (item instanceof Date)) ? self._convertLocalDateToUTC(item) : item;
            };
            var value = parameter.isMultiValueWithLookUp ? parameter._value() : parameter.value();
            if (parameter.allowNull) {
                if ((parameter.isMultiValue && Array.isArray(value) && value.length === 0) || value === '') {
                    value = null;
                }
            }
            params.push({ Value: ParameterHelper.getSerializationValue(value, convertItem), Key: parameter.path, TypeName: parameter.type });
        });
        return params;
    }
    updateParameters(changedParameter) {
        var requiredParameterPaths = this.getPathsAfterPath(changedParameter.path);
        if (!requiredParameterPaths || requiredParameterPaths.length === 0) {
            return;
        }
        var changedParameterIndex = this._parameters.indexOf(changedParameter);
        var updateTopChangedParameter = (index, changedParameter, requiredParameterPaths) => {
            this._topChangedParameter = { index: index, changedParameter: changedParameter, requiredParameterPaths: requiredParameterPaths };
        };
        if (this._topChangedParameter && changedParameterIndex !== -1) {
            if (this._topChangedParameter.index > changedParameterIndex)
                updateTopChangedParameter(changedParameterIndex, changedParameter, requiredParameterPaths);
            return;
        }
        updateTopChangedParameter(changedParameterIndex, changedParameter, requiredParameterPaths);
        this.prevParametersStateRequest.reject();
        var deferred = $.Deferred();
        this._updateParametersTimeOut = setTimeout(() => {
            this.parametersLoading(true);
            var argsObject = {
                reportId: this._reportPreview.reportId,
                reportUrl: this._reportPreview.reportUrl,
                requiredParameterPaths: this._topChangedParameter.requiredParameterPaths,
                parameters: this.serializeParameters(),
                changedParameterPath: this._topChangedParameter.changedParameter.path,
                timeZoneOffset: 0 - new Date().getTimezoneOffset()
            };
            this._getParametersStateRequest(argsObject)
                .done((result) => deferred.resolve(result))
                .fail(() => deferred.resolve());
            deferred.done(this._getDoneGetParametersStateHandler(this._topChangedParameter.changedParameter));
            deferred.fail(this._getFailGetParametersStateHandler());
            this.prevParametersStateRequest = deferred;
            this._topChangedParameter = null;
        }, 20);
    }
}
