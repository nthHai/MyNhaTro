/**
* DevExpress HTML/JS Reporting (viewer\parameters\previewParameter.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { compareArrays } from '@devexpress/analytics-core/analytics-internal';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import { Editor } from '@devexpress/analytics-core/analytics-widgets';
import ArrayStore from 'devextreme/data/array_store';
import * as ko from 'knockout';
import { MultiValuesHelper } from './multiValuesHelper';
import { ParameterHelper } from './parameterHelper';
import { PreviewParameterHelper } from './previewParameterHelper';
export class PreviewParameter extends Disposable {
    constructor(parameterInfo, parameterHelper) {
        super();
        this.hasVerticalLabel = ko.observable(false);
        this.valueInfo = ko.observable();
        this.lookUpValues = ko.observableArray();
        this.valueStoreCache = null;
        this.multiValueInfo = ko.observable();
        this.intTypes = ['System.Int16', 'System.Int32', 'System.Int64'];
        this.floatTypes = ['System.Single', 'System.Double', 'System.Decimal'];
        this.isTypesCurrentType = (types, type) => types.indexOf(type) > -1;
        this.tag = parameterInfo.Tag;
        this.type = parameterInfo.TypeName;
        this.isRange = parameterInfo.Value && parameterInfo.Value.Start !== undefined && parameterInfo.Value.End !== undefined;
        this.path = parameterInfo.Path;
        this.visible = ko.observable(parameterInfo.Visible);
        this.enabled = ko.observable(parameterInfo.Enabled);
        this.isFilteredLookUpSettings = parameterInfo.IsFilteredLookUpSettings;
        this.hasBindedExpressions = !!(parameterInfo.EnabledExpression || parameterInfo.VisibleExpression);
        this.hasVisibleExpression = !!parameterInfo.VisibleExpression;
        this._originalLookUpValues = parameterInfo.LookUpValues ? parameterHelper.mapLookUpValues(this.type, parameterInfo.LookUpValues || []) : null;
        this.lookUpValues(this._originalLookUpValues);
        this.lookUpValues.subscribe(() => { this.valueStoreCache = null; });
        this.isMultiValue = parameterInfo.MultiValue;
        this.selectAllValues = parameterInfo.SelectAllValues;
        this.allowNull = parameterInfo.AllowNull;
        this.isMultiValueWithLookUp = this.isMultiValue && !!this.lookUpValues();
        this._originalValue = parameterInfo.Value;
        if (parameterInfo.ValueInfo && this.isTypesCurrentType(this.intTypes.concat(this.floatTypes), this.type) && !this.isMultiValueWithLookUp) {
            this._originalValue = parameterInfo.ValueInfo;
        }
        this.getParameterDescriptor = () => {
            return {
                description: parameterInfo.Description,
                displayName: parameterInfo.Description || parameterInfo.Name,
                name: parameterInfo.Name,
                tag: parameterInfo.Tag,
                type: parameterInfo.TypeName,
                value: this._originalValue,
                multiValue: parameterInfo.MultiValue,
                selectAllValues: parameterInfo.SelectAllValues,
                allowNull: parameterInfo.AllowNull,
                hasLookUpValues: !!this.lookUpValues() || parameterHelper.isEnumType(this),
                visible: parameterInfo.Visible,
                enabled: parameterInfo.Enabled
            };
        };
        this._disposables.push(ko.computed(() => {
            var info = parameterHelper.getParameterInfo(this);
            info.propertyName = PreviewParameterHelper.getPrivatePropertyName(parameterInfo.Path);
            info.editor.editorType = info.editor.editorType || Editor;
            info.editorOptions.hasVerticalLabel = this.hasVerticalLabel();
            this.valueInfo(info);
        }));
        this.initialize(this._originalValue, parameterHelper);
    }
    static _compareValues(value1, value2) {
        if (value1 instanceof Date && value2 instanceof Date) {
            return value1 - value2 === 0;
        }
        return value1 === value2;
    }
    safeAssignObservable(name, value) {
        if (this[name]) {
            if (PreviewParameter._compareValues(this[name](), value()))
                this[name](null);
            var isEqual = false;
            if (value() instanceof MultiValuesHelper && Array.isArray(value().items))
                isEqual = compareArrays(this[name]().items, value().items);
            else if (Array.isArray(value()))
                isEqual = compareArrays(this[name](), value());
            if (!isEqual) {
                this[name](value());
            }
        }
        else {
            this[name] = value;
        }
    }
    initialize(value, parameterHelper) {
        var resultValue;
        if (this.isMultiValueWithLookUp) {
            this.safeAssignObservable('_value', ko.observableArray((value || []).map((arrayItem) => {
                return parameterHelper.getValueConverter(this.type)(arrayItem);
            })));
            var multiValuesHelper = new MultiValuesHelper(this._value, this.lookUpValues(), this.selectAllValues);
            var newItems;
            if (parameterHelper.customizeParameterLookUpSource)
                newItems = parameterHelper.customizeParameterLookUpSource(this.getParameterDescriptor(), multiValuesHelper.dataSource);
            if (newItems) {
                multiValuesHelper.dataSource = newItems;
            }
            else {
                var store = new ArrayStore({
                    data: multiValuesHelper.dataSource,
                    key: 'value',
                });
                multiValuesHelper.dataSource = ParameterHelper.createDefaultDataSource(store);
            }
            resultValue = ko.observable(multiValuesHelper);
        }
        else if (this.isMultiValue) {
            resultValue = value ? parameterHelper.createMultiValueArray(value, this) : ko.observableArray();
        }
        else if (this.allowNull && !value && value !== false) {
            resultValue = ko.observable(null);
        }
        else if (this.isRange) {
            var converter = parameterHelper.getValueConverter(this.type);
            resultValue = ko.observableArray([this._originalValue.Start, this._originalValue.End].map(x => ko.unwrap(converter(x))));
        }
        else {
            resultValue = ko.observable(parameterHelper.getValueConverter(this.type)(value));
        }
        this.safeAssignObservable('value', resultValue);
    }
}
