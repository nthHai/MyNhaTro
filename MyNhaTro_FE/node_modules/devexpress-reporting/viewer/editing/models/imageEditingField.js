/**
* DevExpress HTML/JS Reporting (viewer\editing\models\imageEditingField.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CssCalculator, KeyboardEnum } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { brickStyleSerializationsInfo } from '../../../common/metadata';
import { EditingFieldExtensions } from '../../../common/utils/editingFieldExtensions';
import { PreviewSelection } from '../../internal/_previewSelection';
export class ImageEditingFieldViewModel extends Disposable {
    constructor(field, pageWidth, pageHeight, zoom, bounds) {
        var _a;
        super();
        this.field = field;
        this.zoom = zoom;
        this.bounds = bounds;
        this.popupTarget = '.dx-designer';
        this.popupOptions = {
            target: this.popupTarget,
            boundary: this.popupTarget,
            container: this.popupTarget
        };
        this.template = 'dxrp-editing-field-image';
        this.active = ko.observable(false);
        this.shadingEnabled = ko.observable(true);
        var brickStyle = field.model().brickOptions;
        var style = { rtl: () => brickStyle.rtl };
        new ModelSerializer().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        var cssCalculator = new CssCalculator(style, ko.observable(!!brickStyle.rtlLayout));
        this._disposables.push(this.alignment = ko.computed(() => {
            return field.editValue().alignment;
        }), this.sizeMode = ko.computed(() => {
            return field.editValue().sizeMode;
        }));
        var editor = EditingFieldExtensions.instance().editor(field.editorName()) || EditingFieldExtensions.instance().editor('ImageAndSignature');
        var options = editor.options;
        this.shadingEnabled(!!((_a = options.registrationOptions) === null || _a === void 0 ? void 0 : _a.shadingEnabled));
        this.editMode = options.editMode;
        this.containerStyle = () => {
            return $.extend({
                height: this.bounds.height * zoom() + 'px',
                width: this.bounds.width * zoom() + 'px',
                zIndex: this.active() ? 10 : 0,
                top: this.bounds.top * 100 / pageHeight + '%',
                left: this.bounds.left * 100 / pageWidth + '%'
            }, cssCalculator.borderCss(), cssCalculator.paddingsCss());
        };
        this.callbacks = $.extend({
            onDraw: (s) => this.onDraw(s),
            onFocusIn: (s) => this.onFocusIn(s),
            onFocusOut: (s) => this.onBlur(s)
        }, options.callbacks);
    }
    getImage() {
        return this.field.editValue().image;
    }
    getImageType() {
        return this.field.editValue().imageType;
    }
    getPictureEditorOptions() {
        return {
            image: this.getImage(),
            imageType: this.getImageType(),
            imageMode: ko.observable(this.editMode),
            alignment: this.alignment,
            sizeMode: this.sizeMode,
            callbacks: this.callbacks,
            active: this.active,
            zoom: this.zoom,
            popupOptions: this.popupOptions,
            shadingEnabled: this.shadingEnabled
        };
    }
    onKeyDown(_, e) {
        if (e.key == KeyboardEnum.Space) {
        }
        else {
        }
    }
    onFocusIn(s) {
        PreviewSelection.disabled = true;
    }
    onDraw(s) {
        PreviewSelection.disabled = true;
    }
    onBlur(s) {
        var options = s.getCurrentOptions();
        var result = $.extend({}, this.field.editValue(), options);
        if (!!result.imageType) {
            result.imageType = result.imageType === 'svg' ? 'svg' : ImageEditingFieldViewModel.__DefaultImageType;
        }
        var currentVal = this.field.editValue();
        var isNotEqual = Object.keys(currentVal).some(x => {
            if (!result[x] && !currentVal[x])
                return false;
            return result[x] !== currentVal[x];
        });
        if (isNotEqual)
            this.field.editValue(result);
        PreviewSelection.disabled = false;
    }
}
ImageEditingFieldViewModel.__DefaultImageType = 'img';
