/**
* DevExpress HTML/JS Reporting (viewer\editing\models\popupImageEditingField.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as $ from 'jquery';
import * as ko from 'knockout';
import { ImageEditingFieldViewModel } from './imageEditingField';
export class PopupImageEditingFieldViewModel extends ImageEditingFieldViewModel {
    constructor() {
        super(...arguments);
        this.parentPopupClass = 'dxrp-editing-field-popup-container';
        this._popupInitializedClass = 'dxrp-editing-field-popup-container-initialized';
        this._getPopupContainer = (element) => $.fn.constructor(element).closest('.' + this.parentPopupClass);
        this._getPainterModel = (element) => {
            var $painter = this._getPopupContainer(element).find('.dx-painter');
            return $painter.length ? ko.dataFor($painter[0]) : null;
        };
        this._getPictureEditorModel = (element) => {
            var $popupEditing = $.fn.constructor(element).find('.dx-picture-editing');
            return $popupEditing.length ? ko.dataFor($popupEditing[0]) : null;
        };
        this._resetPictureEditor = (pictureEditorModel) => {
            pictureEditorModel.reset(this.painterData.imageSource, this.painterData.alignment, this.painterData.sizeMode, this.painterData.imageType);
            this._resetPainter(pictureEditorModel.painter);
        };
        this._resetPainter = (painter) => {
            painter.imagePainter.format(painter.imageFormatByType(this.getImageType()));
            painter.imagePainter.sizeMode(this.sizeMode());
            painter.imagePainter.alignment(this.alignment());
            painter.imagePainter.image(this.getImage());
            painter.refresh();
        };
        this.template = 'dxrp-popup-editing-field-image';
    }
    isPopupActive(element) {
        return this.active() && this._getPopupContainer(element).hasClass(this._popupInitializedClass);
    }
    getPainter() {
        if (this.painterData == null) {
            this.painterData = {
                imageSource: this.getImage(),
                imageType: this.getImageType(),
                alignment: this.alignment(),
                sizeMode: this.sizeMode(),
                zoom: this.zoom,
                canDraw: ko.observable(false)
            };
        }
        return this.painterData;
    }
    getPopupData() {
        var _showContent = ko.observable(false);
        this.popupData = {
            contentData: this,
            paintData: this.painterData,
            contentTemplate: 'dxrp-editing-field-image-editor',
            isVisible: (element) => this.isPopupActive(element),
            getPositionTarget: (element) => this._getPopupContainer(element),
            shading: this.shadingEnabled,
            showContent: _showContent,
            onShown: (e) => {
                _showContent(true);
            },
            onHiding: (e) => {
                this._getPictureEditorModel(e.component._$popupContent[0]).painter.signaturePainter.resetLastPosition();
                this._resetPainter(this._getPainterModel(e.element));
                document.activeElement['blur']();
                this.active(false);
            },
            onContentReady: (e) => {
                this._resetPainter(this._getPainterModel(e.element));
                e.component && e.component.registerKeyHandler('tab', (_) => {
                    this.popupData.onHiding(e);
                });
            },
            renderedHandler: (element, model) => {
                this._resetPictureEditor(this._getPictureEditorModel(element));
            }
        };
        return this.popupData;
    }
    activateEditor(viewModel, e) {
        if (!this.field.readOnly()) {
            var _parentPopup = this._getPopupContainer(e.target);
            if (!_parentPopup.hasClass(this._popupInitializedClass))
                _parentPopup.addClass(this._popupInitializedClass);
            this.active(true);
        }
    }
}
export var DefaultImageEditingFieldViewModel = PopupImageEditingFieldViewModel;
