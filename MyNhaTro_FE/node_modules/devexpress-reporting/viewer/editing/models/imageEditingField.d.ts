/**
* DevExpress HTML/JS Reporting (viewer\editing\models\imageEditingField.d.ts)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { PictureEditMode } from '../../widgets/pictureEditor/pictureEditMode';
import { IPictureEditorCallbacks, IPictureEditorOptions, IPictureEditorPopupTargetOptions, PictureEditorModel } from '../../widgets/pictureEditor/_pictureEditorModel';
import { EditingField, IBounds, IEditingFieldViewModel, ImageAlignment, ImageSizeMode } from '../editingField';
export declare class ImageEditingFieldViewModel extends Disposable implements IEditingFieldViewModel {
    field: EditingField;
    zoom: ko.Observable<number> | ko.Computed<number>;
    protected bounds: IBounds;
    static __DefaultImageType: string;
    protected popupTarget: string;
    constructor(field: EditingField, pageWidth: number, pageHeight: number, zoom: ko.Observable<number> | ko.Computed<number>, bounds: IBounds);
    getImage(): any;
    getImageType(): any;
    getPictureEditorOptions(): IPictureEditorOptions;
    alignment: ko.Computed<ImageAlignment>;
    sizeMode: ko.Computed<ImageSizeMode>;
    editMode: PictureEditMode;
    popupOptions: IPictureEditorPopupTargetOptions;
    template: string;
    active: ko.Observable<boolean>;
    shadingEnabled: ko.Observable<boolean>;
    containerStyle: () => {};
    callbacks: IPictureEditorCallbacks;
    onKeyDown(_: any, e: any): void;
    onFocusIn(s: PictureEditorModel): void;
    onDraw(s: PictureEditorModel): void;
    onBlur(s: PictureEditorModel): void;
}
