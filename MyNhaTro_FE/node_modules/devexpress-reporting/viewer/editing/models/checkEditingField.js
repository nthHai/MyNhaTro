/**
* DevExpress HTML/JS Reporting (viewer\editing\models\checkEditingField.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ImageSource } from '../../../common/imageSource';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import * as $ from 'jquery';
import { SvgTemplatesEngine } from '@devexpress/analytics-core/analytics-widgets-internal';
import { KeyboardEnum } from '@devexpress/analytics-core/analytics-internal';
export var GlyphStyle;
(function (GlyphStyle) {
    GlyphStyle[GlyphStyle["StandardBox1"] = 0] = "StandardBox1";
    GlyphStyle[GlyphStyle["StandardBox2"] = 1] = "StandardBox2";
    GlyphStyle[GlyphStyle["YesNoBox"] = 2] = "YesNoBox";
    GlyphStyle[GlyphStyle["YesNoSolidBox"] = 3] = "YesNoSolidBox";
    GlyphStyle[GlyphStyle["YesNo"] = 4] = "YesNo";
    GlyphStyle[GlyphStyle["RadioButton"] = 5] = "RadioButton";
    GlyphStyle[GlyphStyle["Smiley"] = 6] = "Smiley";
    GlyphStyle[GlyphStyle["Thumb"] = 7] = "Thumb";
    GlyphStyle[GlyphStyle["Toggle"] = 8] = "Toggle";
    GlyphStyle[GlyphStyle["Star"] = 9] = "Star";
    GlyphStyle[GlyphStyle["Heart"] = 10] = "Heart";
})(GlyphStyle || (GlyphStyle = {}));
export var CheckState;
(function (CheckState) {
    CheckState[CheckState["Unchecked"] = 0] = "Unchecked";
    CheckState[CheckState["Checked"] = 1] = "Checked";
    CheckState[CheckState["Indeterminate"] = 2] = "Indeterminate";
})(CheckState || (CheckState = {}));
export function createCustomGlyphStyleCss(imageSource) {
    var backgroundResult = {};
    if (imageSource) {
        var urlContent = imageSource.getDataUrl();
        if (urlContent) {
            backgroundResult = { background: 'url(' + urlContent + ') no-repeat' };
            backgroundResult['backgroundPosition'] = 'center center';
            backgroundResult['backgroundSize'] = 'cover';
        }
    }
    return backgroundResult;
}
export function getCheckBoxTemplate(style, state, customGlyph) {
    if (!$.isEmptyObject(customGlyph)) {
        return 'dxrd-checkboxcustomglyph';
    }
    else {
        return SvgTemplatesEngine.getExistingTemplate('dxrd-svg-checkboxglyphs-' + style + '_' + state);
    }
}
export class CheckEditingFieldViewModel extends Disposable {
    constructor(field, pageWidth, pageHeight, zoom, editingFieldsProvider) {
        super();
        this.focused = ko.observable(false);
        this._editingFieldsProvider = editingFieldsProvider;
        this.template = 'dxrp-editing-field-checkbox';
        this.field = field;
        this.zoom = zoom;
        var bounds = this.field.model().bounds;
        var checkBounds = this.field.model().brickOptions.checkBoxBounds;
        var rtl = this.field.model().brickOptions.rtlLayout;
        this.containerStyle = () => {
            return {
                height: bounds.height + 'px',
                width: bounds.width + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%',
                cursor: this.field.readOnly() ? 'auto' : 'pointer'
            };
        };
        this.checkStyle = () => {
            var result = {
                height: checkBounds.height + 'px',
                width: checkBounds.width + 'px',
                top: checkBounds.top + 'px',
                left: (rtl ? (bounds.width - checkBounds.left - checkBounds.width) : checkBounds.left) + 'px'
            };
            return result;
        };
        this._disposables.push(this.customGlyphStyleCss = ko.pureComputed(() => {
            var imageSourceData = field.model().brickOptions.checkBoxGlyphOptions.customGlyphs.filter(item => item.key === this.field.editValue())[0];
            if (!imageSourceData.value)
                return {};
            var imageSource = new ImageSource(imageSourceData.value.imageType, imageSourceData.value.image);
            return createCustomGlyphStyleCss(imageSource);
        }));
        this._disposables.push(this.checkStateStyleIcon = ko.pureComputed(() => {
            return getCheckBoxTemplate(GlyphStyle[field.model().brickOptions.checkBoxGlyphOptions.glyphStyle], CheckState[this.field.editValue()], this.customGlyphStyleCss());
        }));
    }
    _toggleCheckState() {
        if (this.field.editValue() === CheckState.Checked) {
            this.field.editValue(CheckState.Unchecked);
        }
        else {
            this.field.editValue(CheckState.Checked);
        }
    }
    onKeyDown(_, e) {
        if (e.key == KeyboardEnum.Space) {
            this.toggleCheckState();
        }
        else {
        }
    }
    onBlur() {
        this.focused(false);
    }
    onFocus() {
        this.focused(true);
    }
    onClick(_, e) {
        e.target.focus();
        this.toggleCheckState();
        e.stopPropagation();
    }
    checked() {
        if (this.field.editValue() === CheckState.Checked) {
            return true;
        }
        if (this.field.editValue() === CheckState.Unchecked) {
            return false;
        }
    }
    toggleCheckState() {
        if (this.field.readOnly())
            return;
        if (!this.field.groupID()) {
            this._toggleCheckState();
        }
        else if (this.checked() === false) {
            this._editingFieldsProvider().forEach(value => {
                if (value.groupID() === this.field.groupID()) {
                    value.editValue(CheckState.Unchecked);
                }
            });
            this._toggleCheckState();
        }
    }
}
