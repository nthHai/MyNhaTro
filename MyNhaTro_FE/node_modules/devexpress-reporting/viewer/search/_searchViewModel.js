/**
* DevExpress HTML/JS Reporting (viewer\search\_searchViewModel.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { formatUnicorn } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, getLocalization, TabInfo } from '@devexpress/analytics-core/analytics-utils';
import DataSource from 'devextreme/data/data_source';
import * as ko from 'knockout';
import { SearchKeyboardHelper } from '../accessibility/_searchKeyboardHelper';
import { ActionId } from '../constants';
import { SearchAvailable } from '../settings';
import { SearchResultNavigator } from './_searchResultNavigator';
export class SearchViewModel extends Disposable {
    constructor(reportPreview, enableKeyboardSupport) {
        super();
        this._searchIgnoreObs = ko.observable(false);
        this.itemClickAction = (e) => {
            this.goToResult(e.data);
        };
        this.actions = [];
        this.focusRequested = ko.observable(true);
        this.matchWholeWord = ko.observable(false);
        this.matchCase = ko.observable(false);
        this.searchUp = ko.observable(false);
        this.searchText = ko.observable();
        this.searchResult = ko.observable();
        this.loading = ko.observable(false);
        this._renderedSearchResult = ko.observable([]);
        this.resetSearchResult();
        this._resultNavigator = SearchViewModel.createResultNavigator(this, reportPreview);
        this.clean = () => { this.searchText(''); };
        this._disposables.push(reportPreview._currentDocumentId.subscribe((newVal) => {
            this.resetSearchResult();
        }));
        this._disposables.push(reportPreview._currentReportId.subscribe((newVal) => {
            this.resetSearchResult();
        }));
        this.findUp = () => { this.searchUp(true); this.findNext(); };
        this.findDown = () => { this.searchUp(false); this.findNext(); };
        this.goToResult = (result) => { this._resultNavigator.goToResult(result.id); };
        var newSearch = (text, matchCase, matchWholeWord) => {
            this._searchTimeout && clearTimeout(this._searchTimeout);
            this._searchTimeout = setTimeout(() => {
                this._resultNavigator.currentResult(null);
                if (!text) {
                    reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick('');
                    this.searchResult([]);
                    return;
                }
                var mCase = this.matchCase();
                text = mCase ? this.searchText() : this.searchText().toLocaleLowerCase();
                var cache = this.matchWholeWord()
                    ? mCase ? this._cachedWholeWordWithCaseRequests : this._cachedWholeWordRequests
                    : mCase ? this._cachedCaseSensitiveRequests : this._cachedRequests;
                if (cache[text]) {
                    this.loading(false);
                    this.searchResult(cache[text]);
                    return;
                }
                this.loading(true);
                this._searchIgnoreObs(true);
                this._searchIgnoreObs = ko.observable(false);
                var self = this;
                ((ignore) => {
                    reportPreview.requestWrapper.findTextRequest(text, ignore).done(function (result) {
                        if (!ignore())
                            self.findTextRequestDone(result, cache[text]);
                    }).fail(function (error) {
                        if (!ignore()) {
                            self.searchResult([]);
                            self.loading(false);
                        }
                    });
                })(this._searchIgnoreObs);
            }, 100);
        };
        this.findNext = () => {
            if (this.loading()) {
                return;
            }
            this._resultNavigator.next(this.searchUp()) || newSearch(this.searchText(), this.matchCase(), this.matchWholeWord());
        };
        this._disposables.push(this.searchText.subscribe(newVal => { newSearch(newVal, this.matchCase(), this.matchWholeWord()); }), this.matchCase.subscribe(newVal => { newSearch(this.searchText(), newVal, this.matchWholeWord()); }), this.matchWholeWord.subscribe(newVal => { newSearch(this.searchText(), this.matchCase(), newVal); }));
        var disabled = ko.pureComputed(() => {
            var documentId = reportPreview['_currentDocumentId']();
            var pageIndex = reportPreview.pageIndex();
            return reportPreview.documentBuilding() || !documentId || pageIndex === -1;
        });
        var visible = ko.pureComputed(() => SearchAvailable());
        this._disposables.push(disabled, visible);
        this.actions.push({
            id: ActionId.Search,
            text: getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header'),
            imageClassName: 'dxrd-image-search',
            imageTemplateName: 'dxrd-svg-preview-search',
            disabled: disabled,
            visible: visible,
            hasSeparator: true,
            hotKey: { ctrlKey: false, keyCode: 70 },
            clickAction: () => {
                if (!this.tabInfo.active()) {
                    this.tabInfo.active(true);
                }
                else {
                    this.tabInfo.active.notifySubscribers(true);
                }
            }
        });
        this.tabInfo = new TabInfo({
            text: 'Search',
            template: 'dxrd-preview-search',
            model: this,
            keyboardHelper: enableKeyboardSupport ? new SearchKeyboardHelper(this) : undefined,
            localizationId: 'ASPxReportsStringId.SearchDialog_Header',
            imageClassName: 'search',
            imageTemplateName: 'dxrd-svg-preview-search',
            visible: ko.pureComputed(() => !disabled() && SearchAvailable())
        });
        this._disposables.push(this.searchResult.subscribe((newVal) => {
            if (newVal) {
                this._renderedSearchResult(newVal.map((item) => { return { data: item }; }));
            }
        }));
        this._disposables.push(this.tabInfo);
        var dataSource = null;
        this._disposables.push(this.searchResultDataSource = ko.pureComputed(() => {
            dataSource && dataSource.dispose();
            dataSource = new DataSource({
                store: this._renderedSearchResult(),
                paginate: this._renderedSearchResult().length > 20,
                pageSize: 20
            });
            return dataSource;
        }));
    }
    resetSearchResult() {
        this._cachedRequests = {};
        this._cachedWholeWordRequests = {};
        this._cachedCaseSensitiveRequests = {};
        this._cachedWholeWordWithCaseRequests = {};
        this.searchResult([]);
        this.searchText('');
    }
    findTextRequestDone(result, cache) {
        this.loading(false);
        if (!result) {
            this.searchResult([]);
            return;
        }
        cache = (result.success ? result.matches : []) || [];
        this.searchResult(cache);
    }
    dispose() {
        this._searchTimeout && clearTimeout(this._searchTimeout);
        super.dispose();
    }
    onItemRendered(e) {
        this._timeoutItemRendered && clearTimeout(this._timeoutItemRendered);
        this._timeoutItemRendered = setTimeout(() => {
            this.tabInfo.keyboardHelper && this.tabInfo.keyboardHelper.initialize();
        }, 100);
    }
    getActions(context) {
        return this.actions;
    }
    noResultText() {
        return formatUnicorn(getLocalization('No results found for {0}', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchNoResults'), '"' + this.searchText() + '"');
    }
    get disabled() { return this.loading(); }
}
SearchViewModel.createResultNavigator = (seacrhModel, reportPreview) => {
    return new SearchResultNavigator(seacrhModel, reportPreview);
};
