/**
* DevExpress HTML/JS Reporting (viewer\search\_dxSearchEditor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import registerComponent from 'devextreme/core/component_registrator';
import { addDisposeCallback, KeyboardEnum } from '@devexpress/analytics-core/analytics-internal';
import { SvgTemplatesEngine } from '@devexpress/analytics-core/analytics-widgets-internal';
import dxTextBox from 'devextreme/ui/text_box';
import * as $ from 'jquery';
import * as ko from 'knockout';
var editor_prefix = 'dx-searcheditor', EDITOR_CLASS = editor_prefix + '', EDITOR_BUTTON_CLASS = editor_prefix + '-button dx-widget dx-dropdowneditor-button', EDITOR_BUTTON_SELECTOR = '.' + editor_prefix + '-button', EDITOR_BUTTON_ICON_CLASS = editor_prefix + '-icon dx-dropdowneditor-icon dx-icon-dxrd-image-move', EDITOR_BUTTON_ICON_UP_TEMPLATE = 'dxrd-svg-operations-moveup', EDITOR_BUTTON_ICON_DOWN_TEMPLATE = 'dxrd-svg-operations-movedown';
export class dxSearchEditor extends dxTextBox {
    constructor(element, options) {
        super(element, options);
        this.option('onKeyDown', function (e) {
            if (e.event.key === KeyboardEnum.Enter) {
                e.event.stopPropagation();
                e.event.preventDefault();
                e.component['findNext'](e.event.shiftKey);
            }
        });
        this.option('onFocusOut', function (e) {
            e.component['_searchModel'].searchText(e.component.option('text'));
        });
        this._activeStateUnit = EDITOR_BUTTON_SELECTOR;
        this._focusRequestRaised = () => { this.focus(); };
        this._searchModel = options.searchModel;
        this._searchModel.focusRequested.subscribe((val) => this._focusRequestRaised());
    }
    findNext(searchUp) {
        if (this._searchModel.searchText() !== this.option('text')) {
            this._searchModel.searchText(this.option('text'));
        }
        else {
            try {
                if (searchUp) {
                    (!this._searchModel.loading()) && this._searchModel.findUp();
                }
                else {
                    (!this._searchModel.loading()) && this._searchModel.findDown();
                }
            }
            finally {
                return true;
            }
        }
    }
    _init() {
        super['_init'].apply(this);
        var $element = $.fn.constructor(this.element());
        $element.addClass(EDITOR_CLASS);
        this._koContext = ko.contextFor($element.get(0));
    }
    _render() {
        super['_render'].apply(this);
        this._$buttons = [];
        this.on('keyDown', (e) => {
            if (e.event.key == 'ArrowUp')
                this.findNext(true) && e.event.stopPropagation();
            if (e.event.key == 'ArrowDown')
                this.findNext(false) && e.event.stopPropagation();
        });
        this._renderButton('Up');
        this._renderButton('Down');
    }
    _renderButton(direction) {
        this._$button = $.fn.constructor('<div />').addClass(EDITOR_BUTTON_CLASS);
        this._attachButtonEvents(direction);
        this._$buttonIcon = $.fn.constructor('<div />').addClass(EDITOR_BUTTON_ICON_CLASS + direction.toLowerCase())
            .append(SvgTemplatesEngine.templates[direction.toLowerCase() === 'up' ? EDITOR_BUTTON_ICON_UP_TEMPLATE : EDITOR_BUTTON_ICON_DOWN_TEMPLATE])
            .appendTo(this._$button);
        ko.applyBindingsToDescendants(this._koContext, this._$buttonIcon[0]);
        var buttonsContainer = this['_buttonsContainer']();
        this._$button.appendTo(buttonsContainer);
        this._$buttons.push(this._$button);
    }
    _attachButtonEvents(direction) {
        this._$button.off('click');
        var onClick = (e) => {
            this.findNext(direction.toLowerCase() === 'up') && e.stopPropagation();
        };
        if (!this.option('disabled')) {
            this._$button.on('click', onClick);
            addDisposeCallback(this._$button[0], () => {
                this._$buttons.forEach($button => {
                    $button.off('click');
                });
            });
        }
    }
}
registerComponent('dxSearchEditor', dxSearchEditor);
