/**
* DevExpress HTML/JS Reporting (viewer\reportPreview.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CustomSortedArrayStore, formatUnicorn, getErrorMessage } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, ModelSerializer, getLocalization } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { generateGuid, transformNewLineCharacters, isIOS } from '../common/utils/_utils';
import { PreviewBricksKeyboardHelper } from './accessibility/_previewBricksKeyboardHelper';
import { ZoomAutoBy } from './constants';
import { EditingField } from './editing/editingField';
import { ExportOptionsMergedPreview, ExportOptionsPreview } from './exportOptions/exportOptionsPreview';
import { ExportHandler } from './internal/_exportHandler';
import { PreviewPage } from './internal/_page';
import { PreviewHandlersHelper } from './internal/_previewHandlersHelper';
import { PreviewRequestWrapper } from './internal/_previewRequestWrapper';
import { ProgressViewModel } from './internal/_progressViewModel';
import { SortingProcessor } from './internal/_sortingProcessor';
import { safelyRunWindowOpen } from './internal/_utils';
import { EditablePreviewEnabled, HandlerUri, MessageHandler, PollingDelay } from './settings';
export class ReportPreview extends Disposable {
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, enableKeyboardSupport, exportSettings, element) {
        super();
        this.enableKeyboardSupport = enableKeyboardSupport;
        this.element = element;
        this.predefinedZoomLevels = ko.observableArray([5, 2, 1.5, 1, 0.75, 0.5, 0.25]);
        this._pageWidth = ko.observable(818);
        this._pageHeight = ko.observable(1058);
        this._pageBackColor = ko.observable('');
        this._currentReportId = ko.observable(null);
        this._currentReportUrl = ko.observable(null);
        this._currentDocumentId = ko.observable(null);
        this._unifier = ko.observable('');
        this._stopBuildRequests = {};
        this._closeReportRequests = {};
        this._closeDocumentRequests = {};
        this._cancelExportRequests = {};
        this._editingFields = ko.observable([]);
        this._startBuildOperationId = '';
        this._editingValuesSubscriptions = [];
        this._drillDownState = [];
        this._sortingState = [];
        this._sortingProcessor = new SortingProcessor(() => this._sortingState || []);
        this._getBuildStatusDeferreds = [];
        this._timeouts = [];
        this._deferreds = [];
        this.getSelectedContent = (punctuationMark = '') => {
            var currentPage = this.pages()[this.pageIndex()];
            if (!currentPage || !currentPage.brickColumnWidthArray) {
                return '';
            }
            var activeBricks = [];
            var getActiveBricks = function (currentBrick, resultArray) {
                if (!currentBrick) {
                    return;
                }
                currentBrick.active() && currentBrick.genlIndex != -1 && activeBricks.push(currentBrick);
                currentBrick.bricks && currentBrick.bricks.length != 0 && currentBrick.bricks.forEach((innerBrick) => { getActiveBricks(innerBrick, resultArray); });
            };
            getActiveBricks(currentPage.brick(), activeBricks);
            if (!activeBricks) {
                return '';
            }
            var sortedActiveBricks = [];
            var extendWithSpaces = function (width, text) {
                var spaceCount = width - text.length;
                for (var i = 0; i <= spaceCount; i++) {
                    text += ' ';
                }
                return text;
            };
            var firstUsedColumn = currentPage.brickColumnWidthArray.length, lastUsedColumn = -1;
            activeBricks.forEach((activeBrick) => {
                var row = sortedActiveBricks[activeBrick.row];
                if (!row) {
                    row = [];
                    sortedActiveBricks[activeBrick.row] = row;
                }
                row[activeBrick.col] = activeBrick.accessibleDescription || activeBrick.text();
                if (firstUsedColumn > activeBrick.col) {
                    firstUsedColumn = activeBrick.col;
                }
                if (lastUsedColumn < activeBrick.col) {
                    lastUsedColumn = activeBrick.col;
                }
            });
            var result = '';
            sortedActiveBricks.forEach((row, index) => {
                for (var c = firstUsedColumn; c <= lastUsedColumn; c++) {
                    var rowText = row[c] ? row[c] + punctuationMark : '';
                    result += c == lastUsedColumn ? rowText : extendWithSpaces(currentPage.brickColumnWidthArray[c], rowText);
                }
                if (index != sortedActiveBricks.length - 1) {
                    result += '\r\n';
                }
            });
            return result;
        };
        this.rtlReport = ko.observable(false);
        this.currentPage = ko.observable(null);
        this.originalParametersInfo = ko.observable(null);
        this.pageIndex = ko.observable(-1);
        this.showMultipagePreview = ko.observable(false);
        this.documentMap = ko.observable();
        this.exportOptionsModel = ko.observable();
        this.pageLoading = ko.observable(false);
        this.errorMessage = ko.observable('');
        this.documentBuilding = ko.observable(false);
        this.reportOpening = ko.observable(false);
        this.pages = ko.observableArray([]).extend({ rateLimit: { timeout: 20, method: 'notifyWhenChangesStop' } });
        this.isAutoFit = ko.observable(true);
        this.autoFitBy = ko.observable(ZoomAutoBy.WholePage);
        this.exportDisabled = ko.pureComputed(() => {
            var inProgress = this.progressBar.inProgress();
            var documentBuilding = this.documentBuilding();
            return this.pageIndex() === -1 || inProgress || documentBuilding;
        });
        this._zoom = ko.observable(1);
        this.zoom = ko.pureComputed({
            read: () => {
                var autoFitBy = this.autoFitBy();
                if (autoFitBy != ZoomAutoBy.None || this._zoom() === 0) {
                    return autoFitBy;
                }
                return this._zoom();
            },
            write: (val) => {
                if (val > 0) {
                    this.autoFitBy(ZoomAutoBy.None);
                    this._zoom(val);
                }
                else {
                    this.autoFitBy(val);
                }
            }
        });
        this.editingFieldsProvider = () => this._editingFields();
        this._currentPageText = ko.pureComputed(() => {
            if (this.pageIndex() === -1) {
                return getLocalization('0 pages', 'ASPxReportsStringId.WebDocumentViewer_0Pages');
            }
            else {
                var ofText = getLocalization('of', 'ASPxReportsStringId.ToolBarItemText_OfLabel');
                return (this.pageIndex() + 1) + ' ' + ofText + ' ' + this.pages().length;
            }
        });
        this._raiseOnSizeChanged = () => { this.onSizeChanged() && this.onSizeChanged()(); };
        this.previewSize = ko.observable(0);
        this.onSizeChanged = ko.observable();
        this.previewVisible = ko.observable(false);
        this.editingFieldsHighlighted = ko.observable(false);
        this.canSwitchToDesigner = true;
        this.allowURLsWithJSContent = false;
        this.zoomStep = ko.observable(0.05);
        this._progressFirstTime = false;
        this.emptyDocumentCaption = ko.pureComputed(() => {
            var parametersInfo = this.originalParametersInfo();
            var parametersExist = parametersInfo && parametersInfo.parameters.some(x => x.Visible);
            var newCaption = '';
            if (this.documentBuilding()) {
                if (this.currentPage()) {
                    if (!this._progressFirstTime)
                        newCaption = formatUnicorn(getLocalization('Progress {0}%', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentProgress'), this.progressBar.progress().toString());
                    else
                        newCaption = this.progressBar.progress() + '%';
                    this._progressFirstTime = true;
                }
                else {
                    newCaption = getLocalization('Creating the document...', 'PreviewStringId.Msg_CreatingDocument');
                }
            }
            else if (parametersExist && !this.documentId) {
                newCaption = getLocalization('Waiting for parameter values...', 'PreviewStringId.Msg_WaitingForParameterValues');
            }
            else if (this.documentId) {
                this._progressFirstTime = false;
                if (this.pageIndex() !== -1 && !this.progressBar.inProgress()) {
                    newCaption = getLocalization('Document is ready', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentReady');
                }
                else {
                    newCaption = getLocalization('The document does not contain any pages.', 'PreviewStringId.Msg_EmptyDocument');
                }
            }
            else if (this.reportOpening()) {
                this._progressFirstTime = false;
                newCaption = getLocalization('Loading...', 'AnalyticsCoreStringId.Loading');
            }
            else if (this.errorMessage()) {
                newCaption = this.errorMessage();
            }
            return newCaption;
        }).extend({ rateLimit: { timeout: 1000 } });
        this.exportOptionsTabVisible = ko.observable(true);
        HandlerUri(handlerUri || HandlerUri());
        this.progressBar = new ProgressViewModel(enableKeyboardSupport);
        this.editingFieldChanged = callbacks && callbacks.editingFieldChanged;
        this.previewHandlersHelper = previewHandlersHelper || new PreviewHandlersHelper(this);
        this.requestWrapper = previewRequestWrapper || new PreviewRequestWrapper(null, callbacks);
        this.rtlViewer = rtl;
        this.exportHandler = new ExportHandler(exportSettings, this);
        if (callbacks) {
            this.customProcessBrickClick = callbacks.previewClick;
            this.customizeExportOptions = callbacks.customizeExportOptions;
            this.exportHandler.onExportCustomEvent = callbacks.onExport;
            this._onGetBuildStatus = callbacks._onGetBuildStatus;
            this._onGetDocumentDetails = callbacks._onGetDocumentDetails;
        }
        this._disposables.push(EditablePreviewEnabled.subscribe((newValue) => !newValue && this.editingFieldsHighlighted(false)));
        this._disposables.push(this.documentBuilding.subscribe((newVal) => {
            if (!newVal) {
                this._unifier(generateGuid());
                var documentId = this._currentDocumentId();
                var pageCount = this.pages().length;
                for (var i = 0; i < pageCount; i++) {
                    var page = this.pages()[i];
                    if (!page.pageLoading()) {
                        page.clearBricks();
                    }
                    page.updateSize(this._zoom());
                    page.actualResolution = 0;
                    page.isClientVisible() && page._setPageImgSrc(documentId, this._unifier(), this._zoom());
                }
                if (callbacks && callbacks.documentReady && documentId) {
                    var self = this;
                    this._timeouts.push(setTimeout(function () {
                        callbacks.documentReady(documentId, self._currentReportId(), pageCount);
                    }));
                }
            }
        }));
        this._disposables.push(this._currentDocumentId.subscribe((newVal) => {
            this._unifier(newVal ? generateGuid() : '');
        }));
        this._disposables.push(this.previewSize.subscribe(() => this._raiseOnSizeChanged()));
        this._disposables.push(this.zoom);
        this._disposables.push(this.exportDisabled);
        this._disposables.push(this._currentPageText);
        this._disposables.push(this.progressBar);
        this._disposables.push(this.emptyDocumentCaption);
        this._disposables.push(this.showMultipagePreview.subscribe(() => {
            if (!this.showMultipagePreview()) {
                var currentPage = this.pages()[this.pageIndex()];
                currentPage && currentPage.isClientVisible(true);
            }
        }));
        this._disposables.push(this._zoom.subscribe(() => {
            if (this.showMultipagePreview()) {
                this.pages().forEach((page) => {
                    page.updateSize(page.zoom());
                    page.isClientVisible(false);
                });
                this._raiseOnSizeChanged();
            }
            else {
                var currentPage = this.pages()[this.pageIndex()];
                currentPage && currentPage.isClientVisible.notifySubscribers(currentPage.isClientVisible.peek());
            }
        }));
        this._disposables.push(ko.computed(() => {
            var pagesArray = this.pages();
            var pageIndex = this.pageIndex();
            if (!pagesArray || pageIndex >= pagesArray.length)
                return;
            var currentPage = null;
            if (pageIndex >= 0)
                currentPage = pagesArray[pageIndex];
            if (currentPage != this.currentPage.peek())
                this.currentPage(currentPage);
        }));
        if (enableKeyboardSupport) {
            this.previewBrickKeyboardHelper = new PreviewBricksKeyboardHelper(this);
            this._disposables.push(this.previewBrickKeyboardHelper);
        }
    }
    _doDrillDown(drillDownKey) {
        this._drillDownState.forEach((x) => x.Key === drillDownKey && (x.Value = !x.Value));
        var documentId = this._currentDocumentId();
        this.closeDocument();
        this.progressBar.complete(documentId);
        this.documentMap(null);
        for (var i = this.pages().length - 1; i >= 0; i--) {
            var page = this.pages()[i];
            if (i > this.pageIndex()) {
                this.pages.remove(page);
            }
            else {
                page._clear();
            }
        }
        this._startBuildRequest();
    }
    _doSorting(sortData, shiftKey, ctrlKey) {
        if (!this._sortingProcessor.doSorting(sortData, shiftKey, ctrlKey))
            return;
        this.closeDocument();
        this.documentMap(null);
        this.pages().forEach(page => page._clear());
        this._startBuildRequest();
    }
    dispose() {
        super.dispose();
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        (this._deferreds || []).forEach(deferred => deferred.reject());
        this.exportHandler && this.exportHandler.dispose();
        this.removeProperties();
        this._sortingProcessor = null;
    }
    removeEmptyPages(all) {
        all && this.pages.removeAll();
        for (var idx = this.pages().length - 1; idx >= 0; idx--) {
            var tempPage = this.pages()[idx];
            (tempPage.isEmpty || tempPage.pageIndex === -1) && this.pages.remove(tempPage);
        }
    }
    _initialize() {
        this._drillDownState = [];
        this._sortingState = [];
        this.closeDocument();
        this._editingFields([]);
        this._editingValuesSubscriptions.forEach(item => item.dispose());
        this._editingValuesSubscriptions = [];
        this.documentMap(null);
        this.pageIndex(-1);
        this.pageLoading(true);
        this.errorMessage('');
        this.progressBar.complete(null);
        this._getBuildStatusDeferreds.forEach(a => a.reject());
        this._getBuildStatusDeferreds = [];
        this.pages().forEach(x => x.dispose());
        this.pages([this.createPage(-1, undefined, this.pageLoading)]);
        this.exportHandler.reportDisplayName(null);
    }
    createPage(pageIndex, processClick, loading) {
        return new PreviewPage(this, pageIndex, processClick, loading);
    }
    _cleanTabInfo() {
        this.exportOptionsModel(null);
        this.documentMap(null);
    }
    _clearReportInfo() {
        this._cleanTabInfo();
        this.closeReport();
        this.originalParametersInfo(null);
    }
    createBrickClickProcessor(cyclePageIndex) {
        var _self = this;
        return (brick, e) => {
            _self.goToPage(cyclePageIndex, true);
            if (!brick)
                return;
            var page = _self.pages()[cyclePageIndex];
            if (!page)
                return;
            page.selectBrick('');
            var shiftKey = !!(e && e.shiftKey);
            var ctrlKey = !!(e && e.ctrlKey);
            var brickNavigation = brick && brick.navigation;
            var defaultHandler = () => {
                if (brickNavigation) {
                    if (brickNavigation.drillDownKey && _self.reportId && _self._doDrillDown && _self._drillDownState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doDrillDown(brickNavigation.drillDownKey);
                    }
                    else if (brickNavigation.sortData && _self.reportId && _self._doSorting && _self._sortingState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doSorting(brickNavigation.sortData, shiftKey, ctrlKey);
                    }
                    if (brickNavigation.pageIndex >= 0) {
                        var targetPage = _self.pages().filter(page => page.pageIndex === brickNavigation.pageIndex)[0];
                        if (targetPage) {
                            _self.goToPage(brickNavigation.pageIndex);
                            targetPage.selectBrick(brickNavigation.indexes);
                            _self.brickClickDocumentMapHandler && _self.brickClickDocumentMapHandler(brickNavigation);
                        }
                    }
                    else {
                        var validateUrl = function (url) {
                            var isUrlString = typeof url === 'string';
                            if (isUrlString) {
                                url = url.toLowerCase();
                            }
                            if (url === 'empty') {
                                return false;
                            }
                            return _self.allowURLsWithJSContent || (isUrlString && (url.indexOf('javascript:') === -1));
                        };
                        if (brickNavigation.url && validateUrl(brickNavigation.url)) {
                            safelyRunWindowOpen(brickNavigation.url, brickNavigation.target || '_blank');
                        }
                    }
                }
            };
            if (_self.customProcessBrickClick && _self.customProcessBrickClick(cyclePageIndex, brick, defaultHandler))
                return;
            defaultHandler();
        };
    }
    delayedInit() {
        this.previewBrickKeyboardHelper && this.previewBrickKeyboardHelper.delayedInit();
    }
    openReport(reportName) {
        this._clearReportInfo();
        var deferred = $.Deferred();
        this._deferreds.push(deferred);
        this._openReportOperationDeferred = deferred;
        this.requestWrapper.openReport(reportName).done((response) => {
            deferred.resolve(response);
        }).fail((error) => {
            deferred.reject(error);
        });
        return this.initialize(deferred.promise());
    }
    drillThrough(customData, closeCurrentReport = true) {
        var deferred = $.Deferred();
        this.requestWrapper.drillThrough(customData).done(response => {
            if (closeCurrentReport) {
                this._clearReportInfo();
                this.initialize(deferred.promise());
            }
            deferred.resolve(response);
        }).fail((error) => {
            deferred.reject(error);
        });
        return deferred.promise();
    }
    _sortCustomParametersLookUpValues(reportParameterInfo) {
        var _a;
        if (!reportParameterInfo || !reportParameterInfo.knownEnums)
            return;
        (_a = reportParameterInfo.parameters) === null || _a === void 0 ? void 0 : _a.forEach((parameter) => {
            if (!parameter.LookUpValues)
                return;
            if (reportParameterInfo.knownEnums.some(x => x.enumType === parameter.TypeName)) {
                CustomSortedArrayStore._sortItems(parameter.LookUpValues, 'Description');
            }
        });
    }
    initialize(initializeDataPromise) {
        this.reportOpening(true);
        this._currentReportId(null);
        this._currentReportUrl(null);
        this._currentDocumentId(null);
        this._initialize();
        var _initializeDeferred = $.Deferred();
        this._deferreds.push(_initializeDeferred);
        _initializeDeferred.done(() => {
            initializeDataPromise.done((previewInitialize) => {
                this.reportOpening(false);
                if (previewInitialize && !previewInitialize.error && (previewInitialize.reportId || previewInitialize.documentId)) {
                    this._currentReportId(previewInitialize.reportId);
                    this._currentReportUrl(previewInitialize.reportUrl);
                    this._currentDocumentId(previewInitialize.documentId);
                    this.rtlReport(previewInitialize.rtlReport);
                    var pageSettings = previewInitialize.pageSettings;
                    if (pageSettings) {
                        if (pageSettings.height)
                            this._pageHeight(pageSettings.height);
                        if (pageSettings.width)
                            this._pageWidth(pageSettings.width);
                        this._pageBackColor((pageSettings.color && this.readerMode) ? 'rgba(' + pageSettings.color + ')' : '');
                    }
                    var deserializedExportOptions = this._deserializeExportOptions(previewInitialize.exportOptions, !this.reportId && (!previewInitialize.documentData || !previewInitialize.documentData.canPerformContinuousExport));
                    var customizeExportOptionsArgs = { exportOptions: deserializedExportOptions, panelVisible: true };
                    this.customizeExportOptions && this.customizeExportOptions(customizeExportOptionsArgs);
                    this.exportOptionsTabVisible(customizeExportOptionsArgs.panelVisible);
                    this.exportOptionsModel(deserializedExportOptions);
                    this._sortCustomParametersLookUpValues(previewInitialize.parametersInfo);
                    this.originalParametersInfo(previewInitialize.parametersInfo);
                    if (previewInitialize.documentId) {
                        var documentIdPromise = $.Deferred().resolve(previewInitialize.documentId).promise();
                        this.progressBar.startProgress(null, () => { this.stopBuild(); }, documentIdPromise)
                            .always(() => { this.documentBuilding(false); });
                        this.documentBuilding(true);
                        var doGetBuildStatusFunc = this.getDoGetBuildStatusFunc();
                        doGetBuildStatusFunc(previewInitialize.documentId);
                    }
                }
                else {
                    this.pageLoading(false);
                    this._processError(getLocalization('The report preview initialization has failed', 'ASPxReportsStringId.WebDocumentViewer_InitializationError'), previewInitialize && previewInitialize.error);
                }
            }).fail((error) => {
                this.reportOpening(false);
                this.removeEmptyPages();
            });
        }).resolve();
        return initializeDataPromise;
    }
    _deserializeExportOptions(exportOptionsString, isMerged) {
        var jsonModel = exportOptionsString && JSON.parse(exportOptionsString);
        return isMerged ? new ExportOptionsMergedPreview(jsonModel) : new ExportOptionsPreview(jsonModel);
    }
    deactivate() {
        this._initialize();
        this._cleanTabInfo();
        this.closeReport();
        this._currentDocumentId(null);
        this._currentReportId(null);
        this._currentReportUrl(null);
        this.originalParametersInfo(null);
    }
    startBuild() {
        this._initialize();
        return this._startBuildRequest();
    }
    customDocumentOperation(customData, hideMessageFromUser) {
        var documentId = this._currentDocumentId();
        if (this.documentBuilding() || !documentId)
            return;
        var serializedExportOptions = this.exportOptionsModel() ? JSON.stringify(new ModelSerializer().serialize(this.exportOptionsModel())) : null;
        var editingFields = () => this._editingFields && this._editingFields().map(item => item.editValue());
        var deferred = $.Deferred();
        setTimeout(() => this.requestWrapper.customDocumentOperation(documentId, serializedExportOptions, editingFields(), customData, hideMessageFromUser)
            .done((response) => {
            try {
                if (response && response.message) {
                    if (response.succeeded) {
                        MessageHandler().processMessage(response.message, !hideMessageFromUser, this._getToastMessageContainer());
                    }
                    else {
                        MessageHandler().processError(response.message, !hideMessageFromUser, undefined, this._getToastMessageContainer());
                    }
                }
            }
            finally {
                deferred.resolve(response);
            }
        })
            .fail(error => {
            var response = { message: getLocalization('The requested document operation cannot be performed.', 'ASPxReportsStringId.WebDocumentViewer_CustomDocumentOperationsDenied_Error') };
            deferred.reject(response);
        }));
        return deferred.promise();
    }
    _initializeStartBuild(documentIdPromise) {
        if (this.documentBuilding() || this._startBuildOperationId) {
            return false;
        }
        this._startBuildOperationId = generateGuid();
        this._currentDocumentId(null);
        this.progressBar.text(getLocalization('Creating the document...', 'PreviewStringId.Msg_CreatingDocument'));
        this.progressBar.cancelText(getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        this.progressBar.startProgress(this._startBuildOperationId, () => { this.stopBuild(); }, documentIdPromise)
            .always(() => { this.documentBuilding(false); });
        this.documentBuilding(true);
        return true;
    }
    _startBuildRequest() {
        var docuemntIdDeferred = $.Deferred();
        if (!this._initializeStartBuild(docuemntIdDeferred)) {
            return null;
        }
        var deferred = $.Deferred();
        var currentReportId = this._currentReportId();
        var startBuildOperationId = this._startBuildOperationId;
        var shouldIgnoreError = () => this._closeReportRequests[currentReportId];
        this.requestWrapper.startBuildRequest(shouldIgnoreError)
            .done((response) => {
            this.previewHandlersHelper && this.previewHandlersHelper.doneStartBuildHandler(deferred, response, startBuildOperationId, docuemntIdDeferred);
        })
            .fail((error) => {
            this.previewHandlersHelper && this.previewHandlersHelper.errorStartBuildHandler(deferred, startBuildOperationId, error);
            docuemntIdDeferred.reject();
        });
        deferred.always(() => this._startBuildOperationId = '');
        return deferred.promise();
    }
    getBuildStatus(documentId) {
        var deferred = $.Deferred();
        this._deferreds.push(deferred);
        var sessionDeferred = $.Deferred();
        this._getBuildStatusDeferreds.push(sessionDeferred);
        this._timeouts.push(setTimeout(() => {
            var ignorePredicate = () => this._closeDocumentRequests && this._closeDocumentRequests[documentId];
            this.requestWrapper.getBuildStatusRequest(documentId, ignorePredicate)
                .done((response) => {
                sessionDeferred.resolve(response);
            })
                .fail((error) => {
                sessionDeferred.reject(error);
            });
            sessionDeferred.done((response) => {
                this._onGetBuildStatus && this._onGetBuildStatus(response);
                this.previewHandlersHelper && this.previewHandlersHelper.doneGetBuildStatusHandler(deferred, documentId, response, ignorePredicate);
            }).fail((error) => {
                this.previewHandlersHelper && this.previewHandlersHelper.errorGetBuildStatusHandler(deferred, error, ignorePredicate);
            });
        }, 250));
        return deferred.promise();
    }
    getDoGetBuildStatusFunc() {
        var preview = this;
        var doGetBuildStatus = (documentId) => {
            var promise = preview.getBuildStatus(documentId);
            promise.done((result) => {
                if (documentId !== preview._currentDocumentId())
                    return;
                if (result && result.requestAgain && !preview._closeDocumentRequests[documentId]) {
                    var doStatusRequest = () => {
                        if (!preview._closeDocumentRequests[documentId]) {
                            doGetBuildStatus(documentId);
                        }
                    };
                    PollingDelay() ? this._timeouts.push(setTimeout(doStatusRequest, PollingDelay())) : doStatusRequest();
                }
                else {
                    try {
                        if (result.error || !result.requestAgain && !result.pageCount) {
                            preview.pageLoading(false);
                            preview.removeEmptyPages(!result.pageCount);
                            if (!preview.pages().length)
                                preview.pageIndex(-1);
                            return;
                        }
                        if (!result.completed) {
                            return;
                        }
                        else if (result.pageCount < preview.pages().length) {
                            preview.pageIndex(Math.min(result.pageCount - 1, preview.pageIndex()));
                            preview.pages.splice(result.pageCount, preview.pages().length);
                        }
                        preview.getDocumentData(documentId);
                    }
                    finally {
                        preview.progressBar.complete(documentId);
                        this._timeouts.push(setTimeout(preview._raiseOnSizeChanged, 1000));
                    }
                }
            });
        };
        return doGetBuildStatus;
    }
    getDocumentData(documentId) {
        var ignoreErrorPredicate = () => this._closeDocumentRequests[documentId];
        var documentDataDeferred = $.Deferred();
        this._deferreds.push(documentDataDeferred);
        documentDataDeferred.done((response) => {
            if (!response) {
                return;
            }
            this.previewHandlersHelper.processPages(response.pageCount, () => false);
            this._onGetDocumentDetails && this._onGetDocumentDetails(response);
            this.exportHandler.reportDisplayName(response.displayName);
            this._drillDownState = response.drillDownKeys || [];
            this._sortingState = response.sortingState || [];
            if (response.canPerformContinuousExport === false && this.reportId) {
                var deserializedExportOptions = this._deserializeExportOptions(response.exportOptions, true);
                var customizeExportOptionsArgs = { exportOptions: deserializedExportOptions, panelVisible: true };
                this.customizeExportOptions && this.customizeExportOptions(customizeExportOptionsArgs);
                this.exportOptionsTabVisible(customizeExportOptionsArgs.panelVisible);
                this.exportOptionsModel(deserializedExportOptions);
            }
            this.documentMap(response.documentMap);
            this._editingValuesSubscriptions.forEach(item => item.dispose());
            this._editingValuesSubscriptions = [];
            this._editingFields((response.editingFields || []).map((item, index) => {
                var field = this.createEditingField(item, index);
                if (this.editingFieldChanged) {
                    field.editingFieldChanged = this.editingFieldChanged;
                }
                this._editingValuesSubscriptions.push(field.editValue);
                return field;
            }));
        });
        this.requestWrapper.getDocumentData(documentId, ignoreErrorPredicate)
            .done(response => {
            documentDataDeferred.resolve(response);
        })
            .fail(error => {
            documentDataDeferred.reject(error);
        });
    }
    exportDocumentTo(format, inlineResult) {
        if (!this._currentDocumentId())
            return;
        var serializedExportOptions = this.exportOptionsModel() ? JSON.stringify(new ModelSerializer().serialize(this.exportOptionsModel())) : null;
        var args = () => encodeURIComponent(JSON.stringify({
            documentId: this._currentDocumentId(),
            exportOptions: serializedExportOptions,
            format: format,
            inlineResult: inlineResult,
            editingFieldValues: this._editingFields && this._editingFields().map(item => {
                var editValue = item.editValue();
                if (typeof editValue === 'string')
                    return transformNewLineCharacters(editValue);
                return editValue;
            })
        }));
        this.exportHandler.export(args, HandlerUri(), inlineResult);
    }
    printDocument(pageIndex) {
        if (!this._currentDocumentId())
            return;
        var exportOptions = new ExportOptionsPreview({});
        exportOptions.pdf['showPrintDialogOnOpen'] = true;
        pageIndex = parseInt(pageIndex);
        if ((!!pageIndex && pageIndex > 0 || pageIndex === 0) && (this.pages().length > pageIndex)) {
            (exportOptions.pdf['pageRange'] = pageIndex + 1);
        }
        var serializedExportOptions = JSON.stringify(new ModelSerializer().serialize(exportOptions));
        var args = () => encodeURIComponent(JSON.stringify({
            documentId: this._currentDocumentId(),
            exportOptions: serializedExportOptions,
            format: 'printpdf',
            inlineResult: !isIOS,
            editingFieldValues: this._editingFields && this._editingFields().map(item => item.editValue())
        }));
        this.exportHandler.export(args, HandlerUri(), true, true);
    }
    stopBuild(documentId) {
        var id = documentId || this._currentDocumentId();
        if (!id) {
            this._startBuildOperationId && (this._stopBuildRequests[this._startBuildOperationId] = true);
            return;
        }
        this._stopBuildRequests[id] = true;
        this.requestWrapper.stopBuild(id);
    }
    closeDocument(documentId) {
        var _documentId = documentId || this._currentDocumentId();
        if (!_documentId) {
            this._startBuildOperationId && (this._closeDocumentRequests[this._startBuildOperationId] = true);
            return;
        }
        this._closeDocumentRequests[_documentId] = true;
        this.progressBar.complete(documentId);
        this.requestWrapper.sendCloseRequest(_documentId);
    }
    closeReport() {
        this._openReportOperationDeferred && this._openReportOperationDeferred.reject();
        var currentReportId = this._currentReportId();
        if (!currentReportId) {
            return;
        }
        this._closeReportRequests[currentReportId] = true;
        this.requestWrapper.sendCloseRequest(null, currentReportId);
    }
    goToPage(pageIndex, forcePageChanging, throttle) {
        if (!forcePageChanging && this.pageIndex.peek() === pageIndex || this.pages.peek().length === 0 || pageIndex < 0 || pageIndex >= this.pages.peek().length) {
            return;
        }
        if (this._goToPageTimer !== undefined) {
            clearTimeout(this._goToPageTimer);
        }
        var updateActivePage = (activePageIndex) => {
            this.pages.peek().forEach((page) => {
                var visible = page.pageIndex === activePageIndex;
                page.active(visible);
                page.isClientVisible(visible);
            });
            this._goToPageTimer = undefined;
        };
        if (throttle)
            this._timeouts.push(this._goToPageTimer = setTimeout(() => updateActivePage(this.pageIndex()), throttle));
        else
            updateActivePage(pageIndex);
        this.pageIndex(pageIndex);
    }
    createEditingField(item, index) {
        return new EditingField(item, index, this.requestWrapper);
    }
    currentPageAriaLabelImgAlt(index) {
        return formatUnicorn(getLocalization('Report Preview page {0} of {1}', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPreviewPage'), index + 1, this.pages().length);
    }
    _getErrorMessage(jqXHR) {
        var serverError = getErrorMessage(jqXHR);
        if (!serverError)
            return jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.result && jqXHR.responseJSON.result.faultMessage ?
                jqXHR.responseJSON.result.faultMessage :
                serverError;
        return serverError;
    }
    _processError(error, jqXHR, showForUser = true) {
        var prefix = error + ': ';
        var serverError = this._getErrorMessage(jqXHR);
        serverError && (error = prefix + serverError);
        MessageHandler().processError(error, showForUser, serverError && prefix, this._getToastMessageContainer());
    }
    _getToastMessageContainer() {
        var _a;
        return (_a = this.element) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('dx-designer-viewport')[0];
    }
    get reportId() {
        return this._currentReportId();
    }
    get reportUrl() {
        return this._currentReportUrl();
    }
    get documentId() {
        return this._currentDocumentId();
    }
}
