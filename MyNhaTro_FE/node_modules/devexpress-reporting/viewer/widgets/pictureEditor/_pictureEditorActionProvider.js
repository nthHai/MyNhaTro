/**
* DevExpress HTML/JS Reporting (viewer\widgets\pictureEditor\_pictureEditorActionProvider.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { calculateWithZoomFactor, findMatchesInString, searchPlaceholder, ShowMessage } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, getLocalization } from '@devexpress/analytics-core/analytics-utils';
import { addToBindingsCache } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { imageAlignment, ImageAlignment, ImageSizeMode, sizing } from '../../editing/editingField';
import { getEnumValues, getImageBase64 } from '../../internal/_utils';
import { PictureEditorToolbarItem, PictureEditorToolbarItemWithPopup } from './_pictureEditorToolbarItem';
import { PictureEditorActionId } from './_pictureEditorTypes';
export class PictureEditorActionProvider extends Disposable {
    constructor(_editorModel, _popupOptions) {
        super();
        this._editorModel = _editorModel;
        this._popupOptions = _popupOptions;
    }
    _getValues(enumType, prefix, propertyName, info) {
        var array = [];
        getEnumValues(enumType).forEach((item) => {
            var attrTitle = undefined;
            if (info && info.valuesArray.length > 0) {
                var displayValue = info.valuesArray.filter((value) => value.value === item)[0];
                attrTitle = getLocalization(displayValue.displayValue || displayValue.value, displayValue.localizationId);
            }
            array.push({
                value: item,
                iconTemplate: 'dxrd-svg-pictureeditor-' + prefix + '_' + item.toLowerCase(),
                attrTitle,
                isSelected: ko.computed(() => { return this._editorModel.painter[propertyName]() === enumType[item]; }),
                action: () => {
                    this._editorModel.painter[propertyName](enumType[item]);
                    this._editorModel.painter.refresh();
                }
            });
        });
        return array;
    }
    _getColorValues() {
        var array = [];
        PictureEditorActionProvider.colors.forEach((item) => {
            array.push({
                value: item,
                isSelected: ko.computed(() => { return this._editorModel.painter.lineColor() === item; }),
                action: (e) => {
                    this._editorModel.painter.lineColor(item);
                }
            });
        });
        return array;
    }
    _initPopupOptions(options) {
        options.boundary = this._popupOptions.boundary;
        options.getPositionTarget = () => this._popupOptions.getPositionTarget();
        options.target = this._popupOptions.target;
        options.container = this._popupOptions.container;
        return options;
    }
    createOpenFileAction(action) {
        var openFileActionOptions = {
            id: PictureEditorActionId.OpenFile,
            icon: 'dxrd-svg-pictureeditor-toolbar_open',
            title: getLocalization('Load Image', 'PreviewStringId.ImageEditingFieldEditor_LoadImage'),
            active: ko.observable(false),
            action: (e) => action(e)
        };
        return new PictureEditorToolbarItem(openFileActionOptions);
    }
    createImagePickerAction(images, filterEnabled, action) {
        filterEnabled = filterEnabled && images.every((image) => image.text !== undefined);
        var active = ko.observable(false);
        var filter = ko.observable('');
        images.forEach((image) => {
            if (filterEnabled) {
                this._disposables.push(image.visible = ko.computed(() => !!findMatchesInString(image.text, filter())));
            }
            else {
                image.visible = true;
            }
        });
        var popupOptions = this._initPopupOptions({
            width: 'auto',
            height: calculateWithZoomFactor(300) + 'px',
            visible: active,
            contentTemplate: filterEnabled ? 'dx-picture-editing-imagepickerwithfilter' : 'dx-picture-editing-imagespicker',
            contentData: {
                filterEnabled: filterEnabled,
                filter: filter,
                searchPlaceholder: () => searchPlaceholder(),
                contentWidth: this._editorModel.painter.initialSize.width * 2 + 35,
                width: Math.min(this._editorModel.painter.initialSize.width, 150),
                height: Math.min(this._editorModel.painter.initialSize.height, 150),
                action: (data) => {
                    if (data.url) {
                        getImageBase64(data.url).done((result) => {
                            action(result);
                        }).fail((e) => {
                            ShowMessage(e.name + ' :' + e.message.split(':').pop(), 'error');
                        });
                    }
                    else {
                        action(data.data);
                    }
                },
                images: images
            }
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.PickImage,
            icon: 'dxrd-svg-pictureeditor-image_gallery',
            title: getLocalization('Choose Image', 'PreviewStringId.ImageEditingFieldEditor_ChooseImage'),
            active: active,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createSizingAction() {
        var alignmentActive = ko.observable(false);
        var popupOptions = this._initPopupOptions({
            width: calculateWithZoomFactor(174) + 'px',
            height: calculateWithZoomFactor(300) + 'px',
            visible: alignmentActive,
            contentTemplate: 'dx-picture-editing-sizemode-alignment',
            contentData: {
                sizeModeText: getLocalization('Size Mode', 'PreviewStringId.ImageEditingFieldEditor_SizeMode'),
                sizeMode: this._editorModel.painter.imageSizeMode,
                sizeModeValues: this._getValues(ImageSizeMode, 'size_mode', 'imageSizeMode', sizing),
                alignmentText: getLocalization('Alignment', 'PreviewStringId.ImageEditingFieldEditor_Alignment'),
                alignment: this._editorModel.painter.imageAlignment,
                alignmentValues: this._getValues(ImageAlignment, 'alignment', 'imageAlignment', imageAlignment),
            }
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Alignment,
            icon: 'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment',
            title: getLocalization('Size Mode and Alignment', 'PreviewStringId.ImageEditingFieldEditor_SizeModeAndAlignment'),
            active: alignmentActive,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createBrushAction() {
        var brushItemActive = ko.observable(false);
        var popupOptions = this._initPopupOptions({
            width: calculateWithZoomFactor(226) + 'px',
            height: calculateWithZoomFactor(295) + 'px',
            visible: brushItemActive,
            contentTemplate: 'dx-picture-editing-brush-options',
            contentData: {
                lineWidth: this._editorModel.painter.lineWidth,
                lineColor: this._editorModel.painter.lineColor,
                colors: this._getColorValues(),
                brushWidthText: getLocalization('Brush size', 'PreviewStringId.ImageEditingFieldEditor_BrushSize'),
                brushColorText: getLocalization('Brush color', 'PreviewStringId.ImageEditingFieldEditor_BrushColor'),
            }
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Brush,
            icon: 'dxrd-svg-pictureeditor-toolbar_brush_options',
            title: getLocalization('Brush Options', 'PreviewStringId.ImageEditingFieldEditor_BrushOptions'),
            active: brushItemActive,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions,
            renderedHandler: (elem, mod) => {
                if (elem[0].nodeName.toLowerCase() === 'svg') {
                    var brushIcon = $.fn.constructor(elem[0]).find('.BrushColor');
                    if (brushIcon) {
                        brushIcon.attr('data-bind', '{ style: { fill: $data.templateOptions.contentData.lineColor }}');
                        ko.applyBindingsToDescendants(mod, brushIcon[0]);
                    }
                }
            }
        });
    }
    createResetItem(action) {
        var clearItemOptions = {
            id: PictureEditorActionId.Reset,
            icon: 'dxrd-svg-pictureeditor-toolbar_reset',
            title: getLocalization('Reset', 'PreviewStringId.ImageEditingFieldEditor_Reset'),
            active: ko.observable(false),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
    createClearItem(action) {
        var clearItemOptions = {
            id: PictureEditorActionId.Clear,
            icon: 'dxrd-svg-pictureeditor-toolbar_clear',
            title: getLocalization('Clear', 'PreviewStringId.ImageEditingFieldEditor_Clear'),
            active: ko.observable(false),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
}
PictureEditorActionProvider.colors = ['#FFFFFF', '#FFC0C0', '#FFE0C0', '#FFFFC0', '#C0FFC0', '#C0FFFF', '#C0C0FF', '#FFC0FF', '#E0E0E0', '#FF8080', '#FFC080', '#FFFF80', '#80FF80', '#80FFFF', '#8080FF', '#FF80FF', '#C0C0C0', '#FF0000', '#FF8000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#C00000', '#C04000', '#C0C000', '#00C000', '#00C0C0', '#0000C0', '#C000C0', '#404040', '#800000', '#804000', '#808000', '#008000', '#008080', '#000080', '#800080', '#000000', '#400000', '#804040', '#404000', '#004000', '#004040', '#000040', '#400040'];
addToBindingsCache('style: { fill: $data.templateOptions.contentData.lineColor }', function ($context, $element) {
    return {
        'style': function () {
            return {
                'fill': $context.$data.templateOptions.contentData.lineColor
            };
        }
    };
});
