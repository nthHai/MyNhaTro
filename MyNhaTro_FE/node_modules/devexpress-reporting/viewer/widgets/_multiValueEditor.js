/**
* DevExpress HTML/JS Reporting (viewer\widgets\_multiValueEditor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getLocalization, Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
export class MultiValueEditorOptions extends Disposable {
    constructor(value, items) {
        super();
        this.selectedItems = ko.observable([]);
        var values = value();
        this.value = value;
        var valueHasMutated = () => {
            this.editorValue.notifySubscribers(this.displayItems[0]);
        };
        this._items = items.map((item) => {
            var selected = ko.observable(this._isValueSelected(item.value, values));
            return { selected: selected, value: item.value, displayValue: item.displayValue || item.value, toggleSelected: () => { selected(!selected()); valueHasMutated(); } };
        });
        this._disposables.push(this.selectedItems = ko.pureComputed(() => {
            return this._items.filter((item) => { return item.selected(); });
        }));
        var selectionInProcess = ko.observable(false), isSelectedAllState, stringValue;
        this._disposables.push(this.selectedValuesString = ko.pureComputed({
            read: () => {
                if (selectionInProcess())
                    return stringValue;
                stringValue = '';
                this.selectedItems().forEach((item, index, array) => {
                    stringValue += item.displayValue;
                    if (index < array.length - 1) {
                        stringValue += ', ';
                    }
                });
                return stringValue;
            },
            write: (newValue) => { }
        }));
        this._disposables.push(this.isSelectedAll = ko.pureComputed({
            read: () => {
                if (selectionInProcess())
                    return isSelectedAllState;
                var selectedItemCount = this.selectedItems().length;
                if (selectedItemCount > 0 && selectedItemCount < this._items.length) {
                    return undefined;
                }
                isSelectedAllState = selectedItemCount === this._items.length;
                return isSelectedAllState;
            },
            write: (newValue) => {
                isSelectedAllState = newValue;
                try {
                    selectionInProcess(true);
                    this._items.forEach((item) => { item.selected(newValue); });
                }
                finally {
                    selectionInProcess(false);
                }
            }
        }));
        var selectAllItem = { selected: this.isSelectedAll, value: null, displayValue: getLocalization('(Select All)', 'AnalyticsCoreStringId.SelectAll'), toggleSelected: () => { this.isSelectedAll(!this.isSelectedAll()); valueHasMutated(); } };
        this.displayItems = [selectAllItem].concat(this._items);
        this.dataSource = this.displayItems;
        this.editorValue = ko.observable(selectAllItem);
        this.updateValue = () => {
            value(this._items.filter((item) => { return item.selected(); }).map((item) => { return item.value; }));
            valueHasMutated();
        };
        this.onOptionChanged = (e) => {
            if (e.name !== 'opened' || e.value)
                return;
            this.updateValue();
        };
    }
    _isValueSelected(value, array) {
        if (value instanceof Date) {
            return array.filter((item) => { return item - value === 0; }).length > 0;
        }
        return array.indexOf(value) !== -1;
    }
}
