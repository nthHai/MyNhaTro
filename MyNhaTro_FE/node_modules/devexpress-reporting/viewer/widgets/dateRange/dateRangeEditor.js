/**
* DevExpress HTML/JS Reporting (viewer\widgets\dateRange\dateRangeEditor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Locker } from '../../../common/utils/_locker';
import { DateRangeParemeterPopupModel } from '../../mobile/internal/_parametersPopup';
import { getLocalization, Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import * as $ from 'jquery';
import { formatDate, addDisposeCallback } from '@devexpress/analytics-core/analytics-internal';
import { DateRangeDialogElementsKeyboardHelper } from '../../accessibility/_dateRangeKeyboardHelper';
import { getTemplate } from '@devexpress/analytics-core/analytics-widgets';
class CSDateTime {
    constructor(_date = null) {
        this._date = _date;
    }
    static get today() {
        return new CSDateTime().now();
    }
    get date() {
        return this._date;
    }
    get day() {
        return this._date.getDay();
    }
    get month() {
        return this._date.getMonth();
    }
    get year() {
        return this._date.getFullYear();
    }
    addMonths(months) {
        return new CSDateTime(new Date(this._date.setMonth(CSDateTime.today.month + months)));
    }
    addDays(days) {
        var newDate = this.date.getDate() + days;
        return new CSDateTime(new Date(this._date.setDate(newDate)));
    }
    addHours(hours) {
        var newDate = this.date.getHours() + hours;
        return new CSDateTime(new Date(this._date.setHours(newDate)));
    }
    addYears(years) {
        return new CSDateTime(new Date(this._date.setFullYear(this._date.getFullYear() + years)));
    }
    now() {
        return new CSDateTime(new Date(new Date().setHours(0, 0, 0, 0)));
    }
}
function createRangeItem(displayName, localizationId, range) {
    var item = {
        displayName: getLocalization(displayName, localizationId),
        range: range
    };
    Object.defineProperty(item, 'displayName', {
        get: () => getLocalization(displayName, localizationId),
        configurable: true
    });
    return item;
}
export var predefinedDateRanges = [
    createRangeItem('Today', 'PreviewStringId.DateRangeParameterEditor_Today', () => [
        CSDateTime.today.date,
        CSDateTime.today.date
    ]),
    createRangeItem('Yesterday', 'PreviewStringId.DateRangeParameterEditor_Yesterday', () => [
        CSDateTime.today.addDays(-1).date,
        CSDateTime.today.addDays(-1).date
    ]),
    createRangeItem('Current Week', 'PreviewStringId.DateRangeParameterEditor_CurrentWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day).date,
        CSDateTime.today.addDays(-CSDateTime.today.day).addDays(6).date
    ]),
    createRangeItem('Last Week', 'PreviewStringId.DateRangeParameterEditor_LastWeek', () => [
        CSDateTime.today.addDays(-7).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Week', 'PreviewStringId.DateRangeParameterEditor_PreviousWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day - 7).date,
        CSDateTime.today.addDays(-CSDateTime.today.day - 1).date
    ]),
    createRangeItem('Current Month', 'PreviewStringId.DateRangeParameterEditor_CurrentMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month + 1, 0),
    ]),
    createRangeItem('Last Month', 'PreviewStringId.DateRangeParameterEditor_LastMonth', () => [
        CSDateTime.today.addMonths(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Month', 'PreviewStringId.DateRangeParameterEditor_PreviousMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month - 1, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month, 0),
    ]),
    createRangeItem('Current Quarter', 'PreviewStringId.DateRangeParameterEditor_CurrentQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 + 3).date,
    ]),
    createRangeItem('Previous Quarter', 'PreviewStringId.DateRangeParameterEditor_PreviousQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 - 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
    ]),
    createRangeItem('Current Year', 'PreviewStringId.DateRangeParameterEditor_CurrentYear', () => [
        new Date(CSDateTime.today.year, 0, 1),
        new Date(CSDateTime.today.year, 11, 31),
    ]),
    createRangeItem('Last Year', 'PreviewStringId.DateRangeParameterEditor_LastYear', () => [
        CSDateTime.today.addYears(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Year', 'PreviewStringId.DateRangeParameterEditor_PreviousYear', () => [
        new Date(CSDateTime.today.year - 1, 0, 1),
        new Date(CSDateTime.today.year - 1, 11, 31),
    ])
];
export class DateRangeEditor extends Disposable {
    constructor(_options) {
        super();
        this._options = _options;
        this._locker = new Locker();
        this._popupVisible = ko.observable(false);
        this._showPopup = () => {
            this._popupVisible(true);
        };
        this._hidePopup = () => {
            this._popupVisible(false);
            this._$element.get(0).querySelector('input').focus();
        };
        this._accessibilityDialogItems = ko.observableArray([]);
        this.popupTemplate = 'dxrv-daterange-editor-popup';
        this.items = [];
        this.startDate = ko.observable(new Date(new Date().setHours(0, 0, 0, 0)));
        this.endDate = ko.observable(new Date(new Date().setHours(0, 0, 0, 0)));
        this.calendarHeight = '100%';
        this._disposables.push(_options.value.subscribe((newVal) => this.applyDate(newVal)), this._displayText = ko.computed(() => this._getStringValue([this.startDate(), this.endDate()])), this.startDate.subscribe(() => this.applyValue(this.startDate() > this.endDate())), this.endDate.subscribe(() => this.applyValue()));
        this.applyDate(this._options.value());
        this.items = predefinedDateRanges;
        if (_options.isMobile) {
            this.popupTemplate = 'dxrd-menu-parameters-content';
            this.popupModel = new DateRangeParemeterPopupModel(this);
        }
        else {
            this.popupModel = this;
        }
        this.dialogKeyboardHelper = new DateRangeDialogElementsKeyboardHelper(this._hidePopup, this._popupVisible);
        this._disposables.push(this.dialogKeyboardHelper);
    }
    _getStringValue(range) {
        return range.map(x => formatDate(x)).join(' - ');
    }
    _isSelected(item) {
        return this._displayText() === this._getStringValue(item.range());
    }
    _toParameterValue() {
        return [this.startDate(), this.endDate()];
    }
    _createTemplateData(value, min) {
        return {
            value,
            min,
            height: this.calendarHeight,
            inRange: (date) => this.inRange(date)
        };
    }
    applyDate(range, force = false) {
        this._locker.lock(() => {
            if (range[1] < this.startDate()) {
                this.startDate(range[0]);
                this.endDate(range[1]);
            }
            else {
                this.endDate(range[1]);
                this.startDate(range[0]);
            }
        });
        if (force)
            this.applyValue();
    }
    inRange(date) {
        var _end = new Date(this.endDate().getTime());
        var _start = new Date(this.startDate().getTime());
        return date <= new Date(_end.setHours(0, 0, 0, 0)) &&
            date >= new Date(_start.setHours(0, 0, 0, 0));
    }
    applyValue(updateEndDate = false) {
        this._locker.lock(() => {
            updateEndDate && this.endDate(this.startDate());
            this._options.value(this._toParameterValue());
        });
    }
}
ko.bindingHandlers['dxrvDateRangeEditor'] = {
    init: (element, valueAccessor, bindings, model, bindingContext) => {
        var rangeEditor = new DateRangeEditor(valueAccessor());
        $.fn.constructor(element).children().remove();
        var templateHtml = getTemplate('dxrv-daterange-editor'), $element = $.fn.constructor(element).append(templateHtml);
        var context = bindingContext.createChildContext(rangeEditor);
        ko.applyBindingsToDescendants(context, $element.children()[0]);
        addDisposeCallback(element, () => rangeEditor.dispose());
        return { controlsDescendantBindings: true };
    }
};
