/**
* DevExpress HTML/JS Reporting (viewer\binding\jsReportViewerBinding.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { DxAnalyticsComponentCommon, JSDesignerBindingCommon, _wrapModelInObservable } from '@devexpress/analytics-core/analytics-internal';
import { addCultureInfo } from '@devexpress/analytics-core/analytics-utils';
import { registerBaseBinding } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { EventGenerator } from '../../common/binding/eventGenerator';
import { createPreviewModel, initPreviewModel } from '../internal/_initializer';
import { JSReportViewer } from './jsReportViewer';
export class JSReportViewerBinding extends JSDesignerBindingCommon {
    constructor(_options, customEventRaiser) {
        super(_options, customEventRaiser);
        this._deferreds = [];
        _options.viewerModel = _wrapModelInObservable(_options.viewerModel);
        this.sender = new JSReportViewer(_options.viewerModel);
        this._closeReportOnDisposing = !_options.keepReportOnComponentDisposal;
        _options.callbacks && _options.callbacks._eventSenderCreated && _options.callbacks._eventSenderCreated(this.sender);
        this._callbacks = this._initializeCallbacks();
        this._callbacks && this._callbacks.onInitializing && this._callbacks.onInitializing();
    }
    dispose() {
        if (this._closeReportOnDisposing && this.sender && this.sender.Close)
            this.sender.Close();
        (this._deferreds || []).forEach((deferred) => {
            deferred.reject();
        });
        super.dispose();
    }
    _initializeCallbacks() {
        if (this._options.callbacks) {
            var previewEvents = EventGenerator.generatePreviewEvents((eventName, args) => {
                this._fireEvent(eventName, args);
            });
            this._checkCallbackName(previewEvents);
            var availablePreviewEvents = this._generateCallbackDictionary(previewEvents);
            return availablePreviewEvents;
        }
    }
    _applyBindings(model, _$element) {
        this._disposables.push(model);
        _$element.children().remove();
        var child = _$element.append(this._templateHtml).children()[0];
        if (!child)
            return;
        ko.cleanNode(child);
        this._callbacks && this._callbacks.beforeRender && this._callbacks.beforeRender(model);
        ko.applyBindings(model, child);
        this._fireEvent('Init');
    }
    _createModel(element) {
        return createPreviewModel(this._options, element, this._callbacks, false);
    }
    applyBindings(element) {
        var _$element = $.fn.constructor(element);
        _$element.addClass('dx-designer');
        if (this._options.reportPreview && this._options.parts) {
            this._applyBindings(this._options, _$element);
            return;
        }
        var requestOptions = this._options.requestOptions;
        var applyModel = () => {
            if (requestOptions && requestOptions.invokeAction) {
                this._options.handlerUri = this._getServerActionUrl(requestOptions.host, requestOptions.invokeAction);
            }
            this._deferreds.push(this._createModel(element)
                .done((previewModel) => {
                this.sender.previewModel = previewModel;
                if (this._options.reportUrl) {
                    if (ko.isSubscribable(this._options.reportUrl)) {
                        this._disposables.push(this._options.reportUrl.subscribe((newVal) => {
                            this.sender.OpenReport(newVal);
                        }));
                    }
                }
                this._createDisposeFunction(element);
                this._applyBindings(this.sender.previewModel, _$element);
                initPreviewModel(previewModel, this._options);
            }));
        };
        if (requestOptions) {
            this._getLocalizationRequest().done((localization) => {
                localization && addCultureInfo(localization);
            }).always(() => {
                applyModel();
            });
        }
        else {
            applyModel();
        }
    }
}
const dxReportViewerBindingName = 'dxReportViewer';
export class DxReportViewer extends DxAnalyticsComponentCommon {
    getBindingName() {
        return dxReportViewerBindingName;
    }
}
registerBaseBinding(dxReportViewerBindingName, '$data');
ko.bindingHandlers[dxReportViewerBindingName] = {
    init: function (element, valueAccessor) {
        new JSReportViewerBinding(ko.unwrap(valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};
