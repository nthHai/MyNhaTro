/**
* DevExpress HTML/JS Reporting (viewer\documentMap\_documentMapModel.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { TreeListKeyboardHelper } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, TabInfo } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { DocumentMapItemsProvider } from './_documentMapItemsProvider';
import { DocumentMapTreeListController } from './_documentMapTreeListController';
export class DocumentMapModel extends Disposable {
    constructor(reportPreview) {
        super();
        this._selectedPath = ko.observable('0');
        this._setSelectedPathByNavigationNode = (nodes, brickNavigation, path = '0') => {
            nodes.forEach((item, index) => {
                if (item.indexes === brickNavigation.indexes && item.pageIndex === brickNavigation.pageIndex) {
                    this._selectedPath(path + '.' + index.toString());
                }
                else if (item.nodes) {
                    this._selectedPath(this._setSelectedPathByNavigationNode(item.nodes, brickNavigation, path + '.' + index.toString()));
                }
            });
            return this._selectedPath();
        };
        var treeListController = new DocumentMapTreeListController();
        this.isEmpty = ko.pureComputed(() => {
            return !(reportPreview.documentMap() && reportPreview.documentMap().nodes && (reportPreview.documentMap().nodes.length !== 0));
        });
        treeListController.clickHandler = (item) => {
            var bookmark = item.data.bookmark;
            if (bookmark) {
                var pageIndex = bookmark.pageIndex < 0 ? 0 : bookmark.pageIndex;
                reportPreview.pages.peek()[pageIndex].selectBrick(bookmark.indexes);
            }
        };
        reportPreview.brickClickDocumentMapHandler = (brickNavigation) => {
            if (reportPreview.documentMap && reportPreview.documentMap())
                this._setSelectedPathByNavigationNode(reportPreview.documentMap().nodes, brickNavigation);
        };
        this._disposables.push({ dispose: () => delete reportPreview.brickClickDocumentMapHandler });
        var documentMapTabVisible = ko.pureComputed(() => !this.isEmpty());
        this.tabInfo = new TabInfo({
            text: 'Document Map',
            template: 'dxrd-preview-document-map',
            model: this,
            keyboardHelper: new TreeListKeyboardHelper(),
            localizationId: 'DevExpress.XtraPrinting.PrintingSystemCommand.DocumentMap',
            imageClassName: 'reportexplorer',
            imageTemplateName: 'dxrd-svg-tabs-reportexplorer',
            visible: documentMapTabVisible
        });
        this.documentMapOptions = ko.pureComputed(() => {
            return {
                itemsProvider: new DocumentMapItemsProvider(reportPreview.documentMap()),
                expandRootItems: true,
                selectedPath: this._selectedPath,
                treeListController: treeListController,
                onItemsVisibilityChanged: () => { var _a, _b; return (_b = (_a = this.tabInfo) === null || _a === void 0 ? void 0 : _a.keyboardHelper) === null || _b === void 0 ? void 0 : _b.initialize(); }
            };
        });
        this._disposables.push(this.tabInfo, documentMapTabVisible, this.documentMapOptions, this.isEmpty);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
}
