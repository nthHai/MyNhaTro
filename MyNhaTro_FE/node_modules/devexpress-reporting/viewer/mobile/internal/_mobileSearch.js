/**
* DevExpress HTML/JS Reporting (viewer\mobile\internal\_mobileSearch.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { SearchViewModel } from '../../search/_searchViewModel';
import { SearchAvailable } from '../../settings';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import { addDisposeCallback } from '@devexpress/analytics-core/analytics-internal';
import dxTextBox from 'devextreme/ui/text_box';
import * as ko from 'knockout';
import * as $ from 'jquery';
export class MobileSearchViewModel extends SearchViewModel {
    constructor(reportPreview, gallery) {
        super(reportPreview);
        this.height = ko.observable(0);
        this['_resultNavigator']['_disposables'].forEach((x) => { x.dispose(); });
        var _galleryCurrentItemBlocksSubscription;
        var currentBlocksSubscribe = (selectedIndex) => {
            this._killSubscription(_galleryCurrentItemBlocksSubscription);
            _galleryCurrentItemBlocksSubscription = gallery.items()[selectedIndex].blocks.subscribe((newBlocks) => this.updatePagesInBlocks(newBlocks));
            this.updatePagesInBlocks(gallery.items()[selectedIndex].blocks());
        };
        var _gallerySelectedIndexSubscription;
        var currentIndexSubscribe = () => {
            this._killSubscription(_gallerySelectedIndexSubscription);
            _gallerySelectedIndexSubscription = gallery.selectedIndex.subscribe((newSelectedIndex) => currentBlocksSubscribe(newSelectedIndex));
            currentBlocksSubscribe(gallery.selectedIndex());
        };
        this._disposables.push(gallery.items.subscribe((newItems) => currentIndexSubscribe()));
        currentIndexSubscribe();
        this._disposables.push(this.searchResult.subscribe((newResult) => {
            if (!newResult || newResult.length === 0) {
                reportPreview.availablePages(null);
                reportPreview.pages().forEach(page => page.resetBrickRecusive(page.brick()));
            }
            else {
                reportPreview.availablePages(newResult.map(x => x.pageIndex));
            }
            var blocks = gallery.items()[gallery.selectedIndex()].blocks();
            blocks.forEach(block => {
                block.page && block.page.resetBrickRecusive(block.page.brick());
                this._updateBricks(block.page, this.searchResult());
            });
        }));
        this.searchPanelVisible = reportPreview.searchPanelVisible;
        this.editorVisible = ko.observable(false);
        this._disposables.push(this.searchPanelVisible.subscribe((newVal) => {
            if (!newVal || !SearchAvailable()) {
                this.stopSearching();
            }
            else {
                this.height(MobileSearchViewModel.maxHeight);
            }
        }));
        this.enabled = SearchAvailable;
    }
    focusEditor(event) {
        if (this.searchPanelVisible()) {
            this.editorVisible(true);
            var previewSearch = $.fn.constructor('.dxrdp-search-editor');
            var searchEditor = dxTextBox['getInstance'](previewSearch.get(0));
            searchEditor.focus();
            setTimeout(() => {
                event.currentTarget.blur();
                searchEditor.focus();
            }, 1);
        }
    }
    _killSubscription(subscription) {
        var index = this._disposables.indexOf(subscription);
        if (index == -1)
            return;
        subscription && subscription.dispose();
        this._disposables.splice(index, 1);
    }
    _updateBricks(page, searchResult) {
        if (page.brick() && searchResult && searchResult.length > 0) {
            var results = searchResult.filter((x) => { return x.pageIndex === page.pageIndex; });
            for (var i = 0; i < results.length; i++) {
                page.selectBrick(results[i].indexes, true);
            }
        }
        else {
            var subscription = page.brick.subscribe((newVal) => {
                subscription.dispose();
                this._updateBricks(page, this.searchResult());
            });
        }
    }
    updatePagesInBlocks(blocks) {
        blocks.forEach(block => {
            if (block.page && this.searchResult() && this.searchResult().length > 0) {
                this._updateBricks(block.page, this.searchResult());
            }
        });
    }
    stopSearching() {
        this.height(0);
        this.editorVisible(false);
        this.searchResult(null);
    }
    startSearch() {
        if (this.searchResult() === null)
            this.findNext();
    }
}
MobileSearchViewModel.maxHeight = 80;
export class SearchBarModel extends Disposable {
    constructor(viewModel, element, $searchText) {
        super();
        this.viewModel = viewModel;
        this._disposables.push(viewModel.height.subscribe((newValue) => {
            if (!newValue) {
                element.style.display = 'none';
            }
            else {
                element.style.display = 'block';
            }
            $searchText.css({
                'opacity': Math.min((newValue / MobileSearchViewModel.maxHeight), 1)
            });
        }));
    }
    dispose() {
        super.dispose();
        this.viewModel.stopSearching();
    }
}
ko.bindingHandlers['dxrdSearchBar'] = {
    init: function (element, valueAccessor) {
        var viewModel = ko.unwrap(valueAccessor());
        var $element = $.fn.constructor(element);
        element.style.display = 'none';
        var $searchText = $element.find('.dxrdp-taptosearch-text');
        var searchBarModel = new SearchBarModel(viewModel, element, $searchText);
        addDisposeCallback(element, function () {
            searchBarModel.dispose();
        });
    }
};
