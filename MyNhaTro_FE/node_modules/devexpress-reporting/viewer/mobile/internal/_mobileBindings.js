/**
* DevExpress HTML/JS Reporting (viewer\mobile\internal\_mobileBindings.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { EventProcessor } from './_eventProcessor';
import { on } from 'devextreme/events';
import 'devextreme/events/transform';
import 'devextreme/events/pointer';
import * as ko from 'knockout';
import dxScrollView from 'devextreme/ui/scroll_view';
ko.bindingHandlers['mobileZoom'] = {
    init: function (element, valueAccessor) {
        var options = valueAccessor();
        var scroll;
        var zoom = options.zoom();
        on(element, 'dxpinch', (e) => {
            e.stopPropagation();
            e.preventDefault();
            var scale = e['scale'];
            var newZoom = zoom;
            newZoom *= scale;
            newZoom = Math.max(0.15, Math.min(2, newZoom));
            options.zoom(newZoom);
        });
        on(element, 'dxpinchstart', (e) => {
            scroll = dxScrollView.getInstance(element.getElementsByClassName('dxrd-scrollView-mobile')[0]);
            e.stopPropagation();
            e.preventDefault();
            options.zoomUpdating(true);
            scroll && scroll.option('disabled', true);
            zoom = options.zoom.peek();
        });
        on(element, 'dxpinchend', (e) => {
            e.stopPropagation();
            options.zoomUpdating(false);
            setTimeout(() => {
                scroll && scroll.option('disabled', false);
                scroll && scroll.refresh();
            }, 10);
        });
    }
};
ko.bindingHandlers['slide'] = {
    init: function (element, valueAccessor) {
        var slideOptionsValue = valueAccessor();
        var isStarted = false;
        var processor = new EventProcessor(element, slideOptionsValue);
        on(element, 'dxpointerdown', (e) => {
            processor.start(e);
            isStarted = true;
        });
        on(element, 'dxpointermove', (e) => {
            isStarted && processor.move(e);
        });
        ['dxpointercancel', 'dxpointerleave', 'dxpointerup'].forEach((value) => {
            on(element, value, (e) => {
                if (isStarted) {
                    processor.end(e);
                    isStarted = false;
                }
            });
        });
    }
};
