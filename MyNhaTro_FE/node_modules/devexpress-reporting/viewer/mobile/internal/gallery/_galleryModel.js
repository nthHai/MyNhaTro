/**
* DevExpress HTML/JS Reporting (viewer\mobile\internal\gallery\_galleryModel.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getCurrentResolution } from '../../../internal/_utils';
import { previewDefaultResolution } from '../../../settings';
import { ZoomAutoBy } from '../../../constants';
import * as ko from 'knockout';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
export class GalleryModel extends Disposable {
    constructor(preview, previewWrapperSize) {
        super();
        this.preview = preview;
        this.previewWrapperSize = previewWrapperSize;
        this._spacing = 1;
        this._animationTimeout = null;
        this.repaint = ko.observable({});
        this.repaintTimeout = ko.observable();
        this.horizontal = ko.observable(1);
        this.vertical = ko.observable(1);
        this.pageCount = 0;
        this.isAnimated = ko.observable(false);
        this.items = ko.observableArray([{ blocks: ko.observableArray([]) }, { blocks: ko.observableArray([]) }, { blocks: ko.observableArray([]) }]);
        this.currentBlockText = ko.observable('');
        this.selectedIndexReal = ko.observable(0);
        this.selectedIndex = ko.observable(0);
        var oldIndex = this.selectedIndex();
        this._disposables.push(this.contentSize = ko.pureComputed(() => {
            var blocks = this.items()[this.selectedIndex()].blocks();
            var width, height;
            if (blocks.length === 1) {
                var block = blocks[0];
                var position = block.position();
                width = Math.max(position.width, block.page.width());
                height = Math.max(position.height, block.page.height());
            }
            return { width: width ? width + 'px' : 'auto', height: height ? height + 'px' : 'auto' };
        }));
        this.animationEnabled = preview.animationSettings.swipeEnabled;
        var _calcHorizontalVertical = () => {
            var _zoom = preview._zoom();
            var pageHeight = Math.ceil(preview._pageHeight() * getCurrentResolution(_zoom) / previewDefaultResolution());
            var pageWidth = Math.ceil(preview._pageWidth() * getCurrentResolution(_zoom) / previewDefaultResolution());
            var _containerSize = previewWrapperSize();
            var horizontal = (preview.autoFitBy() != ZoomAutoBy.PageWidth && (Math.floor(_containerSize.width / (pageWidth + 2 * this._spacing)))) || 1;
            var vertical = Math.floor(_containerSize.height / (pageHeight + 2 * this._spacing)) || 1;
            this.horizontal(horizontal);
            this.vertical(vertical);
        };
        var updateGalleryContent = () => {
            _calcHorizontalVertical();
            this.pageCount = this.horizontal() * this.vertical();
            this.updateContent(preview, this.pageCount);
        };
        this._disposables.push(previewWrapperSize.subscribe(() => {
            this.items().forEach(item => item.blocks().forEach(block => block.repaint = true));
            updateGalleryContent();
            var currentGalleryItem = this.items()[this.selectedIndex()];
            this.updateBlocks(currentGalleryItem, this.pageCount, preview, this.selectedIndexReal(), preview.animationSettings.zoomEnabled());
            this.repaint.valueHasMutated();
        }));
        this._disposables.push(preview.visiblePages.subscribe(() => {
            for (var i = 0; i < this.items().length; i++) {
                this.items()[i].blocks([]);
                this.items()[i].realIndex = -1;
            }
            updateGalleryContent();
        }));
        this._disposables.push(preview.pageIndex.subscribe(updateGalleryContent));
        this._disposables.push(preview.zoomUpdating.subscribe((newVal) => {
            if (newVal)
                return;
            clearTimeout(this.repaintTimeout());
            this.repaintTimeout(setTimeout(() => this.repaint.valueHasMutated(), 410));
        }));
        this._disposables.push(preview._zoom.subscribe(() => {
            _calcHorizontalVertical();
            var pageCount = this.horizontal() * this.vertical();
            if (this.pageCount !== pageCount) {
                this.pageCount = pageCount;
                this.items().forEach(item => item.blocks().forEach(block => block.repaint = true));
                this.updateContent(preview, pageCount);
            }
            else if (this.pageCount === 1) {
                var block = this.items()[this.selectedIndex()].blocks()[0];
                this.items().forEach((item, index) => {
                    if (index != this.selectedIndex())
                        item.blocks().forEach(block => block.repaint = true);
                });
                setTimeout(() => {
                    block.position({
                        left: block.position().left,
                        top: block.position().top,
                        height: Math.max(this.previewWrapperSize().height, block.page.height()),
                        width: Math.max(this.previewWrapperSize().width, block.page.width())
                    });
                });
            }
        }));
        this._disposables.push(this.selectedIndexReal.subscribe((newVal) => {
            if (newVal >= 0) {
                this.changePage(preview);
            }
            else if (newVal < 0) {
                this.selectedIndexReal(0);
            }
        }));
        this._disposables.push(this.selectedIndex.subscribe((newVal) => {
            var result = newVal - oldIndex;
            if (result === -2 || result === 1) {
                this.selectedIndexReal(this.selectedIndexReal() + 1);
            }
            else if (result === 2 || result === -1) {
                this.selectedIndexReal(this.selectedIndexReal() - 1);
            }
            oldIndex = newVal;
        }));
        this._disposables.push(this.swipeLeftEnable = ko.computed(() => {
            return this.selectedIndexReal() !== 0;
        }));
        this._disposables.push(this.swipeRightEnable = ko.computed(() => {
            return this.selectedIndexReal() != (Math.ceil(preview.visiblePages().length / (this.horizontal() * this.vertical())) - 1);
        }));
    }
    _createBlock(previewPage, className, visible) {
        previewPage.disableResolutionReduction = true;
        previewPage.maxZoom = 1;
        var classSet = {};
        if (this.animationEnabled() && this.pageCount > 1) {
            className && (classSet[className] = true);
            classSet['dxrdp-animation'] = true;
        }
        return {
            page: previewPage,
            visible: visible,
            classSet: classSet,
            position: ko.observable({ top: 0, left: 0, width: 0, height: 0 })
        };
    }
    dispose() {
        clearTimeout(this.repaintTimeout());
        super.dispose();
    }
    updatePagesVisible(preview) {
        if (this.items()[this.selectedIndex()]) {
            var someActive = false;
            var pages = this.items()[this.selectedIndex()].blocks();
            if (pages.length > 0) {
                for (var i = 0; i < pages.length; i++) {
                    if (pages[i].page) {
                        pages[i].page.isClientVisible(true);
                        if (pages[i].page.active()) {
                            someActive = true;
                        }
                    }
                }
                if (!someActive) {
                    pages[0].page && preview.goToPage(pages[0].page.pageIndex);
                }
            }
        }
    }
    updateCurrentBlock() {
        if (this.items()[this.selectedIndex()]) {
            var blocks = this.items()[this.selectedIndex()].blocks();
            if (blocks.length > 0) {
                if (blocks.length > 1) {
                    this.currentBlockText([blocks[0].page.pageIndex + 1, blocks[blocks.length - 1].page.pageIndex + 1].join(' - '));
                }
                else {
                    if (blocks[0].page) {
                        this.currentBlockText((this.preview.pageIndex() + 1).toString());
                    }
                }
            }
        }
    }
    updateContent(preview, pagesCount) {
        var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
        var pageIndex = 0;
        var isCurrentBlock = false;
        var realIndex = 0;
        for (var i = 0; i < itemsCount; i++) {
            for (var j = 0; j < pagesCount; j++) {
                if (preview.visiblePages()[pageIndex].active()) {
                    isCurrentBlock = true;
                    realIndex = i;
                    break;
                }
                pageIndex++;
                if (preview.visiblePages().length === pageIndex) {
                    break;
                }
            }
            if (isCurrentBlock)
                break;
        }
        if (this.selectedIndexReal() !== realIndex) {
            this.selectedIndexReal(realIndex);
        }
        else {
            this.changePage(preview);
        }
    }
    updateBlockPositions(blocks, visible) {
        var height = this.previewWrapperSize().height / this.vertical();
        var width = this.previewWrapperSize().width / this.horizontal();
        for (var i = 0; i < blocks.length; i++) {
            var vertical = Math.floor((i) / this.horizontal());
            var horizontal = i - (this.horizontal() * vertical);
            var left = horizontal * width;
            if (blocks[i].visible === visible || blocks[i].visible === true) {
                blocks[i].position({
                    top: vertical * height,
                    left: left,
                    width: width,
                    height: height
                });
                blocks[i].visible = true;
            }
            else {
                blocks[i].position({
                    top: vertical * height,
                    left: blocks[i].classSet['left'] ? ((this.previewWrapperSize().width + left) * -1) : this.previewWrapperSize().width + left,
                    width: width,
                    height: height
                });
            }
        }
    }
    updateStartBlocks(galleryItem, pages) {
        var currentBlockPages = galleryItem.blocks().map(x => x.page);
        var firstPage = pages.indexOf(currentBlockPages[0]);
        if (firstPage !== -1) {
            for (var i = 0; i < firstPage; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], 'left', false));
            }
        }
        else {
            firstPage = currentBlockPages.indexOf(pages[0]);
            if (firstPage !== -1) {
                galleryItem.blocks.splice(0, firstPage);
            }
        }
        return firstPage;
    }
    updateLastBlocks(galleryItem, pages) {
        var currentBlockPages = galleryItem.blocks().map(x => x.page);
        var lastPage = pages.indexOf(currentBlockPages[currentBlockPages.length - 1]);
        if (lastPage === pages.length - 1) {
            return 0;
        }
        if (lastPage !== -1) {
            for (var i = lastPage + 1; i < pages.length; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], 'right', false));
            }
        }
        else {
            lastPage = currentBlockPages.indexOf(pages[pages.length - 1]);
            galleryItem.blocks.splice(lastPage + 1, currentBlockPages.length - lastPage);
        }
        return lastPage;
    }
    updateBlocks(galleryItem, pagesCount, preview, index, useAnimation = false) {
        var blocks = galleryItem.blocks();
        if (galleryItem.realIndex !== index
            || (blocks.length !== pagesCount || blocks[0].page.pageIndex === -1)
            || blocks.some(x => x.repaint)) {
            galleryItem.realIndex = index;
            clearTimeout(this._animationTimeout);
            var startIndex = pagesCount * index;
            if (startIndex < 0 || startIndex >= preview.visiblePages().length) {
                galleryItem.blocks([]);
                return;
            }
            var pages = [];
            for (var i = startIndex; i < startIndex + pagesCount; i++) {
                if (i >= preview.visiblePages().length) {
                    break;
                }
                pages.push(preview.visiblePages()[i]);
            }
            var first = this.updateStartBlocks(galleryItem, pages);
            var last = this.updateLastBlocks(galleryItem, pages);
            if (first === -1 && last === -1) {
                galleryItem.blocks([]);
                for (var i = 0; i < pages.length; i++) {
                    galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], null, true));
                }
            }
            this.updateBlockPositions(galleryItem.blocks(), true);
            var self = this;
            if (useAnimation) {
                this._animationTimeout = setTimeout(() => {
                    self.updateBlockPositions(galleryItem.blocks(), false);
                }, 400);
            }
            else {
                self.updateBlockPositions(galleryItem.blocks(), false);
            }
        }
    }
    changePage(preview) {
        var pagesCount = this.horizontal() * this.vertical();
        var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
        if (this.selectedIndex() === this.items().length - 1) {
            this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() + 1);
            this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() - 1);
        }
        else if (this.selectedIndex() === 0) {
            this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() - 1);
            this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() + 1);
        }
        else {
            this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() - 1);
            this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() + 1);
        }
        var currentGalleryItem = this.items()[this.selectedIndex()];
        this.updateBlocks(currentGalleryItem, pagesCount, preview, this.selectedIndexReal(), preview.animationSettings.zoomEnabled());
        if (!this.isAnimated()) {
            this.updatePagesVisible(preview);
        }
        this.updateCurrentBlock();
    }
}
