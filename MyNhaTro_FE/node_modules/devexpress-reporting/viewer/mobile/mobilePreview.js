/**
* DevExpress HTML/JS Reporting (viewer\mobile\mobilePreview.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ReportPreview } from '../reportPreview';
import { ZoomAutoBy } from '../constants';
import { MobilePreviewPage } from './internal/_mobilePage';
import * as ko from 'knockout';
export class MobileReportPreview extends ReportPreview {
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, mobileSettings = { readerMode: true, animationEnabled: true }) {
        super(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl);
        this.availablePages = ko.observable(null);
        this.visiblePages = ko.computed(() => {
            if (!this.availablePages()) {
                return this.pages();
            }
            else {
                return this.pages().filter((x) => { return this.availablePages().indexOf(x.pageIndex) !== -1; });
            }
        });
        this.topOffset = ko.observable(0);
        this.previewWrapperSize = ko.observable({ width: 0, height: 0 });
        this.searchPanelVisible = ko.observable(false);
        this.actionsVisible = ko.observable(false);
        this.scrollReachedLeft = ko.observable(false);
        this.scrollReachedRight = ko.observable(false);
        this.scrollReachedTop = ko.observable(true);
        this.scrollReachedBottom = ko.observable(true);
        this.zoomUpdating = ko.observable(false);
        this.mobileZoom = ko.computed({
            read: () => {
                var currentZoom = this.zoom();
                return currentZoom > 0 ? currentZoom : this._zoom();
            },
            write: (newVal) => {
                this.zoom(newVal);
            }
        });
        this.readerMode = mobileSettings.readerMode;
        var globalAnimationEnabled = mobileSettings.animationEnabled;
        this.animationSettings = { zoomEnabled: ko.observable(globalAnimationEnabled), swipeEnabled: ko.observable(globalAnimationEnabled) };
        this.canSwitchToDesigner = false;
        this.autoFitBy(ZoomAutoBy.PageWidth);
        this.showMultipagePreview(true);
        this._disposables.push(this.interactionDisabled = ko.pureComputed(() => this.pages().length === 0), this.searchPanelVisible.subscribe((newVal) => {
            if (newVal) {
                this.actionsVisible(false);
            }
        }));
    }
    createPage(pageIndex, processClick, loading) {
        return new MobilePreviewPage(this, pageIndex, processClick, loading);
    }
    createBrickClickProcessor(cyclePageIndex) {
        var _clickHandler = super.createBrickClickProcessor(cyclePageIndex);
        var func = (brick) => {
            if (this.zoomUpdating())
                return;
            if (cyclePageIndex !== this.pageIndex()) {
                this.actionsVisible(false);
                var supscription = this.actionsVisible.subscribe((newVal) => {
                    supscription.dispose();
                    this.actionsVisible(false);
                });
            }
            _clickHandler(brick);
        };
        return func;
    }
    _hasActiveEditingFields() {
        return this.visiblePages().some(p => {
            var pageEditFields = ko.unwrap(p.editingFields);
            return pageEditFields && pageEditFields.some(x => ko.unwrap(x.active));
        });
    }
    showActions(s) {
        if (s.zoomUpdating() || s.interactionDisabled())
            return;
        var searchVisible = s.searchPanelVisible();
        if (!searchVisible) {
            if (!this._hasActiveEditingFields()) {
                s.actionsVisible(!s.actionsVisible());
            }
        }
        else {
            s.searchPanelVisible(!searchVisible);
        }
    }
    onSlide(e) {
        this.scrollReachedLeft(true);
        this.scrollReachedRight(true);
        if (this.autoFitBy() === ZoomAutoBy.None && e.removedItems && e.removedItems[0].blocks().length === 1 && e.addedItems && e.addedItems[0].blocks().length === 1)
            this.autoFitBy(ZoomAutoBy.PageWidth);
    }
    goToPage(pageIndex, forcePage) {
        super.goToPage(pageIndex, forcePage);
    }
    getScrollViewOptions() {
        var options = {
            onUpdated: (e) => { this.setScrollReached(e); },
            direction: 'both',
            pushBackValue: 0,
            bounceEnabled: false,
            disabled: this.zoomUpdating
        };
        return options;
    }
    setScrollReached(e) {
        this.scrollReachedLeft(e.reachedLeft);
        this.scrollReachedRight(e.reachedRight);
        this.scrollReachedTop(e.reachedTop);
        this.scrollReachedBottom(e.reachedBottom);
    }
    dispose() {
        this.mobileZoom.dispose();
        this.visiblePages.dispose();
        super.dispose();
    }
}
