/**
* DevExpress HTML/JS Reporting (viewer\internal\_progressViewModel.d.ts)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
import { ListKeyboardHelper } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, IDisposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
export interface IElementPosition {
    top: boolean;
    bottom?: boolean;
    left: boolean;
    right?: boolean;
}
export interface IProgressHandler extends IDisposable {
    stop?: () => void;
    cancelText?: ko.Observable<string> | ko.Computed<string>;
    cancelVisible?: ko.Observable<boolean> | ko.Computed<boolean>;
    wasCancelRequested(id: string): boolean;
    operationId?: ko.Observable<string> | ko.Computed<string>;
    progress: ko.Observable<number> | ko.Computed<number>;
    text: ko.Observable<string> | ko.Computed<string>;
    visible: ko.Observable<boolean> | ko.Computed<boolean>;
    inProgress: ko.Observable<boolean> | ko.Computed<boolean>;
    startProgress: (startOperationId: string, onStop: (operationId: string) => void, getOperationIdPromise: JQueryPromise<string>) => JQuery.Promise<string>;
    complete: (operationId: string) => void;
    cssClasses: ko.Observable<string | {
        [key: string]: boolean;
    }>;
    setPosition: (position: IElementPosition) => void;
}
export declare class ProgressViewModel extends Disposable implements IProgressHandler {
    progress: ko.Observable<number>;
    private _forceInvisible;
    private _startOperationId;
    private _lastOperationIdDeferred;
    private _lastOperationDeferred;
    private _cancelExportRequests;
    constructor(enableKeyboardSupport?: boolean);
    wasCancelRequested(id: string): boolean;
    stop: () => void;
    inProgress: ko.Observable<boolean>;
    cancelText: ko.Observable<any>;
    operationId: ko.Observable<any>;
    text: ko.Observable<string>;
    cssClasses: ko.Observable<{
        [key: string]: boolean;
    }>;
    progressBarAccessibility: ListKeyboardHelper;
    cancelVisible: ko.PureComputed<boolean>;
    isCancelling: ko.Observable<boolean>;
    visible: ko.PureComputed<boolean>;
    setPosition(position: IElementPosition): void;
    complete(completeOperationId: string): void;
    dispose(): void;
    rejectLastOperationIdDeferred(): void;
    rejectLastOperationDeferred(): void;
    startProgress(startOperationId: string, onStop?: (opretionId: string) => void, operationIdPromise?: JQueryPromise<string>): JQuery.Promise<string>;
}
