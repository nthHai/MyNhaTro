/**
* DevExpress HTML/JS Reporting (viewer\internal\_page.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Disposable, getLocalization } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { generateGuid } from '../../common/utils/_utils';
import { PreviewEditingFieldsKeyboardHelper } from '../accessibility/_previewEditingFieldsKeyboardHelper';
import { HandlerUri, previewDefaultResolution } from '../settings';
import { brickText, initializeBrick, updateBricksPosition } from './_brickUtils';
import { PreviewRequestWrapper } from './_previewRequestWrapper';
import { PreviewSelection } from './_previewSelection';
import { getCurrentResolution } from './_utils';
export class PreviewPage extends Disposable {
    constructor(preview, pageIndex, processClick, loading) {
        super();
        this.isClientVisible = ko.observable(false);
        this.originalHeight = ko.observable(0);
        this.originalWidth = ko.observable(0);
        this.loadingText = getLocalization('Loading...', 'AnalyticsCoreStringId.Loading');
        this.realZoom = ko.observable(1);
        this.actualResolution = 0;
        this.currentScaleFactor = ko.observable(1);
        this.imageHeight = ko.observable(0);
        this.imageWidth = ko.observable(0);
        this.imageSrc = ko.observable('').extend({ rateLimit: { timeout: 100, method: 'notifyWhenChangesStop' } });
        this.displayImageSrc = ko.observable('');
        this.brick = ko.observable(null);
        this.brickLoading = ko.observable(true);
        this.bricks = ko.computed(() => {
            return this.getBricksFlatList(this.brick());
        });
        this.activeBricks = ko.computed(() => {
            return this.bricks().filter((x) => x.active());
        });
        this.clickableBricks = ko.computed(() => {
            return this.bricks().filter((x) => !!x.navigation);
        });
        this.active = ko.observable(false);
        this.maxZoom = 0;
        this.disableResolutionReduction = false;
        this._lastZoom = 0;
        this._selectedBrickPath = null;
        this.pageIndex = pageIndex;
        this.documentId = preview._currentDocumentId || ko.observable(null);
        this._disposables.push(this.imageSrc.subscribe((newVal) => {
            var documentId = this.documentId.peek();
            this._lastGetPageDeferred && this._lastGetPageDeferred.resolve(null);
            var currentGetPageDeferred = $.Deferred();
            currentGetPageDeferred
                .done((response) => {
                if (!response)
                    return;
                this.imageHeight(response.height);
                this.imageWidth(response.width);
                this.currentScaleFactor(this._currentScaleFactor);
                this.displayImageSrc('data:image/png;base64,' + response.base64string);
                this._onPageLoaded(response, processClick, preview._editingFields);
            }).fail((_e) => {
                this._onPageLoadFailed();
            });
            var ignoreError = preview._closeDocumentRequests && (() => preview._closeDocumentRequests[documentId] || currentGetPageDeferred.state() != 'pending');
            PreviewRequestWrapper.getPage(newVal, ignoreError)
                .done((response) => {
                currentGetPageDeferred.resolve(response);
            }).fail((_e) => {
                currentGetPageDeferred.reject(_e);
            });
            this._lastGetPageDeferred = currentGetPageDeferred;
        }));
        var unifier = ko.isObservable(preview._unifier) ? preview._unifier : ko.observable(preview._unifier || generateGuid());
        this.pageLoading = loading || ko.observable(true);
        this.originalHeight(ko.unwrap(preview._pageHeight));
        this.originalWidth(ko.unwrap(preview._pageWidth));
        this.zoom = preview._zoom;
        this.imageWidth(this.originalWidth() * this._getPixelRatio());
        this.imageHeight(this.originalHeight() * this._getPixelRatio());
        this._disposables.push(this.isClientVisible.subscribe((newVal) => {
            if (newVal) {
                this._setPageImgSrc(this.documentId(), unifier(), this.zoom());
            }
        }));
        this.color = ko.isObservable(preview._pageBackColor) ? preview._pageBackColor.peek() : '';
        this.width = ko.pureComputed(() => {
            return this.imageWidth() * this.zoom() / this.currentScaleFactor() / this._getPixelRatio();
        }).extend({ deferred: true });
        this.height = ko.pureComputed(() => {
            return this.imageHeight() * this.zoom() / this.currentScaleFactor() / this._getPixelRatio();
        }).extend({ deferred: true });
        this.isEmpty = pageIndex === -1 && !this.brick() && !processClick;
        this.resetBrickRecusive = (brick) => {
            if (brick && brick.active) {
                brick.active(false);
                if (brick.bricks) {
                    brick.bricks.forEach((childBrick) => { this.resetBrickRecusive(childBrick); });
                }
            }
        };
        this.selectBrick = (path, ctrlKey) => {
            if (PreviewSelection.started)
                return;
            processClick && processClick(null);
            var currentBrick = this.brick();
            !ctrlKey && this.resetBrickRecusive(currentBrick);
            if (!path) {
                return;
            }
            if (!currentBrick) {
                this._selectedBrickPath = path;
                return;
            }
            var pathElements = path.split(',');
            pathElements.forEach((el) => {
                currentBrick = currentBrick.bricks[parseInt(el)];
            });
            currentBrick.active(true);
        };
        this._disposables.push(ko.computed(() => {
            if (!this.active()) {
                this.resetBrickRecusive(this.brick());
                this._selectedBrickPath = null;
            }
        }));
        this.editingFieldsKeyboardHelper = new PreviewEditingFieldsKeyboardHelper();
        this._disposables.push(this.editingFieldsKeyboardHelper);
    }
    _initializeEditingFields(editingFieldBricks, previewEditngFields, originalWidth, originalHeight) {
        if (this.editingFields) {
            var oldEditFields = ko.unwrap(this.editingFields());
            if (oldEditFields && oldEditFields.length > 0) {
                oldEditFields.forEach(field => field.dispose && field.dispose());
            }
            this.editingFields.dispose();
        }
        this.editingFields = ko.pureComputed(() => {
            if (!previewEditngFields || editingFieldBricks.length === 0) {
                return [];
            }
            var allEditingFields = previewEditngFields();
            var pageFieldViewModels = [];
            for (var i = 0; i < editingFieldBricks.length; i++) {
                var brick = editingFieldBricks[i];
                var editingField = allEditingFields[brick.efIndex - 1];
                if (!editingField)
                    return [];
                editingField.brick = brick;
                pageFieldViewModels.push(editingField.createViewModel(this.zoom, originalWidth, originalHeight, () => allEditingFields, brick.absoluteBounds));
                brick.text = (brick => (() => brickText(brick, () => allEditingFields)))(brick);
            }
            return pageFieldViewModels;
        });
    }
    _getPixelRatio() {
        return window['devicePixelRatio'] || 1;
    }
    _onPageLoaded(result, processClick, previewEditingFields) {
        if (this._isDisposed)
            return;
        this.pageLoading(false);
        try {
            if (!result || !result.brick) {
                return;
            }
            this.brickColumnWidthArray = result.columnWidthArray;
            this.originalWidth(result.brick.width);
            this.originalHeight(result.brick.height);
            var editignFieldBricks = [];
            this.initializeBrick(result.brick, processClick, this.zoom, editignFieldBricks);
            this._initializeEditingFields(editignFieldBricks, previewEditingFields, result.brick.width, result.brick.height);
            this._selectedBrickPath && this.selectBrick(this._selectedBrickPath);
        }
        finally {
            this.brickLoading(false);
        }
    }
    _onPageLoadFailed() {
        if (this._isDisposed)
            return;
        if (this.isClientVisible()) {
            this.pageLoading(false);
            this.pageIndex !== -1 && this.brickLoading(false);
        }
    }
    updateSize(zoom) {
        var newResolution = getCurrentResolution(zoom);
        this.realZoom(newResolution / previewDefaultResolution());
        return newResolution;
    }
    clearBricks() {
        this.brickLoading(true);
    }
    dispose() {
        super.dispose();
        this._isDisposed = true;
    }
    _setPageImgSrc(documentId, unifier, zoom) {
        if (!documentId || this.pageIndex === -1) {
            return;
        }
        if (this.maxZoom && this.maxZoom < zoom) {
            zoom = this.maxZoom;
        }
        if (this._lastZoom < zoom) {
            this._lastZoom = zoom;
        }
        else {
            if (this.actualResolution && this.disableResolutionReduction && this.imageSrc())
                return;
        }
        var newResolution = this.updateSize(zoom);
        if ((this.actualResolution === newResolution || newResolution < 9) && this.imageSrc()) {
            return;
        }
        this.actualResolution = newResolution;
        this._currentScaleFactor = zoom;
        var imageResolution = Math.floor(newResolution * this._getPixelRatio());
        this.imageSrc(HandlerUri() +
            '?actionKey=getPage&unifier=' + unifier +
            '&arg=' + encodeURIComponent(JSON.stringify({ pageIndex: this.pageIndex, documentId: documentId, resolution: imageResolution, includeBricks: this.brickLoading() })));
    }
    _clear() {
        this.pageIndex = -1;
        this.isClientVisible(false);
        this._setPageImgSrc(null, null, 1);
        this.actualResolution = 0;
    }
    initializeBrick(brick, processClick, zoom, editingFieldBricks) {
        initializeBrick(brick, processClick, this.zoom, editingFieldBricks);
        updateBricksPosition(brick, brick.height, brick.width);
        this.brick(brick);
    }
    clickToBrick(s, e) {
        var target = $.fn.constructor(e.currentTarget);
        var offset = target.offset();
        var xPerc = (e.clientX - offset.left + window.scrollX) / target.width() * 100;
        var yPerc = (e.clientY - offset.top + window.scrollY) / target.height() * 100;
        var bricks = s.bricks();
        for (var i = 0; i < bricks.length; i++) {
            if (parseFloat(bricks[i].topP) < yPerc && parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP) > yPerc
                && parseFloat(bricks[i].leftP) < xPerc && parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP) > xPerc) {
                bricks[i].onClick && bricks[i].onClick(e);
                break;
            }
        }
    }
    getBricksFlatList(brick) {
        if (brick) {
            var bricks = [];
            var innerBricksLength = brick.bricks && brick.bricks.length || 0;
            for (var i = 0; i < innerBricksLength; i++) {
                bricks = bricks.concat(this.getBricksFlatList(brick.bricks[i]));
            }
            bricks.push(brick);
            return bricks;
        }
        return [];
    }
}
