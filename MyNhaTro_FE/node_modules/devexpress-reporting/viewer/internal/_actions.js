/**
* DevExpress HTML/JS Reporting (viewer\internal\_actions.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ActionId, ZoomAutoBy } from '../constants';
import { EditablePreviewEnabled } from '../settings';
import { getLocalization, Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import * as $ from 'jquery';
import { ActionListsBase, parseZoom } from '@devexpress/analytics-core/analytics-internal';
export class PreviewDesignerActions extends Disposable {
    constructor(reportPreview, fullscreen) {
        super();
        this.actions = [];
        var designAction = {
            id: ActionId.Design,
            text: 'Design',
            displayText: () => getLocalization('Design', 'ASPxReportsStringId.ToolBarItemText_Design'),
            imageClassName: 'dxrd-image-design',
            imageTemplateName: 'dxrd-svg-preview-report_designer',
            templateName: reportPreview.canSwitchToDesigner ? 'dxrd-toolbar-two-way-switch' : undefined,
            disabled: ko.observable(false),
            visible: reportPreview.canSwitchToDesigner,
            hotKey: { ctrlKey: true, keyCode: 68 },
            clickAction: () => {
                reportPreview.previewVisible(false);
                reportPreview.deactivate();
            }
        };
        designAction.contentData = {
            items: [
                { itemData: designAction, active: false },
                { getDisplayText: () => getLocalization('Preview', 'ASPxReportsStringId.ToolBarItemText_Preview'), active: true }
            ]
        };
        this.actions.push(designAction);
        this.actions.push({
            id: ActionId.FullScreen,
            text: getLocalization('Full Screen', 'ASPxReportsStringId.ToolBarItemText_FullScreen'),
            imageClassName: 'dxrd-image-fullscreen',
            imageTemplateName: () => fullscreen() ? 'dxrd-svg-toolbar-fullscreen-exit' : 'dxrd-svg-toolbar-fullscreen',
            disabled: ko.observable(false),
            visible: !reportPreview.canSwitchToDesigner,
            selected: fullscreen,
            clickAction: () => {
                fullscreen(!fullscreen());
            }
        });
        this._disposables.push(fullscreen);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    getActions(context) {
        return this.actions;
    }
}
export class ActionLists extends ActionListsBase {
    constructor(reportPreview, globalActionProviders, customizeActions, enabled) {
        super(enabled);
        this._reportPreview = reportPreview;
        this.globalActionProviders = globalActionProviders;
        this.toolbarItems = ko.computed(() => {
            var globalActions = [];
            globalActionProviders().forEach((actionProvider) => {
                globalActions.push.apply(globalActions, actionProvider.getActions(reportPreview));
            });
            customizeActions && customizeActions(globalActions);
            return globalActions;
        });
        this._disposables.push(this.toolbarItems);
    }
    processShortcut(actions, e) {
        if (this.shouldIgnoreProcessing(e))
            return;
        super.processShortcut(actions, e);
    }
    dispose() {
        super.dispose();
        this.resetObservableArray(this.globalActionProviders);
        this.removeProperties();
    }
}
export class PreviewActions extends Disposable {
    constructor(reportPreview) {
        super();
        this.actions = [];
        var printDisabled = reportPreview.exportDisabled;
        this.actions.push({
            id: ActionId.FirstPage,
            text: getLocalization('First Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_FirstPage'),
            imageClassName: 'dxrd-image-preview-first',
            imageTemplateName: 'dxrd-svg-preview-first_page',
            disabled: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.pageIndex() < 1; })),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 37 },
            clickAction: () => {
                if (reportPreview.pageIndex() > 0) {
                    reportPreview.goToPage(0);
                }
            }
        });
        this.actions.push({
            id: ActionId.PrevPage,
            text: getLocalization('Previous Page', 'ASPxReportsStringId.ToolBarItemText_PreviousPage'),
            imageClassName: 'dxrd-image-preview-prev',
            imageTemplateName: 'dxrd-svg-preview-previous_page',
            disabled: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.pageIndex() < 1; })),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: false, keyCode: 37 },
            clickAction: () => {
                if (reportPreview.pageIndex() >= 1) {
                    reportPreview.goToPage(reportPreview.pageIndex() - 1, false, 500);
                }
            },
        });
        var paginationSelectBoxViewModel = {
            id: ActionId.Pagination,
            text: 'Pagination',
            imageClassName: 'dxrd-image-pager',
            disabled: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.pages().length === 0 || reportPreview.pageIndex() === -1; })),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            clickAction: $.noop,
            selectedItem: this.wrapDisposable(ko.pureComputed({
                read: () => {
                    if (reportPreview.pageIndex() < 0) {
                        return null;
                    }
                    var items = paginationSelectBoxViewModel.pageItems();
                    return items && items.store && (items.store.length > reportPreview.pageIndex()) && items.store[reportPreview.pageIndex()];
                },
                write: (newValue) => {
                    if (!!newValue && (newValue.index || newValue.index === 0)) {
                        reportPreview.goToPage(newValue.index);
                    }
                },
                deferEvaluation: true
            })),
            pageItems: this.wrapDisposable(ko.pureComputed(() => {
                var pageCount = reportPreview.pages().length;
                if (pageCount === 0 || reportPreview.pageIndex.peek() === -1) {
                    return [];
                }
                var pagesArray = new Array();
                for (var i = 0; i < pageCount;) {
                    pagesArray.push({ index: i, text: ++i });
                }
                return {
                    store: pagesArray,
                    paginate: pageCount > 200,
                    pageSize: 100
                };
            })),
            currentPage: reportPreview._currentPageText,
            focusOut: (e) => {
                if (!paginationSelectBoxViewModel._isPageChanged(e.component.option('text'))) {
                    reportPreview._currentPageText.notifySubscribers(reportPreview._currentPageText());
                }
            },
            keyUp: (e) => {
                if (e.event.which !== 13)
                    return;
                if (paginationSelectBoxViewModel._isPageChanged(e.component.option('text'))) {
                    paginationSelectBoxViewModel.opened(false);
                }
            },
            _isPageChanged: (value) => {
                var val = parseInt && parseInt(value);
                if (!!val && val-- > 0 && val < reportPreview.pages().length) {
                    reportPreview.goToPage(val);
                    return true;
                }
                return false;
            },
            displayExpr: function (value) {
                var pageIndex = reportPreview.pageIndex.peek();
                if (pageIndex === -1 || !value || pageIndex === value.index) {
                    return reportPreview._currentPageText.peek();
                }
                else {
                    return value.text;
                }
            },
            itemTemplate: function (value) { return value.text; },
            searchMode: 'startswith',
            searchEnabled: ko.observable(true),
            searchTimeout: 10,
            opened: ko.observable(false),
            templateName: 'dxrd-preview-pager'
        };
        this.actions.push(paginationSelectBoxViewModel);
        this.actions.push({
            id: ActionId.NextPage,
            text: getLocalization('Next Page', 'ASPxReportsStringId.ToolBarItemText_NextPage'),
            imageClassName: 'dxrd-image-preview-next',
            imageTemplateName: 'dxrd-svg-preview-next_page',
            disabled: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; })),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: false, keyCode: 39 },
            clickAction: () => {
                if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                    reportPreview.goToPage(reportPreview.pageIndex() + 1, false, 500);
                }
            }
        });
        this.actions.push({
            id: ActionId.LastPage,
            text: getLocalization('Last Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_LastPage'),
            imageClassName: 'dxrd-image-preview-last',
            imageTemplateName: 'dxrd-svg-preview-last_page',
            disabled: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; })),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 39 },
            clickAction: () => {
                if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                    reportPreview.goToPage(reportPreview.pages().length - 1);
                }
            }
        });
        this.actions.push({
            id: ActionId.MultipageToggle,
            text: getLocalization('Toggle Multipage Mode', 'ASPxReportsStringId.WebDocumentViewer_ToggleMultipageMode'),
            imageClassName: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.showMultipagePreview() ? 'dxrd-image-preview-single-page' : 'dxrd-image-preview-multipage'; })),
            imageTemplateName: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.showMultipagePreview() ? 'dxrd-svg-preview-single_page' : 'dxrd-svg-preview-multi_page_preview'; })),
            disabled: ko.observable(false),
            visible: this.wrapDisposable(ko.pureComputed(() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 77 },
            clickAction: () => {
                var zoom = reportPreview._zoom();
                reportPreview.showMultipagePreview(!reportPreview.showMultipagePreview());
                reportPreview.zoom(zoom);
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.ZoomOut,
            text: getLocalization('Zoom Out', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomOut'),
            imageClassName: 'dxrd-image-zoomout',
            imageTemplateName: 'dxrd-svg-toolbar-zoomout',
            disabled: ko.observable(false),
            visible: true,
            zoomStep: reportPreview.zoomStep,
            hotKey: { ctrlKey: false, keyCode: 109 },
            clickAction: () => {
                var currentZoom = reportPreview.zoom();
                var zoomLevel = currentZoom > 0 ? currentZoom : reportPreview._zoom();
                reportPreview.zoom(Math.max(zoomLevel - reportPreview.zoomStep(), 0.1));
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.ZoomSelector,
            text: getLocalization('Zoom to Whole Page', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomToWholePage'),
            imageClassName: 'dxrd-image-zoom',
            disabled: ko.observable(false),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 187 },
            clickAction: () => {
                reportPreview.zoom(0);
            },
            templateName: 'dxrd-zoom-autofit-select-template',
            displayExpr: (val) => {
                if (val === ZoomAutoBy.PageWidth) {
                    return getLocalization('Page Width', 'DevExpress.XtraReports.UI.XtraReport.PageWidth');
                }
                else if (Math.round(val * 100) === 0) {
                    return getLocalization('Whole Page', 'PreviewStringId.MenuItem_ZoomWholePage');
                }
                else {
                    return Math.round((val || reportPreview.zoom.peek()) * 100) + '%';
                }
            },
            onCustomItemCreating: (e) => { e.customItem = parseZoom(e.text); },
            zoom: reportPreview.zoom,
            zoomLevels: reportPreview.predefinedZoomLevels,
            zoomItems: this.wrapDisposable(ko.pureComputed(() => {
                var items = reportPreview.predefinedZoomLevels.slice(0);
                if (reportPreview.showMultipagePreview() === false && items.indexOf(0) === -1) {
                    items.push(ZoomAutoBy.PageWidth);
                    items.push(ZoomAutoBy.WholePage);
                }
                return items;
            }))
        });
        this.actions.push({
            id: ActionId.ZoomIn,
            text: getLocalization('Zoom In', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomIn'),
            imageClassName: 'dxrd-image-zoomin',
            imageTemplateName: 'dxrd-svg-toolbar-zoomin',
            disabled: ko.observable(false),
            visible: true,
            zoomStep: reportPreview.zoomStep,
            hotKey: { ctrlKey: false, keyCode: 107 },
            clickAction: () => {
                var currentZoom = reportPreview.zoom();
                var zoomLevel = currentZoom > 0 ? currentZoom : reportPreview._zoom();
                reportPreview.zoom(Math.min(zoomLevel + reportPreview.zoomStep(), 10));
            }
        });
        this.actions.push({
            id: ActionId.HighlightEditingFields,
            text: getLocalization('Highlight Editing Fields', 'DevExpress.XtraPrinting.PrintingSystemCommand.HighlightEditingFields'),
            imageClassName: 'dxrp-image-hightlight-editing-fields',
            imageTemplateName: 'dxrd-svg-toolbar-hightlightEditingFields',
            disabled: this.wrapDisposable(ko.pureComputed(() => reportPreview.editingFieldsProvider().length < 1)),
            visible: this.wrapDisposable(ko.pureComputed(() => {
                var available = EditablePreviewEnabled();
                var viewerVisible = reportPreview.previewVisible();
                return available && viewerVisible;
            })),
            selected: this.wrapDisposable(ko.pureComputed(() => reportPreview.editingFieldsHighlighted())),
            hotKey: { ctrlKey: true, keyCode: 72 },
            clickAction: () => {
                reportPreview.editingFieldsHighlighted(!reportPreview.editingFieldsHighlighted());
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.Print,
            text: getLocalization('Print', 'ASPxReportsStringId.DocumentViewer_RibbonPrintGroupText'),
            imageClassName: 'dxrd-image-print',
            imageTemplateName: 'dxrd-svg-preview-print',
            hasSeparator: true,
            disabled: printDisabled,
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 80 },
            clickAction: () => {
                if (printDisabled()) {
                    return;
                }
                reportPreview.printDocument();
            }
        });
        this.actions.push({
            id: ActionId.PrintPage,
            text: getLocalization('Print Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_PrintPage'),
            imageClassName: 'dxrd-image-print-page',
            imageTemplateName: 'dxrd-svg-preview-print_page',
            disabled: printDisabled,
            visible: true,
            clickAction: () => {
                if (printDisabled()) {
                    return;
                }
                reportPreview.printDocument(reportPreview.pageIndex());
            }
        });
    }
    wrapDisposable(object) {
        this._disposables.push(object);
        return object;
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    getActions(context) {
        return this.actions;
    }
}
