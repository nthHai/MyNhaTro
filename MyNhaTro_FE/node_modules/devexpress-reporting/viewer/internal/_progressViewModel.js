/**
* DevExpress HTML/JS Reporting (viewer\internal\_progressViewModel.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ListKeyboardHelper } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, getLocalization } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
export class ProgressViewModel extends Disposable {
    constructor(enableKeyboardSupport) {
        super();
        this.progress = ko.observable(0);
        this._forceInvisible = ko.observable(false);
        this._cancelExportRequests = {};
        this.inProgress = ko.observable(false);
        this.cancelText = ko.observable(getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        this.operationId = ko.observable();
        this.text = ko.observable('');
        this.cssClasses = ko.observable();
        this.cancelVisible = ko.pureComputed(() => !!this.operationId() && !this.isCancelling());
        this.isCancelling = ko.observable(false);
        this.visible = ko.pureComputed({
            read: () => {
                if (this._forceInvisible()) {
                    return false;
                }
                return this.inProgress();
            },
            write: (visibleState) => {
                this._forceInvisible(!visibleState);
            }
        });
        if (enableKeyboardSupport) {
            this.progressBarAccessibility = new ListKeyboardHelper();
            this._disposables.push(this.progressBarAccessibility);
        }
        this._disposables.push(this.cancelVisible, this.visible);
    }
    wasCancelRequested(id) {
        return !!(id && this._cancelExportRequests[id]);
    }
    setPosition(position) {
        if (!position) {
            this.cssClasses({
                'dxrd-align-default': true
            });
        }
        else {
            this.cssClasses({
                'dxrd-align-bottom': position.bottom,
                'dxrd-align-top': position.top,
                'dxrd-align-left': position.left,
                'dxrd-align-right': position.right
            });
        }
    }
    complete(completeOperationId) {
        if (completeOperationId === this.operationId() || this._startOperationId === completeOperationId || !completeOperationId) {
            this.inProgress(false);
            this.progress(0);
            this._startOperationId = null;
            this.operationId(null);
            this._lastOperationDeferred && this._lastOperationDeferred.resolve(completeOperationId);
            this.rejectLastOperationIdDeferred();
            this.isCancelling(false);
        }
    }
    dispose() {
        this.rejectLastOperationIdDeferred();
        super.dispose();
    }
    rejectLastOperationIdDeferred() {
        this._lastOperationIdDeferred && this._lastOperationIdDeferred.reject();
    }
    rejectLastOperationDeferred() {
        this._lastOperationDeferred && this._lastOperationDeferred.reject();
    }
    startProgress(startOperationId, onStop, operationIdPromise) {
        if (this.inProgress()) {
            this.stop();
            this.rejectLastOperationDeferred();
            this.rejectLastOperationIdDeferred();
        }
        this._startOperationId = startOperationId;
        this.inProgress(true);
        this.progress(0);
        var newOperationDeferred = $.Deferred();
        var newOperationIdDeferred = $.Deferred();
        this._lastOperationDeferred = newOperationDeferred;
        this._lastOperationIdDeferred = newOperationIdDeferred;
        operationIdPromise
            .done(operationId => {
            newOperationIdDeferred.resolve(operationId);
        }).fail(() => {
            newOperationIdDeferred.reject();
            newOperationDeferred.reject();
            this.complete(startOperationId);
        });
        newOperationIdDeferred.done(operationId => {
            this.operationId(operationId);
        });
        this.stop = () => {
            this.isCancelling(true);
            this.text(getLocalization('Cancelling...', 'ASPxReportsStringId.WebDocumentViewer_Cancelling'));
            var operationId = this.operationId();
            var finalizeId = operationId || this._startOperationId;
            try {
                $.isFunction(onStop) && onStop(finalizeId);
                if (operationId)
                    this._cancelExportRequests[operationId] = true;
                if (this._startOperationId)
                    this._cancelExportRequests[this._startOperationId] = true;
            }
            finally {
            }
        };
        return this._lastOperationDeferred.promise();
    }
}
