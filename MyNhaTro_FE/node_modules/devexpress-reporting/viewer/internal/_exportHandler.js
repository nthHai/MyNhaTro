/**
* DevExpress HTML/JS Reporting (viewer\internal\_exportHandler.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { formatUnicorn, StringId } from '@devexpress/analytics-core/analytics-internal';
import { Disposable, getLocalization } from '@devexpress/analytics-core/analytics-utils';
import { getTemplate } from '@devexpress/analytics-core/analytics-widgets';
import browser from 'devextreme/core/utils/browser';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { generateGuid, isIOS, isAndroid, isMobile } from '../../common/utils/_utils';
import { AsyncExportApproach, HandlerUri, ReportServerDownloadUri } from '../settings';
import { PreviewRequestWrapper } from './_previewRequestWrapper';
import { safelyRunWindowOpen } from './_utils';
export class ExportResultRequestData {
    constructor() {
        this.RequestUrl = '';
        this.FormData = {};
        this.QueryParameters = {};
    }
}
export class ExportHandler extends Disposable {
    constructor(exportSetting, preview) {
        super();
        this.preview = preview;
        this.exportActionUri = ko.observable(null);
        this.exportFormData = ko.observable([]);
        this.reportDisplayName = ko.observable(null);
        this.popupVisible = ko.observable(false);
        this.popupWidth = ko.observable(510);
        this.popupHeight = ko.observable(260);
        this.exportingFrameName = 'dxrd-exporting-frame' + generateGuid();
        this.popupButtons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton',
                options: {
                    text: getLocalization('Ok', StringId.DataAccessBtnOK), type: 'default', stylingMode: 'contained',
                    onClick: () => this.popupVisible(false)
                }
            }
        ];
        this.printingLinkCallback = () => { };
        this.printingTextPrefix = ko.observable('');
        this.printingTextPostfix = ko.observable('');
        this.getPopupTitle = () => this.reportDisplayName() || '';
        this._exportResultRequestData = new ExportResultRequestData();
        this._showPrintNotificationDialog = true;
        this._useSameTabExport = true;
        this._useAsynchronousExport = true;
        this._workerTicker = null;
        this._workerFunctionBlobUrl = null;
        this._xhr = null;
        this._workerTickerFunction = function () {
            var started, interval;
            self.onmessage = function (e) {
                if (e.data === 'stop') {
                    clearInterval(interval);
                    return;
                }
                if (started)
                    return;
                interval = setInterval(() => {
                    postMessage.apply(self, ['tick']);
                }, 10);
                started = true;
            };
        };
        this._window = null;
        this._timeouts = [];
        if (exportSetting) {
            if (exportSetting.useAsynchronousExport !== undefined)
                this._useAsynchronousExport = exportSetting.useAsynchronousExport;
            if (exportSetting.useSameTab !== undefined)
                this._useSameTabExport = exportSetting.useSameTab;
            if (exportSetting.showPrintNotificationDialog !== undefined)
                this._showPrintNotificationDialog = exportSetting.showPrintNotificationDialog;
        }
    }
    _getUrlObject() {
        return window.URL || window['webkitURL'] || window['mozURL'] || window['msURL'] || window['oURL'];
    }
    _createWorker() {
        this._terminateWorker();
        var blob = new Blob(['(' + this._workerTickerFunction.toString() + ')()'], { type: 'text/javascript' });
        var _url = this._getUrlObject();
        this._workerFunctionBlobUrl = _url.createObjectURL(blob);
        this._workerTicker = new Worker(this._workerFunctionBlobUrl);
        return this._workerTicker;
    }
    _terminateWorker() {
        if (this._workerTicker) {
            this._workerTicker.terminate();
            this._workerTicker = null;
        }
        if (this._workerFunctionBlobUrl) {
            var _url = this._getUrlObject();
            _url && _url.revokeObjectURL(this._workerFunctionBlobUrl);
            this._workerFunctionBlobUrl = null;
        }
    }
    _callPrint(_window) {
        var browserVersion = parseInt(browser.version);
        if (_window && ((browser.chrome && 76 <= browserVersion && !isAndroid) || isIOS)) {
            var worker = this._createWorker();
            var checkOnTick = () => {
                try {
                    if (_window.document && _window.document.contentType === 'application/pdf') {
                        _window.print();
                        worker.postMessage('stop');
                        this._terminateWorker();
                    }
                }
                catch (ex) {
                    this._terminateWorker();
                }
            };
            worker.onerror = (e) => { checkOnTick(); };
            worker.onmessage = (e) => { checkOnTick(); };
            worker.postMessage('start');
        }
    }
    _clearExportingFrame() {
        if (this._isNewBrowser()) {
            var iframe = this.exportingFrame.contentWindow;
            iframe && iframe.location.replace('about:blank');
        }
    }
    _initPrintingWindow() {
        var printingTextParts = getLocalization('If the operation fails, you can download the {0} and print it out from another application.', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Text').split('{0}');
        this.printingTextPrefix(printingTextParts[0]);
        this.printingTextPostfix(printingTextParts[1]);
        if (this._showPrintNotificationDialog) {
            var subscription = this.popupVisible.subscribe((newVal) => {
                if (!newVal) {
                    this.printingLinkCallback = () => { };
                    this._clearExportingFrame();
                    subscription.dispose();
                }
            });
            this._disposables.push(subscription);
            this.popupVisible(true);
        }
    }
    _setPrintingLinkCallback(printingLinkCallback) {
        if (this._showPrintNotificationDialog) {
            this.printingLinkCallback = printingLinkCallback;
        }
    }
    _formSubmit(_requestData, _formTarget) {
        if (this.postingForm) {
            this.postingForm.target = _formTarget;
            this.exportActionUri(_requestData.RequestUrl);
            var formData = [];
            for (var key in _requestData.FormData) {
                formData.push({ name: key, value: _requestData.FormData[key] });
            }
            this.exportFormData(formData);
            this.postingForm.submit();
        }
    }
    _doExportSync(_exportWindow, printable, useSameTab, shouldChangePrintJobName) {
        this.onExportCustomEvent && this.onExportCustomEvent(this._exportResultRequestData);
        const _requestData = this._exportResultRequestData;
        useSameTab && printable && this._initPrintingWindow();
        const formTarget = useSameTab || (this._useSameTabExport && !useSameTab && isMobile) ? this.exportingFrameName : '_blank';
        if (!printable || !this._isNewBrowser() || (this._useSameTabExport && !useSameTab && isMobile)) {
            if (!this._useSameTabExport) {
                this._replaceLocation(_exportWindow, _requestData);
            }
            else {
                this._formSubmit(_requestData, formTarget);
            }
        }
        else {
            if (!_exportWindow) {
                _exportWindow = this.exportingFrame && (useSameTab || (this._useSameTabExport && isMobile)) ? this.exportingFrame.contentWindow : this._replaceLocation(null, null);
            }
            const method = this._useSameTabExport ? 'POST' : 'GET';
            this._printUsingBlob(_exportWindow, _requestData, method, shouldChangePrintJobName);
        }
    }
    _initExportWindow() {
        var message = getLocalization('Do not close this tab to get the resulting file.', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportCloseWarning');
        var div = this._window.document.createElement('div');
        div.style['text-align'] = 'center';
        div.innerText = message;
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.right = '0';
        div.style.fontSize = '20px';
        this._window.document.title = getLocalization('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle');
        this._window.document.body.appendChild(div);
        div = this._window.document.createElement('div');
        div.id = 'loading';
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.bottom = '0';
        div.style.right = '0';
        div.style['text-align'] = 'center';
        div.style.margin = 'auto';
        div.style.height = '0';
        div.style.fontSize = '32px';
        this._window.document.body.appendChild(div);
    }
    _startExportAsync(args, useSameTabLocal, deferred, inlineResult, printable = false) {
        if (useSameTabLocal) {
            this._setPrintingLinkCallback(() => this._startExportAsync(args, false, deferred, inlineResult, printable));
        }
        else {
            if (!this._useSameTabExport) {
                this._window = window.open();
                this._window.onunload = () => {
                    this.preview.progressBar.stop();
                    this._terminateWorker();
                };
                this._initExportWindow();
            }
        }
        this.preview.progressBar.text(getLocalization('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument'));
        this.preview.progressBar.cancelText(getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        var exportOperationIdDeferred = $.Deferred();
        var startExportOperationId = generateGuid();
        var shouldIgnoreError = (operationId) => () => this.preview.progressBar.wasCancelRequested(operationId || startExportOperationId);
        this.preview.progressBar.startProgress(startExportOperationId, (operationId) => {
            this.preview.requestWrapper.cancelExportRequest(operationId, shouldIgnoreError(operationId));
        }, exportOperationIdDeferred.promise());
        this.preview.requestWrapper.getStartExportOperation(args, shouldIgnoreError())
            .done((response) => {
            this.preview.previewHandlersHelper.doneStartExportHandler(deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTabLocal, printable);
        })
            .fail((error) => {
            this.preview.previewHandlersHelper.errorStartExportHandler(deferred, startExportOperationId, error);
            exportOperationIdDeferred.reject();
            !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
        });
    }
    export(args, actionUri, inlineResult, printable = false) {
        this._terminateWorker();
        var deferred = $.Deferred();
        var requestData = this._exportResultRequestData;
        requestData.RequestUrl = actionUri;
        if (this.preview._editingFields().length > 0 || AsyncExportApproach() || this._useAsynchronousExport || (this.preview.exportOptionsModel() && this.preview.exportOptionsModel().hasSensitiveData())) {
            setTimeout(() => {
                this._startExportAsync(args(), this._useSameTabExport, deferred, inlineResult, printable);
            });
        }
        else {
            deferred.resolve(true);
            if (this._useSameTabExport) {
                requestData.FormData['arg'] = args();
                requestData.FormData['actionKey'] = 'exportTo';
                this._setPrintingLinkCallback(() => this._doExportSync(null, true, false, false));
            }
            else {
                requestData.QueryParameters['arg'] = args();
                requestData.QueryParameters['actionKey'] = 'exportTo';
            }
            this._doExportSync(null, printable, this._useSameTabExport, false);
        }
        return deferred.promise();
    }
    _isNewBrowser() {
        var isNewChrome = browser.chrome && (parseInt(browser.version) >= 76);
        return (isNewChrome || browser.mozilla || browser['safari']);
    }
    _showAsyncExportError(window, message, status, statusText) {
        if (window) {
            var div = window.document.getElementById('loading');
            if (div) {
                if (status || statusText) {
                    var stringFormat = getLocalization('{0} ({1} {2})', 'ASPxReportsStringId.Error_WithStatus');
                    div.innerText = formatUnicorn(stringFormat, message, status, statusText);
                }
                else
                    div.innerText = message;
            }
        }
    }
    _printUsingBlob(_exportWindow, _requestData, _method, shouldChangePrintJobName) {
        if (!this._useSameTabExport && _exportWindow && shouldChangePrintJobName) {
            _exportWindow.location.replace(_requestData.RequestUrl);
            return;
        }
        _method === 'GET' && (_requestData.RequestUrl = this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters));
        this._executeXhr(_exportWindow, _requestData, _method, this._handleXhrReady);
    }
    _executeXhr(_exportWindow, _requestData, _method, _handleXhrReady) {
        this._prepareXhr(_exportWindow, _requestData, _method, _requestData.RequestUrl, _handleXhrReady);
        var formData = new FormData();
        for (var key in _requestData.FormData) {
            formData.append(key, _requestData.FormData[key]);
        }
        this._xhr.send(formData);
    }
    _prepareXhr(_exportWindow, _requestData, _method, _exportUrl, _handleXhrReady) {
        const _this = this;
        this._xhr = new XMLHttpRequest();
        this._xhr.onreadystatechange = function () {
            _handleXhrReady(_this, this, _exportWindow, _requestData);
        };
        this._xhr.open(_method, _exportUrl);
        this._xhr.responseType = 'blob';
    }
    _handleXhrReady(_this, _xmlHttpRequest, _exportWindow, _requestData) {
        if (_xmlHttpRequest.readyState == 4 && _xmlHttpRequest.status == 200) {
            const _url = _this._getUrlObject();
            const blobUrl = _url.createObjectURL(_xmlHttpRequest.response);
            _exportWindow && _exportWindow.location.replace(blobUrl);
            setTimeout(() => { _url.revokeObjectURL(blobUrl); }, 1);
            _this._callPrint(_exportWindow);
        }
        else if (_xmlHttpRequest.readyState == 4 && _xmlHttpRequest.status >= 400) {
            var message = getLocalization('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError');
            PreviewRequestWrapper.getProcessErrorCallback(_this.preview, message, true)('', _xmlHttpRequest, '');
            if (_exportWindow && _exportWindow.name != _this.exportingFrameName) {
                _this._showAsyncExportError(_exportWindow, message, _xmlHttpRequest.status, _xmlHttpRequest.statusText);
            }
        }
    }
    _addQueryParamsToUri(_exportUri, _queryParameters) {
        var keys = Object.keys(_queryParameters || {});
        if (keys.length > 0) {
            _exportUri += '?';
            _exportUri += keys.map(x => x + '=' + _queryParameters[x]).join('&');
        }
        return _exportUri;
    }
    _replaceLocation(_exportWindow, _requestData) {
        if (!_requestData) {
            return safelyRunWindowOpen('');
        }
        var _exportUrl = this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters);
        _exportWindow ? _exportWindow.location.replace(_exportUrl) : (_exportWindow = safelyRunWindowOpen(_exportUrl));
        return _exportWindow;
    }
    dispose() {
        super.dispose();
        if (this._xhr)
            this._xhr.onreadystatechange = null;
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        this.removeProperties();
    }
    updateExportStatus(progress, operationId) {
        this.preview.progressBar && this.preview.progressBar.progress(progress);
        if (this._window) {
            var div = this._window.document.getElementById('loading');
            div && (div.innerText = getLocalization('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument') + ' ' + progress + '%');
            this._window.document.title = getLocalization('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle') + progress + '%';
        }
        if (progress >= 100) {
            this.preview.progressBar.complete(operationId);
        }
    }
    getExportStatus(operationId) {
        var deferred = $.Deferred();
        this._timeouts.push(setTimeout(() => {
            this.preview.requestWrapper.getExportStatusRequest(operationId)
                .done((response) => {
                this.preview.previewHandlersHelper.doneExportStatusHandler(deferred, operationId, response);
            })
                .fail((error) => {
                this.preview.previewHandlersHelper.errorExportStatusHandler(deferred, operationId, error);
                !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
            });
        }, 250));
        return deferred.promise();
    }
    getExportResult(operationId, inlineDisposition, useSameTab, token, printable = false, uri = '') {
        var requestData = this._exportResultRequestData;
        if (uri) {
            requestData.RequestUrl = uri;
        }
        else if (token) {
            requestData.RequestUrl = ReportServerDownloadUri();
            requestData.QueryParameters['token'] = token;
            requestData.QueryParameters['printable'] = printable.toString();
        }
        else {
            var arg = encodeURIComponent(JSON.stringify({ id: operationId, inlineResult: !!inlineDisposition }));
            requestData.RequestUrl = HandlerUri();
            if (this._useSameTabExport) {
                requestData.FormData['actionKey'] = 'getExportResult';
                requestData.FormData['arg'] = arg;
            }
            else {
                requestData.QueryParameters['actionKey'] = 'getExportResult';
                requestData.QueryParameters['arg'] = arg;
            }
        }
        this._window && (this._window.onunload = null);
        this._doExportSync(this._window, printable, useSameTab, !!uri);
        this._window = null;
    }
}
ko.bindingHandlers['dxViewerExport'] = {
    init: function (element, valueAccessor) {
        var exportHandler = valueAccessor();
        var templateHtml = getTemplate('dxrd-export-tool-content');
        $.fn.constructor(element).append(templateHtml);
        var exportFrame = document.createElement('iframe');
        exportFrame.name = exportHandler.exportingFrameName;
        element.querySelector('.dxrd-visually-hidden').appendChild(exportFrame);
        exportHandler.exportingFrame = exportFrame;
        exportHandler.postingForm = element.querySelector('form');
    }
};
