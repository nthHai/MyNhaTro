/**
* DevExpress HTML/JS Reporting (rich-edit\utils\_bindings.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addDisposeCallback } from '@devexpress/analytics-core/analytics-internal';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import { getTemplate } from '@devexpress/analytics-core/analytics-widgets';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { XRRichEditControlModel } from './_model';
export class RichEditVirtualScroll extends Disposable {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    dispose() {
        super.dispose();
        this._viewPort = null;
        this.items = [];
    }
    registerViewPort(viewPort) {
        this._viewPort = viewPort;
        var updateRich = () => this.updateRichPosition();
        this._viewPort.addEventListener('scroll', updateRich, true);
        this._disposables.push({
            dispose: () => this._viewPort.removeEventListener('scroll', updateRich, true)
        });
    }
    registerRichEditControl(element, model) {
        this.isDisposing = false;
        if (!this._viewPort) {
            this.registerViewPort($.fn.constructor(element).closest('.dxrd-viewport')[0]);
        }
        var richItem = { element, model };
        this.updateRich(richItem, this._viewPort.getBoundingClientRect());
        this.items.push(richItem);
        this._disposables.push(model.visible.subscribe((newVal) => this.updateRich(richItem, this._viewPort.getBoundingClientRect())));
    }
    unregisterRichEditControl(element) {
        var currentIndex = -1;
        this.items.some((x, index) => {
            if (x.element === element) {
                currentIndex = index;
                return true;
            }
            return false;
        });
        if (currentIndex !== -1)
            this.items.splice(currentIndex, 1);
        if (this.items.length === 0)
            this.dispose();
    }
    updateRich(item, viewPortRect) {
        var currentHeight = Math.min(item.element.clientHeight, this._viewPort.clientHeight);
        if (!item.model.visible()) {
            var elementRect = item.element.getBoundingClientRect();
            var newVerticalScrollOffset = viewPortRect.top - elementRect.top;
            if (elementRect.bottom - viewPortRect.top < 0 || elementRect.top > viewPortRect.bottom) {
                currentHeight = 0;
                newVerticalScrollOffset = 0;
            }
            if (item.model._richHeight != currentHeight || item.model._verticalScrollOffset != newVerticalScrollOffset) {
                item.model.setRichHeight(currentHeight);
                item.model._verticalScrollOffset = newVerticalScrollOffset;
                item.model.updateCanvasScroll();
            }
        }
        else {
            item.model.setRichHeight(null);
            item.model._verticalScrollOffset = 0;
            item.model.updateCanvasScroll();
        }
    }
    updateRichPosition() {
        var viewPortRect = this._viewPort.getBoundingClientRect();
        this.items.forEach(x => this.updateRich(x, viewPortRect));
    }
}
var virtualScroll = new RichEditVirtualScroll();
ko.bindingHandlers['dxRichSurface'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        $.fn.constructor(element).children().remove();
        var model = viewModel;
        if (model.controller && model.controller.richEdit) {
            var _richElement = model.controller.richEdit._element;
            if (ko.dataFor(_richElement) && document.getElementById(_richElement.id)) {
                $.fn.constructor(element).closest('.dxrd-control').css('display', 'none');
            }
            else {
                $.fn.constructor(element).append(_richElement);
                ko.applyBindings(model.controller.richEdit, _richElement);
                virtualScroll.registerRichEditControl(_richElement, model.controller.richEdit);
                addDisposeCallback(element, () => {
                    virtualScroll.unregisterRichEditControl(_richElement);
                });
            }
        }
        else {
            var editorOptions = valueAccessor();
            var templateHtml = getTemplate('dxrd-rich-edit');
            var inlineControl = editorOptions.inlineEdit;
            var richElement = $.fn.constructor(element).append(templateHtml).children()[0];
            var richEditModel = new XRRichEditControlModel(richElement, inlineControl, model.selected);
            model.createController(richEditModel);
            ko.applyBindings(richEditModel, richElement);
            virtualScroll.registerRichEditControl(richElement, richEditModel);
            addDisposeCallback(element, () => {
                virtualScroll.unregisterRichEditControl(richElement);
            });
        }
        return { controlsDescendantBindings: true };
    }
};
