/**
* DevExpress HTML/JS Reporting (designer\internal\fieldlist\_treelistItem.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CodeResolver, nameValidationRules } from '@devexpress/analytics-core/analytics-internal';
import { TreeListItemViewModel } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as $ from 'jquery';
import * as ko from 'knockout';
export class ReportDesignerTreelistItem extends TreeListItemViewModel {
    constructor(options, path = [], onItemsVisibilityChanged = $.noop, rtl = false, resolver = new CodeResolver(), _renameInProgress) {
        super(options, path, onItemsVisibilityChanged, rtl, resolver);
        this.resolver = resolver;
        this._renameInProgress = _renameInProgress;
        this._renameMode = ko.observable(false);
        this.createValidatorOptions = () => ({
            validationRules: nameValidationRules,
        });
        this.createRenameEditorOptions = () => ({
            onFocusOut: (event) => {
                if (event.component.option('isValid') === true)
                    this.rename(event.component.option('value'));
                else
                    setTimeout(() => {
                        event.component.focus();
                    });
            },
            onInitialized: (event) => {
                setTimeout(() => {
                    event.component.focus();
                    $.fn.constructor(event.component.element()).find('input')[0].select();
                });
            },
            onKeyUp: (event) => {
                if (event.event.key.toLowerCase() === 'escape') {
                    this.renameMode(false);
                }
            },
            onEnterKey: (event) => {
                if (event.component.option('isValid') === true)
                    this.rename(event.component.option('value'));
                else
                    setTimeout(() => {
                        event.component.focus();
                    });
            },
            text: this.text
        });
        this.templates.actionsContainer = 'dx-treelist-action-container-with-rename';
        this.templates.itemTextContent = 'dx-treelist-item-text-content-with-rename';
    }
    get canRename() {
        return !!this.data['rename'];
    }
    get disabled() {
        return this._renameInProgress() && !this.isSelected();
    }
    get inRenameMode() {
        return this._renameMode();
    }
    getCssRules() {
        return Object.assign({ 'dx-treelist-item-disabled': this._renameInProgress() && !this.isSelected() }, super.getCssRules());
    }
    renameMode(val) {
        this.toggleSelected();
        this._renameInProgress(val);
        this._renameMode(val);
    }
    rename(val) {
        this.data['rename'](val);
        this.renameMode(false);
    }
}
