/**
* DevExpress HTML/JS Reporting (designer\internal\_displayNameBindings.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addDisposeCallback, DisplayExpressionConverter } from '@devexpress/analytics-core/analytics-internal';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { ValueConverter } from './_htmlMarkUpConverter';
ko.bindingHandlers['controlDisplayName'] = {
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = valueAccessor(), surface = ko.unwrap(value);
        var parameters = surface.displayNameParameters();
        var setElementText = (value) => $.fn.constructor(element).text(value ? ('[' + value + ']') : '');
        if (parameters.isExpression) {
            $.fn.constructor(element).text(parameters.text);
            var expressionConverter = new DisplayExpressionConverter(bindingContext.$root.displayNameProvider());
            expressionConverter.toDisplayExpression(parameters.dataMember, parameters.text).done(result => {
                $.fn.constructor(element).text(result);
            });
        }
        else if (parameters.dataMember) {
            setElementText(parameters.dataMember);
            bindingContext.$root.displayNameProvider()
                .getDisplayName(parameters.dataSource, parameters.dataMember, parameters.dataMemberOffset, false)
                .done(data => setElementText(data))
                .fail(() => setElementText(parameters.dataMember));
        }
        else {
            if (!parameters.allowMarkupText) {
                $.fn.constructor(element).text(parameters.text || '');
            }
            else {
                new ValueConverter(parameters).appendTo(element);
            }
        }
    }
};
ko.bindingHandlers['displayNameExtender'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = ko.unwrap(valueAccessor());
        var displayName = ko.observable('');
        var displayNameLoader = ko.computed(() => {
            if (value.dataMember()) {
                var displayNameProvider = bindingContext.$root.displayNameProvider.peek();
                var promise = value.path ? displayNameProvider.getDisplayNameByPath(value.path(), value.dataMember()) :
                    displayNameProvider.getDisplayName(value.dataSource(), value.dataMember(), value.dataMemberOffset, value.includeDataSourceName);
                promise.done(data => displayName(data))
                    .fail(() => displayName(value.dataMember()));
            }
            else {
                displayName('');
            }
        }).extend({ rateLimit: 0 });
        addDisposeCallback(element, function () {
            displayNameLoader.dispose();
        });
        bindingContext.$data.$displayName = displayName;
        ko.applyBindingsToDescendants(bindingContext, element);
        return { controlsDescendantBindings: true };
    }
};
ko.virtualElements.allowedBindings['displayNameExtender'] = true;
