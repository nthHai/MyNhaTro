/**
* DevExpress HTML/JS Reporting (designer\internal\parameterLayout\_parametersLayoutTreeListController.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { getLocalization, ObjectStructureTreeListController } from '@devexpress/analytics-core/analytics-internal';
import * as ko from 'knockout';
import { ReportViewModel } from '../../controls/xrReport';
import { GroupLayoutItem, ParameterLayoutItem } from '../../dataObjects/parameters/layoutItems';
import { ParameterLayoutDragDropHandler } from './_parameterLayoutDragDropHandler';
export class ParametersLayoutTreeListController extends ObjectStructureTreeListController {
    constructor(_report, _selectedItemModel) {
        super(undefined, undefined);
        this._report = _report;
        this._selectedItemModel = _selectedItemModel;
        this.getActions = (item) => {
            var model = item && item.data && item.data['data'];
            var imageTemplateName = model instanceof GroupLayoutItem ? 'dxrd-svg-actions-ungroup' : 'dxrd-svg-operations-recycle_bin';
            var imageClassName = model instanceof GroupLayoutItem ? 'dxrd-image-ungroup' : 'dxrd-image-recycle-bin';
            return [{
                    text: 'Delete',
                    displayText: () => getLocalization('Delete', 'AnalyticsCoreStringId.Cmd_Delete'),
                    imageClassName: imageClassName,
                    imageTemplateName: imageTemplateName,
                    clickAction: (treeListItem) => this.delete(treeListItem.data['data'])
                }];
        };
        this._disposables.push(this.dragDropHandler = new ParameterLayoutDragDropHandler(_selectedItemModel));
    }
    _innerSwap(selectedItemModel, swapElement, goUp, currentCollection) {
        currentCollection.remove(selectedItemModel);
        if (goUp) {
            swapElement.parameterPanelLayoutItems.push(selectedItemModel);
        }
        else {
            swapElement.parameterPanelLayoutItems.unshift(selectedItemModel);
        }
        selectedItemModel.parentModel(swapElement);
    }
    _outerSwap(selectedItemModel, goUp, currentCollection) {
        var parentModel = selectedItemModel.parentModel();
        var grandParentModel = parentModel.parentModel();
        currentCollection.remove(selectedItemModel);
        currentCollection = grandParentModel.parameterPanelLayoutItems;
        var index = currentCollection().indexOf(parentModel) + (goUp ? 0 : 1);
        currentCollection.splice(index, 0, selectedItemModel);
        selectedItemModel.parentModel(grandParentModel);
    }
    _siblingsSwap(currentCollection, index, offset) {
        var _collection = ko.unwrap(currentCollection);
        [_collection[index + offset], _collection[index]] = [_collection[index], _collection[index + offset]];
        currentCollection.valueHasMutated();
    }
    _checkIndex(index, goUp, parentModel) {
        return goUp ? index > 0 : parentModel.parameterPanelLayoutItems().length - 1 > index;
    }
    addItem(item) {
        var selectedItemModel = this._selectedItemModel();
        var root = this._report;
        if (selectedItemModel) {
            root = selectedItemModel instanceof GroupLayoutItem ? selectedItemModel : (selectedItemModel.parentModel() || selectedItemModel);
        }
        else {
            selectedItemModel = root.parameterPanelLayoutItems()[0];
        }
        root.parameterPanelLayoutItems.splice(root.parameterPanelLayoutItems().indexOf(selectedItemModel) + 1, 0, item);
        item.parentModel(root);
        this._selectedItemModel(item);
    }
    move(goUp = true) {
        var offset = goUp ? -1 : 1;
        var selectedItemModel = this._selectedItemModel();
        if (!selectedItemModel)
            return;
        var parentModel = selectedItemModel.parentModel();
        var collection = parentModel.parameterPanelLayoutItems;
        var index = collection().indexOf(selectedItemModel);
        if (this._checkIndex(index, goUp, parentModel)) {
            var swapElement = collection()[index + offset];
            if (swapElement instanceof GroupLayoutItem) {
                this._innerSwap(selectedItemModel, swapElement, goUp, collection);
            }
            else {
                this._siblingsSwap(collection, index, offset);
            }
        }
        else if (parentModel instanceof GroupLayoutItem) {
            this._outerSwap(selectedItemModel, goUp, collection);
        }
        this._selectedItemModel.valueHasMutated();
    }
    delete(item = this._selectedItemModel()) {
        if (!item)
            return;
        var isSelectedItem = item === this._selectedItemModel();
        var parentModel = item.parentModel();
        var collection = parentModel.parameterPanelLayoutItems.peek();
        var index = collection.indexOf(item);
        if (item instanceof GroupLayoutItem) {
            var childItems = item.parameterPanelLayoutItems();
            childItems.forEach(item => item.parentModel(parentModel));
            collection.splice(index, 0, ...childItems);
        }
        item.delete();
        if (item instanceof ParameterLayoutItem) {
            this._report.parameterHelper.parameters.remove(item.parameter());
        }
        if (isSelectedItem) {
            var nextItem = collection[index === collection.length ? index - 1 : index];
            if (nextItem) {
                this._selectedItemModel(nextItem);
            }
            else if (!(parentModel instanceof ReportViewModel)) {
                this._selectedItemModel(parentModel);
            }
            else {
                this._selectedItemModel(null);
            }
        }
    }
}
