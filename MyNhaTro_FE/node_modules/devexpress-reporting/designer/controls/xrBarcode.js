/**
* DevExpress HTML/JS Reporting (designer\controls\xrBarcode.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { barCodesMap } from './metadata/xrBarcode';
import { XRControlViewModel } from './xrControl';
import { XRReportElementViewModel } from './xrReportelement';
export class XRBarCodeViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.symbology(this.createBarcode(this.symbology() || {}, serializer));
        this.barcodeFake = {
            type: ko.pureComputed({
                read: () => {
                    return this.symbology()['name']();
                },
                write: (val) => {
                    this.symbology(this.createBarcode({ '@Name': val }, serializer));
                }
            }),
            content: this.symbology
        };
        this._disposables.push(this.barcodeFake.type);
    }
    createBarcode(model, serializer = null) {
        var name = model && model['@Name'] || 'Code1';
        var barcodeInfo = barCodesMap[name];
        var newBarcode = { 'name': ko.observable(name), 'getInfo': () => { return barcodeInfo; } };
        (serializer || new ModelSerializer()).deserialize(newBarcode, model);
        return newBarcode;
    }
}
XRBarCodeViewModel.unitProperties = [].concat(['module'], XRReportElementViewModel.unitProperties);
