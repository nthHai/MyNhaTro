/**
* DevExpress HTML/JS Reporting (designer\jsReportDesignerBinding.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { DxAnalyticsComponentCommon, getLocalization, JSDesignerBindingCommon, resolveFromPromises, ShowMessage, _wrapModelInObservable } from '@devexpress/analytics-core/analytics-internal';
import { addCultureInfo, ajaxSetup } from '@devexpress/analytics-core/analytics-utils';
import { registerBaseBinding } from '@devexpress/analytics-core/analytics-widgets-internal';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { _setChartLimitation } from '../chart/_initializer';
import { EventGenerator } from '../common/binding/eventGenerator';
import { createReportDesignerFromModel } from './internal/_initializer';
import { limitation } from './internal/_settings';
import { JSReportDesigner } from './jsReportDesigner';
export class JSReportDesignerBinding extends JSDesignerBindingCommon {
    constructor(_options, customEventRaiser) {
        super(_options, customEventRaiser);
        this._model = null;
        this._deferreds = [];
        limitation(_options.limitation);
        _setChartLimitation(limitation());
        _options.designerModel = _wrapModelInObservable(_options.designerModel);
        this.sender = new JSReportDesigner(_options.designerModel);
        this._initializationData = ko.isObservable(_options.initializationData)
            ? _options.initializationData
            : ko.observable(_options.initializationData);
        _options.callbacks && _options.callbacks._eventSenderCreated && _options.callbacks._eventSenderCreated(this.sender);
        this._callbacks = this._initializeCallbacks();
        this._callbacks && this._callbacks.designer.onInitializing && this._callbacks.designer.onInitializing();
    }
    _applyBindings(model, $element) {
        this.sender.designerModel = model;
        this._disposables.push(model);
        var childTemplate = !model ? $.fn.constructor('<div>') : this._templateHtml;
        $element.children().remove();
        var child = $element.append(childTemplate).children()[0];
        if (!child)
            return;
        ko.cleanNode(child);
        this._callbacks && this._callbacks.designer.beforeRender && this._callbacks.designer.beforeRender(model);
        ko.applyBindings(model, child);
        model.afterRender();
        this._fireEvent('Init');
        var updateSizeTimeout = setTimeout(() => {
            model && model.updateSurfaceSize();
        }, 1);
        this._disposables.push({ dispose: () => clearTimeout(updateSizeTimeout) });
    }
    _initializeCallbacks() {
        if (this._options.callbacks) {
            var previewEvents = EventGenerator.generatePreviewEvents((eventName, args) => { this._fireEvent(eventName, args); }, 'Preview');
            var designerEvents = EventGenerator.generateDesignerEvents((eventName, args) => { this._fireEvent(eventName, args); });
            this._checkCallbackName(previewEvents);
            this._checkCallbackName(designerEvents);
            var availablePreviewEvents = this._generateCallbackDictionary(previewEvents, 'preview');
            var availableDesignerEvents = this._generateCallbackDictionary(designerEvents, 'designer');
            var availableEvents = {
                preview: availablePreviewEvents,
                designer: availableDesignerEvents
            };
            return availableEvents;
        }
    }
    _createModel(initData, element) {
        return createReportDesignerFromModel(initData, element, this._callbacks, false);
    }
    _showErrorInfo(jqXHR, getRequestDetails, errorThrown) {
        var requestDetails = getRequestDetails();
        var reportUrl = requestDetails.data.reportUrl;
        var messages = [];
        if (jqXHR && jqXHR.status)
            messages.push(jqXHR.status);
        if (errorThrown)
            messages.push(errorThrown);
        var errorStatus = messages.length > 0 ? messages.join(' - ') + '. ' : '';
        var helpLink = 'https://go.devexpress.com/Web_Reporting_Diagnostics_Tips.aspx';
        var consoleMessage = `Review the following help topic to diagnose a problem: '${helpLink}'.`;
        var clientMessage = getLocalization(`The page is blank because the Report Designer failed to load the report. Consult the developer for assistance.
            Use development mode for detailed information.`, 'ASPxReportsStringId.ReportDesigner_GetReportDesignerModel_Error');
        var developerMessage = `${errorStatus}An attempt to load the '${reportUrl}' report failed.
            Open the browser developer console to investigate the issue. Review the following help topic: `;
        if (this._options.developmentMode) {
            var message = $.fn.constructor('<span>').text(developerMessage);
            var link = $.fn.constructor('<a>')
                .attr('target', '_blank')
                .attr('rel', 'noopener noreferrer')
                .attr('href', helpLink)
                .text('Reporting Application Diagnostics');
            ShowMessage('', 'error', undefined, undefined, function () {
                return $.fn.constructor('<div>').append(message, link);
            });
            console.log(consoleMessage);
            if (jqXHR && jqXHR.responseText)
                console.log(jqXHR.responseText);
        }
        else {
            ShowMessage(clientMessage);
        }
    }
    _getDesignerModelRequest(reportUrl) {
        var self = this;
        var requestOptions = this._options.requestOptions;
        var getDesignerModelActionUrl = this._getServerActionUrl(requestOptions.host, requestOptions.getDesignerModelAction);
        var onError = (data, textStatus, jqXHR, getRequestDetails, errorThrown) => {
            self._showErrorInfo(jqXHR, getRequestDetails, errorThrown);
            if (self._callbacks && self._callbacks.designer && self._callbacks.designer.onServerError)
                self._callbacks.designer.onServerError({ jqXHR: jqXHR, textStatus: textStatus, data: data, getRequestDetails: getRequestDetails });
            if (errorThrown)
                throw errorThrown;
        };
        var getModel = ajaxSetup.sendRequest({
            url: getDesignerModelActionUrl,
            type: 'POST',
            data: {
                reportUrl,
                designerModelSettings: this._options.designerModelSettings
            }
        });
        var _deferredModel = $.Deferred();
        this._deferreds.push(_deferredModel);
        getModel.done(_deferredModel.resolve).fail(_deferredModel.reject);
        _deferredModel.done((result, textStatus, jqXHR) => {
            if (result.error) {
                return onError(result, textStatus, jqXHR, () => ({ url: getDesignerModelActionUrl, data: { reportUrl } }), result.error);
            }
            result.handlerUri = self._getServerActionUrl(requestOptions.host, result.handlerUri);
            result.viewerHandlerUri = self._getServerActionUrl(requestOptions.host, result.viewerHandlerUri);
            result.queryBuilderHandlerUri = self._getServerActionUrl(requestOptions.host, result.queryBuilderHandlerUri);
            self._initializationData(result);
        }).fail((jqXHR, textStatus, errorThrown) => {
            if (!jqXHR && !errorThrown)
                return;
            var localizationPromises = [];
            self._callbacks && self._callbacks.designer && self._callbacks.designer.customizeLocalization && self._callbacks.designer.customizeLocalization(localizationPromises);
            resolveFromPromises(localizationPromises, () => {
                onError({ error: errorThrown }, textStatus, jqXHR, () => ({ url: getDesignerModelActionUrl, data: { reportUrl } }), errorThrown);
            });
        });
    }
    dispose() {
        (this._deferreds || []).forEach((deferred) => {
            deferred.reject();
        });
        super.dispose();
    }
    applyBindings(element) {
        var self = this;
        var _$element = $.fn.constructor(element);
        _$element.addClass('dx-designer');
        this._createDisposeFunction(element);
        if (self._options.undoEngine) {
            self._applyBindings(self._options, _$element);
            return;
        }
        var applyBindingsFunc = (newData) => {
            if (this._model) {
                this._disposables.splice(this._disposables.indexOf(this._model), 1);
                ko.cleanNode(element.firstChild);
                this._model.dispose();
            }
            self._createModel(newData, element).done((model) => {
                this._model = model;
                self._applyBindings(model, _$element);
            });
        };
        this._disposables.push(self._initializationData.subscribe((newVal) => {
            applyBindingsFunc(newVal);
        }));
        if (self._options.requestOptions) {
            self._getLocalizationRequest().done((localization) => {
                localization && addCultureInfo(localization);
            }).always(() => {
                if (self._options.requestOptions.getDesignerModelAction) {
                    if (ko.isSubscribable(self._options.reportUrl)) {
                        this._disposables.push(self._options.reportUrl.subscribe((newVal) => self._getDesignerModelRequest(newVal)));
                    }
                    self._getDesignerModelRequest(ko.unwrap(self._options.reportUrl));
                }
                else {
                    applyBindingsFunc(self._initializationData());
                }
            });
        }
        else {
            applyBindingsFunc(self._initializationData());
        }
    }
}
const dxReportDesignerBindingName = 'dxReportDesigner';
export class DxReportDesigner extends DxAnalyticsComponentCommon {
    getBindingName() {
        return dxReportDesignerBindingName;
    }
}
registerBaseBinding(dxReportDesignerBindingName, '$data');
ko.bindingHandlers[dxReportDesignerBindingName] = {
    init: function (element, valueAccessor) {
        new JSReportDesignerBinding(ko.unwrap(valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};
