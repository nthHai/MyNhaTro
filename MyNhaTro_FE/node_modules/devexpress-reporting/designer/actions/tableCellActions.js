/**
* DevExpress HTML/JS Reporting (designer\actions\tableCellActions.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { deleteSelection, getLocalization } from '@devexpress/analytics-core/analytics-internal';
import * as ko from 'knockout';
import { XRTableCellSurface, XRTableCellViewModel } from '../controls/xrTableCell';
import { TableRowActions } from './tableRowActions';
export class TableCellActions extends TableRowActions {
    constructor(selection, onComponentAdded, isDisabled = () => false) {
        super(selection);
        super.initActions([
            {
                text: 'Insert Row Above',
                group: () => getLocalization('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => getLocalization('Insert Row Above', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove'),
                imageClassName: 'dxrd-image-actions-insert_row_above',
                imageTemplateName: 'dxrd-svg-actions-insert_row_above',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowAbove(); },
            }, {
                text: 'Insert Row Below',
                group: () => getLocalization('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => getLocalization('Insert Row Below', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow'),
                imageClassName: 'dxrd-image-actions-insert_row_below',
                imageTemplateName: 'dxrd-svg-actions-insert_row_below',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowBelow(); },
            }, {
                text: 'Delete Row',
                group: () => getLocalization('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => getLocalization('Delete Row', 'ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow'),
                imageClassName: 'dxrd-image-actions-delete_row',
                imageTemplateName: 'dxrd-svg-actions-delete_row',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteRow(); },
            }, {
                text: 'Insert Cell',
                group: () => getLocalization('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
                displayText: () => getLocalization('Insert Cell', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertCell'),
                imageClassName: 'dxrd-image-actions-insert_cell',
                imageTemplateName: 'dxrd-svg-actions-insert_cell',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertCell(); },
            }, {
                text: 'Delete Cell',
                group: () => getLocalization('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
                displayText: () => getLocalization('Delete Cell', 'ASPxReportsStringId.ReportDesigner_TableActions_DeleteCell'),
                imageClassName: 'dxrd-image-actions-delete_cell',
                imageTemplateName: 'dxrd-svg-actions-delete_cell',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteCell(); },
            }, {
                text: 'Insert Column To Left',
                group: () => getLocalization('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
                displayText: () => getLocalization('Insert Column To Left', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToLeft'),
                imageClassName: 'dxrd-image-actions-insert_column_to_left',
                imageTemplateName: 'dxrd-svg-actions-insert_column_to_left',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertColumn(false); },
            }, {
                text: 'Insert Column To Right',
                group: () => getLocalization('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
                displayText: () => getLocalization('Insert Column To Right', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToRight'),
                imageClassName: 'dxrd-image-actions-insert_column_to_right',
                imageTemplateName: 'dxrd-svg-actions-insert_column_to_right',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertColumn(true); },
            }, {
                text: 'Delete Column',
                group: () => getLocalization('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
                displayText: () => getLocalization('Delete Column', 'ASPxReportsStringId.ReportDesigner_TableActions_DeleteColumn'),
                imageClassName: 'dxrd-image-actions-delete_column',
                imageTemplateName: 'dxrd-svg-actions-delete_column',
                disabled: ko.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteColumn(); },
            }
        ]);
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
    }
    get _cell() {
        return this.selection.focused().getControlModel();
    }
    get _row() {
        return this._cell.parentModel();
    }
    get _table() {
        return this._row.parentModel();
    }
    get _cellSurface() {
        var cell = this.selection.focused();
        return cell instanceof XRTableCellSurface && cell || null;
    }
    insertCell() {
        this._row.insertCellCopy(this._cell, false, this.onComponentAdded);
    }
    deleteCell() {
        deleteSelection(this.selection);
    }
    deleteRow() {
        this.selection.initialize(this._cellSurface.parent);
        deleteSelection(this.selection);
    }
    insertColumn(isRight) {
        this._table.insertColumn(this._cell, isRight, this.onComponentAdded);
    }
    deleteColumn() {
        this._cellSurface.selectColumn(this.selection);
        deleteSelection(this.selection);
    }
    condition(context) {
        return context instanceof XRTableCellViewModel && !!this._cellSurface;
    }
}
