/**
* DevExpress HTML/JS Reporting (chart\components\_diagram.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { SerializableModel } from '@devexpress/analytics-core/analytics-elements';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { diagramMapper, diagramSerializationsInfo, panes, secondaryAxesX } from '../internal/meta/_diagram';
import { deserializeModelArray } from '../_utils';
import { SecondaryAxisViewModel } from './axis/_secondaryAxisViewModel';
import { AdditionalPaneViewModel } from './models/_additionalPane';
export class DiagramViewModel extends SerializableModel {
    constructor(model, serializer) {
        super(model, serializer, diagramSerializationsInfo);
    }
    static createDiagram(model, type, serializer = new ModelSerializer()) {
        var info = diagramMapper[type].info;
        var newDiagram = {
            getInfo: () => {
                return info;
            }
        };
        serializer.deserialize(newDiagram, $.extend(model, { '@TypeNameSerializable': diagramMapper[type].type }));
        if (info.filter(x => { return x.propertyName === secondaryAxesX.propertyName; }).length > 0) {
            var createAxes = (item, parent) => { return new SecondaryAxisViewModel(item, parent, serializer); };
            newDiagram.secondaryAxesX = deserializeModelArray(model && model.SecondaryAxesX, createAxes, SecondaryAxisViewModel.xPrefix);
            newDiagram.secondaryAxesY = deserializeModelArray(model && model.SecondaryAxesY, createAxes, SecondaryAxisViewModel.yPrefix);
        }
        if (info.filter(x => { return x.propertyName === panes.propertyName; }).length > 0) {
            newDiagram.panes = deserializeModelArray(model && model.Panes, (item, parent) => { return new AdditionalPaneViewModel(item, parent, serializer); }, AdditionalPaneViewModel.prefix);
        }
        return newDiagram;
    }
    static from(model, serializer) {
        return new DiagramViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, null, refs);
    }
}
export var diagram = { propertyName: 'diagram', modelName: 'Diagram', displayName: 'Diagram', from: (val) => { return ko.observable(val); }, toJsonObject: DiagramViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart.Diagram' };
