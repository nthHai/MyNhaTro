/**
* DevExpress HTML/JS Reporting (common\binding\eventGenerator.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { extend } from '@devexpress/analytics-core/analytics-internal';
import { loadMessages as analyticLoadMessages } from '@devexpress/analytics-core/analytics-localization';
import * as localization from 'devextreme/localization';
import { availableCultures, defaultCulture } from '../metadata';
import { CustomizeExportOptionsEventArgs } from './exportOptionsEventArgs';
export class EventGenerator {
    static generateCustomizeLocalizationCallback(fireEvent) {
        return function (localizationCallbacks) {
            fireEvent('CustomizeLocalization', {
                LoadMessages: (messages) => {
                    if (!messages)
                        return;
                    if (typeof messages.then === 'function') {
                        localizationCallbacks.push(messages);
                    }
                    else {
                        analyticLoadMessages(messages);
                    }
                },
                SetAvailableCultures: (customCultures) => {
                    var newCultures = {};
                    newCultures[defaultCulture] = availableCultures()[defaultCulture];
                    extend(newCultures, customCultures);
                    availableCultures(newCultures);
                },
                WidgetLocalization: localization
            });
        };
    }
    static generateDesignerEvents(fireEvent) {
        var customizeActionsEvent = { publicName: 'CustomizeMenuActions', privateName: 'customizeActions' };
        var reportTabClosingEvent = { publicName: 'ReportTabClosing', privateName: 'reportTabClosing' };
        var reportTabClosedEvent = { publicName: 'ReportTabClosed', privateName: 'reportTabClosed' };
        var customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        var customizeParameterLookUpSourceEvent = { publicName: 'CustomizeParameterLookUpSource', privateName: 'customizeParameterLookUpSource' };
        var exitDesignerEvent = { publicName: 'ExitDesigner', privateName: 'exitDesigner' };
        var reportSavingEvent = { publicName: 'ReportSaving', privateName: 'reportSaving' };
        var reportSavedEvent = { publicName: 'ReportSaved', privateName: 'reportSaved' };
        var reportOpeningEvent = { publicName: 'ReportOpening', privateName: 'reportOpening' };
        var reportOpenedEvent = { publicName: 'ReportOpened', privateName: 'reportOpened' };
        var tabChangedEvent = { publicName: 'TabChanged', privateName: 'tabChanged' };
        var onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        var customizePartsEvent = { publicName: 'CustomizeElements', privateName: 'customizeParts' };
        var componentAddedEvent = { publicName: 'ComponentAdded', privateName: 'componentAdded' };
        var customizeSaveDialogEvent = { publicName: 'CustomizeSaveDialog', privateName: 'customizeSaveDialog' };
        var customizeSaveAsDialogEvent = { publicName: 'CustomizeSaveAsDialog', privateName: 'customizeSaveAsDialog' };
        var customizeOpenDialogEvent = { publicName: 'CustomizeOpenDialog', privateName: 'customizeOpenDialog' };
        var customizeToolboxEvent = { publicName: 'CustomizeToolbox', privateName: 'customizeToolbox' };
        var customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
        var customizeFieldListActionsEvent = { publicName: 'CustomizeFieldListActions', privateName: 'customizeFieldListActions' };
        var onInitializingEvent = { publicName: 'OnInitializing', privateName: 'onInitializing' };
        var beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
        var customizeWizardEvent = { publicName: 'CustomizeWizard', privateName: 'customizeWizard' };
        onInitializingEvent['callback'] = function onInitializing() {
            fireEvent(onInitializingEvent.publicName);
        };
        customizeLocalizationEvent['callback'] = EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        beforeRenderEvent['callback'] = function beforeRender(designerModel) {
            fireEvent(beforeRenderEvent.publicName, designerModel);
        };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, {
                parameter: parameter,
                info: info
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            var arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        exitDesignerEvent['callback'] = function exitDesigner() {
            fireEvent(exitDesignerEvent.publicName);
        };
        reportSavingEvent['callback'] = function reportSaving(args) {
            var arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportSavingEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        reportSavedEvent['callback'] = function reportSaved(args) {
            var arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportSavedEvent.publicName, arg);
        };
        reportOpenedEvent['callback'] = function reportOpened(args) {
            var arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportOpenedEvent.publicName, arg);
        };
        reportOpeningEvent['callback'] = function reportOpening(args) {
            var arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportOpeningEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        tabChangedEvent['callback'] = function tabChanged(tab) {
            fireEvent(tabChangedEvent.publicName, {
                Tab: tab
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        componentAddedEvent['callback'] = function componentAdded(args) {
            fireEvent(componentAddedEvent.publicName, { Model: args.model, Parent: args.parent });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: id => {
                    return id
                        ? parts.filter(item => id === item.id)[0]
                        : null;
                }
            });
        };
        customizeSaveDialogEvent['callback'] = function customizeSaveDialog(popup) {
            fireEvent(customizeSaveDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeSaveAsDialogEvent['callback'] = function customizeSaveAsDialog(popup) {
            fireEvent(customizeSaveAsDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeOpenDialogEvent['callback'] = function customizeOpenDialog(popup) {
            fireEvent(customizeOpenDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeToolboxEvent['callback'] = function customizeToolbox(controlsFactory) {
            fireEvent(customizeToolboxEvent.publicName, {
                ControlsFactory: controlsFactory
            });
        };
        customizeFieldListActionsEvent['callback'] = function customizeFieldListActions(item, actions) {
            fireEvent(customizeFieldListActionsEvent.publicName, {
                Item: item,
                Actions: actions
            });
        };
        customizeWizardEvent['callback'] = function customizeWizard(type, wizard) {
            fireEvent(customizeWizardEvent.publicName, {
                Type: type,
                Wizard: wizard
            });
        };
        reportTabClosingEvent['callback'] = function reportTabClosing(tab, deffered) {
            var args = {
                Tab: tab,
                ReadyToClose: deffered,
                Handled: false
            };
            fireEvent(reportTabClosingEvent.publicName, args);
            return args.Handled;
        };
        reportTabClosedEvent['callback'] = function reportTabClosed(tab) {
            fireEvent(reportTabClosedEvent.publicName, {
                Tab: tab
            });
        };
        return [
            customizeActionsEvent,
            reportTabClosingEvent,
            reportTabClosedEvent,
            customizeParameterEditorsEvent,
            customizeParameterLookUpSourceEvent,
            exitDesignerEvent,
            reportSavingEvent,
            reportSavedEvent,
            reportOpeningEvent,
            reportOpenedEvent,
            tabChangedEvent,
            onServerErrorEvent,
            customizePartsEvent,
            componentAddedEvent,
            customizeSaveDialogEvent,
            customizeSaveAsDialogEvent,
            customizeOpenDialogEvent,
            customizeToolboxEvent,
            customizeLocalizationEvent,
            customizeFieldListActionsEvent,
            onInitializingEvent,
            beforeRenderEvent,
            customizeWizardEvent
        ];
    }
    static generatePreviewEvents(fireEvent, prefix) {
        function generateBrickMethods(brick) {
            return {
                GetBrickText: function () { return brick() && brick().text(); },
                GetBrickValue: function (key = 'value') {
                    var contentValue = brick() && brick().content && brick().content.filter(function (x) { return x.Key === key; })[0];
                    return contentValue && contentValue.Value;
                },
            };
        }
        var previewClickEvent = { publicName: 'PreviewClick', privateName: 'previewClick' };
        var documentReadyEvent = { publicName: [prefix, 'DocumentReady'].join(''), privateName: 'documentReady' };
        var editingFieldChangedEvent = { publicName: [prefix, 'EditingFieldChanged'].join(''), privateName: 'editingFieldChanged' };
        var parametersSubmittedEvent = { publicName: [prefix, 'ParametersSubmitted'].join(''), privateName: 'parametersSubmitted' };
        var parametersInitializedEvent = { publicName: [prefix, 'ParametersInitialized'].join(''), privateName: 'parametersInitialized' };
        var parametersResetEvent = { publicName: [prefix, 'ParametersReset'].join(''), privateName: 'parametersReset' };
        var customizeParameterLookUpSourceEvent = { publicName: 'CustomizeParameterLookUpSource', privateName: 'customizeParameterLookUpSource' };
        var customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        var customizeActionsEvent = { publicName: [prefix, 'CustomizeMenuActions'].join(''), privateName: 'customizeActions' };
        var customizePartsEvent = { publicName: [prefix, 'CustomizeElements'].join(''), privateName: 'customizeParts' };
        var customizeExportOptionsEvent = { publicName: [prefix, 'CustomizeExportOptions'].join(''), privateName: 'customizeExportOptions' };
        var onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        var onExportEvent = { publicName: [prefix, 'OnExport'].join(''), privateName: 'onExport' };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, { parameter, info });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: (templateId) => {
                    return templateId ? parts.filter(function (item) { return templateId === item.templateName; })[0] : null;
                }
            });
        };
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            var arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        previewClickEvent['callback'] = function previewClick(pageIndex, brick, defaultHandler) {
            var arg = Object.assign(Object.assign({ PageIndex: pageIndex, Brick: brick, DefaultHandler: defaultHandler }, generateBrickMethods(() => brick)), { Handled: false });
            fireEvent(previewClickEvent.publicName, arg);
            return arg.Handled;
        };
        parametersResetEvent['callback'] = function parametersReset(model, parameters) {
            fireEvent(parametersResetEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersSubmittedEvent['callback'] = function parametersSubmitted(model, parameters) {
            fireEvent(parametersSubmittedEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersInitializedEvent['callback'] = function parametersInitialized(model, info, submit, shouldRequestParameters) {
            fireEvent(parametersInitializedEvent.publicName, {
                ParametersModel: model,
                ActualParametersInfo: info,
                Submit: submit,
                ShouldRequestParameters: shouldRequestParameters
            });
        };
        editingFieldChangedEvent['callback'] = function editingFieldChanged(field, oldValue, newValue) {
            var arg = Object.assign({ Field: field, OldValue: oldValue, NewValue: newValue }, generateBrickMethods(() => field.brick));
            fireEvent(editingFieldChangedEvent.publicName, arg);
            return arg.NewValue;
        };
        documentReadyEvent['callback'] = function documentReady(documentId, reportId, pageCount) {
            fireEvent(documentReadyEvent.publicName, {
                ReportId: reportId,
                DocumentId: documentId,
                PageCount: pageCount
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        onExportEvent['callback'] = function onExport(args) {
            fireEvent(onExportEvent.publicName, args);
        };
        customizeExportOptionsEvent['callback'] = function customizeExportOptions(options) {
            var arg = new CustomizeExportOptionsEventArgs(options);
            fireEvent(customizeExportOptionsEvent.publicName, arg);
        };
        var result = [
            previewClickEvent,
            documentReadyEvent,
            editingFieldChangedEvent,
            parametersSubmittedEvent,
            parametersInitializedEvent,
            parametersResetEvent,
            customizeParameterLookUpSourceEvent,
            customizeParameterEditorsEvent,
            customizeActionsEvent,
            customizePartsEvent,
            customizeExportOptionsEvent,
            onServerErrorEvent,
            onExportEvent,
        ];
        if (!prefix) {
            var onInitializingEvent = { publicName: 'OnInitializing', privateName: 'onInitializing' };
            onInitializingEvent['callback'] = function onInitializing() {
                fireEvent(onInitializingEvent.publicName);
            };
            result.push(onInitializingEvent);
            var beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
            beforeRenderEvent['callback'] = function beforeRender(designerModel) {
                fireEvent(beforeRenderEvent.publicName, designerModel);
            };
            result.push(beforeRenderEvent);
            var customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
            customizeLocalizationEvent['callback'] = EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
            result.push(customizeLocalizationEvent);
        }
        return result;
    }
}
