/**
* DevExpress Analytics (property-grid\internal\_addon.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../../serializer/utils';
export class EditorAddOn extends Disposable {
    constructor(editor, popupService) {
        super();
        this.templateName = null;
        this._editor = editor;
        this._popupService = popupService;
        this._disposables.push(this._actions = ko.pureComputed(() => {
            return (editor.getPopupServiceActions() || []).filter(x => this.actionFilter(x));
        }));
        this._disposables.push(this.visible = ko.pureComputed(() => {
            return this._actions().length > 0;
        }));
        this._disposables.push(this.hint = ko.pureComputed(() => {
            var acc = [];
            this._actions().forEach(x => this._getTitles(x, [], acc));
            return acc.join('\n');
        }));
        this._disposables.push(this.editorMenuButtonCss = ko.pureComputed(() => {
            var editorModel = editor._model();
            return editorModel && editorModel['getActionClassName'] && editorModel['getActionClassName'](editor.name) || '';
        }));
        this._disposables.push(this.imageTemplateName = ko.pureComputed(() => {
            var editorModel = editor._model();
            return editorModel && editorModel['getMenuBoxTemplate'] && editorModel['getMenuBoxTemplate'](editor.name) || '';
        }));
    }
    _updateActions(actions) {
        this._popupService.actions([]);
        if (!actions || !actions.length)
            return;
        actions
            .sort((x, y) => (x.title < y.title ? -1 : x.title > y.title ? 1 : 0))
            .sort((x, y) => (x.weight || 0) - (y.weight || 0));
        this._wrapVisibleItems(actions, this._editor.name).forEach(visibleItem => {
            this._popupService.actions.push(visibleItem);
        });
    }
    _getTitles(item, currentItemPath = [], acc = []) {
        var title = ko.unwrap(item.title);
        (item.items || []).forEach(x => {
            var nextPath = title ? currentItemPath.concat([title]) : currentItemPath;
            this._getTitles(x, nextPath, acc);
        });
        var hint = ko.unwrap(item.hint);
        if (!hint || !title)
            return;
        var resultTitle = currentItemPath.concat([title]).join('. ');
        acc.push(resultTitle + ':\n' + hint + '\n');
        return acc;
    }
    _wrapVisibleItems(actions, editorName) {
        if (!actions)
            return undefined;
        return actions.map(modelAction => this._wrapActionClick(modelAction, editorName)).filter(x => !!x);
    }
    _wrapActionClick(modelAction, editorName) {
        if (this.actionFilter(modelAction)) {
            return {
                id: modelAction.id,
                items: this._wrapVisibleItems(modelAction.items, editorName),
                innerTemplate: modelAction.innerTemplate,
                itemTemplate: modelAction.itemTemplate,
                action: () => {
                    modelAction.action(editorName);
                    this._popupService.visible(false);
                },
                title: modelAction.title,
                hint: modelAction.hint,
                visible: () => { return true; }
            };
        }
        else {
            return null;
        }
    }
    showPopup(_, element) {
        this._popupService.title(this._editor.displayName());
        this._updateActions(this._editor.getPopupServiceActions());
        this._popupService.target(element);
        this._popupService.visible(true);
    }
    actionFilter(action) {
        return action.visible(this._editor.name);
    }
}
