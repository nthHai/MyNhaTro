/**
* DevExpress Analytics (property-grid\propertygrid.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../serializer/utils';
import { defaultAccessibilityProvider } from './_propertiesAccessibilityProvider';
import { Editor } from './widgets/editor';
import { compareEditorInfo, findMatchesInString } from './widgets/internal/_utils';
import { EditorAddOn } from './internal/_addon';
import config from 'devextreme/core/config';
import { isEmptyObject } from '../serializer/_utils';
export class ObjectProperties extends Disposable {
    constructor(viewModel, editorsInfo, level = 0, parentDisabled = ko.observable(false), recreateEditors = false, textToSearch, popupService) {
        super();
        this._viewModelSubscription = null;
        this._infoSubscription = null;
        this._getInfoComputed = null;
        this._accessibilityProvider = defaultAccessibilityProvider;
        this.level = 0;
        this.rtl = config()['rtlEnabled'];
        if (popupService) {
            this.createEditorAddOn = (editor) => {
                var editorAddOn = new EditorAddOn(editor, this.popupService);
                editor._disposables.push(editorAddOn);
                return {
                    templateName: 'dx-editor-addons',
                    data: [editorAddOn]
                };
            };
            this.popupService = popupService;
        }
        this._editors = ko.observableArray([]).extend({ deferred: true });
        this.level = level;
        this._parentDisabled = parentDisabled;
        this._textToSearch = textToSearch;
        this._disposables.push(this.visible = ko.computed(() => {
            return this._editors().some(editor => editor.visible());
        }));
        this._viewModelSubscription = viewModel.subscribe((newVal) => {
            this._infoSubscription && this._infoSubscription.dispose();
            this._getInfoComputed && this._getInfoComputed.dispose();
            this._update(newVal, editorsInfo, recreateEditors);
        });
        this._update(viewModel(), editorsInfo, recreateEditors);
    }
    update(viewModel) {
        if (viewModel) {
            this._editors().forEach((editor) => {
                editor.update(viewModel);
            });
        }
    }
    _cleanEditorsSubscriptions() {
        this._editors().forEach((editor) => {
            editor.dispose();
            Object.keys(editor).forEach(name => {
                if (ko.isComputed(editor[name])) {
                    editor[name].dispose();
                }
            });
        });
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this._editors);
        this.resetObservableArray(this._editors);
        this.cleanSubscriptions();
    }
    cleanSubscriptions() {
        this._infoSubscription && this._infoSubscription.dispose();
        this._getInfoComputed && this._getInfoComputed.dispose();
        this._viewModelSubscription && this._viewModelSubscription.dispose();
        this._cleanEditorsSubscriptions();
    }
    cleanEditors() {
        this._cleanEditorsSubscriptions();
        this.resetObservableArray(this._editors);
    }
    findEditorByInfo(serializationInfo) {
        return this._editors().filter(editor => editor.name === serializationInfo.propertyName && compareEditorInfo(editor.info().editor, serializationInfo.editor))[0];
    }
    createEditor(modelPropertyInfo) {
        var editorType = modelPropertyInfo.editor && modelPropertyInfo.editor.editorType || Editor;
        var editor = new editorType(modelPropertyInfo, this.level, this._parentDisabled, this._textToSearch, this.popupService);
        editor.assingParent(this._parent);
        editor.registerAccessibilityProvider(this._accessibilityProvider);
        return editor;
    }
    createEditors(serializationInfo) {
        var self = this;
        return (serializationInfo || [])
            .filter(info => { return !!info.editor && !this.findEditorByInfo(info); })
            .map(info => { return this.createEditor(info); });
    }
    registerAccessibilityProvider(accessibilityProvider) {
        this._accessibilityProvider = accessibilityProvider;
        this._editors().forEach((editor) => {
            editor.registerAccessibilityProvider(accessibilityProvider);
        });
    }
    assignParent(parent) {
        this._parent = parent;
        this._editors().forEach((editor) => {
            editor.assingParent(parent);
        });
    }
    _createEditors(serializationInfo) {
        if (!serializationInfo || serializationInfo.length === 0)
            return false;
        var newEditors = this.createEditors(serializationInfo);
        if (!newEditors.length)
            return;
        var currentEditors = this._editors();
        if (currentEditors.length === 0) {
            currentEditors = newEditors;
        }
        else {
            newEditors.forEach((editor) => {
                var existEditorIndex = currentEditors.map(_editor => _editor.name).indexOf(editor.name);
                if (existEditorIndex !== -1)
                    currentEditors.splice(existEditorIndex, 0, editor);
                else
                    currentEditors.push(editor);
            });
        }
        this._editors(currentEditors);
    }
    _update(viewModel, editorsInfo, recreateEditors) {
        if (recreateEditors) {
            this.cleanEditors();
        }
        this._getInfoComputed = ko.computed(() => {
            return (editorsInfo && editorsInfo.editors && ko.unwrap(editorsInfo.editors))
                || (viewModel && viewModel['getInfo'] && viewModel['getInfo']());
        });
        this._infoSubscription = this._getInfoComputed.subscribe((newInfo) => {
            if (recreateEditors) {
                this.cleanEditors();
            }
            this._recreateEditors(viewModel, newInfo);
        });
        this._recreateEditors(viewModel, this._getInfoComputed());
    }
    _recreateEditors(viewModel, serializationInfo) {
        this._createEditors(serializationInfo);
        this.update(viewModel);
    }
    getEditors() {
        return this._editors();
    }
}
export class PropertyGridEditor extends Editor {
    constructor(info, level, parentDisabled, textToSearch, _popupService) {
        super(info, level, parentDisabled, textToSearch);
        this._popupService = _popupService;
        this.editorCreated = ko.observable(false);
        this.viewmodel = this.createObjectProperties();
        if (!isEmptyObject(this.viewmodel)) {
            this.viewmodel.assignParent(this);
        }
        this._disposables.push(this.viewmodel);
        var subscription = this.collapsed.subscribe((newVal) => {
            if (!newVal) {
                subscription.dispose();
                this.editorCreated(true);
            }
        });
        this._disposables.push(subscription);
        if (textToSearch) {
            this._disposables.push(this.visibleByName = ko.computed(() => {
                var visible = !!findMatchesInString(this.displayName(), textToSearch());
                if (!isEmptyObject(this.viewmodel)) {
                    this.viewmodel._editors().forEach((editor) => editor.isParentSearched(visible));
                }
                return visible;
            }));
            this.isSearchedProperty['dispose'] && this.isSearchedProperty['dispose']();
            this._disposables.push(this.isSearchedProperty = ko.computed(() => {
                if (this.visibleByName())
                    return true;
                var visibleByEditors = this.viewmodel.visible();
                visibleByEditors && this.collapsed(false);
                return visibleByEditors;
            }));
        }
    }
    createObjectProperties() {
        return new ObjectProperties(this.value, { editors: ko.computed(() => { var _a, _b; return ((_a = this.value()) === null || _a === void 0 ? void 0 : _a.getInfo) && ((_b = this.value()) === null || _b === void 0 ? void 0 : _b.getInfo()) || this.info().info; }) }, this.level + 1, this.disabled, undefined, this.textToSearch, this._popupService);
    }
    registerAccessibilityProvider(accessibilityProvider) {
        super.registerAccessibilityProvider(accessibilityProvider);
        this.viewmodel.registerAccessibilityProvider(accessibilityProvider);
    }
}
export class PropertyGridEditorFlat extends PropertyGridEditor {
    createObjectProperties() {
        this.collapsed(false);
        this.editorCreated(true);
        this.level = -1;
        return super.createObjectProperties();
    }
}
