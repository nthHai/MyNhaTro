/**
* DevExpress Analytics (property-grid\widgets\collectioneditor\_editor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../../../serializer/utils';
import { propertiesGridEditorsPaddingLeft } from '../internal/_internal';
import { getLocalization } from '../../localization/localization_utils';
import { addDisposeCallback } from '../../../serializer/_internal';
import { ListKeyboardHelper } from '../../../accessibility/_listKeyboardHelper';
export class CollectionItemWrapper extends Disposable {
    constructor(editor, array, index, displayNameField = '') {
        super();
        this.collapsed = ko.observable(true);
        this.selected = ko.observable(false);
        this._disposables.push(this.value = ko.computed({
            read: () => {
                return array.peek()[index()];
            },
            write: (val) => {
                array.peek()[index()] = val;
            }
        }));
        this.editor = editor;
        this.index = index;
        this._disposables.push(this.name = ko.computed(() => {
            return displayNameField && this.value() && this.value()[displayNameField] ? ko.unwrap(this.value()[displayNameField]) : index();
        }));
    }
}
export class CollectionEditorViewModel extends Disposable {
    constructor(options, disabled = ko.observable(false)) {
        super();
        this.buttonMap = {
            'delete': { text: 'Delete', localizationId: 'AnalyticsCoreStringId.Cmd_Delete' },
            'add': { text: 'Add', localizationId: 'DataAccessUIStringId.Button_Add' },
            'down': { text: 'Move Down', localizationId: 'AnalyticsCoreStringId.Cmd_MoveDown' },
            'up': { text: 'Move Up', localizationId: 'AnalyticsCoreStringId.Cmd_MoveUp' }
        };
        this.selectedIndex = ko.observable(null);
        this.alwaysShow = ko.observable(false);
        this.collapsed = ko.observable(options.collapsed !== false);
        var addHandler = () => (options.addHandler || options.info && options.info() && options.info()['addHandler']).call(this);
        var removeHandler = options.removeHandler;
        var hideButtons = options.hideButtons || options.info && options.info() && options.info()['hideButtons'];
        this._textEmptyArray = options.textEmptyArray || { text: 'To create an item click the Add button.', localizationId: 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureParametersEmpty' };
        this.displayPropertyName = options.info && options.info() && options.info()['displayPropertyName'] || options.displayName;
        this._disposables.push(this.showButtons = ko.computed(() => {
            return !ko.unwrap(hideButtons) && !this.collapsed();
        }));
        this.showScroll = !!options.showScroll;
        var _isDisabled = (selectedIndex, name) => {
            if (options.isDisabledButton) {
                return options.isDisabledButton(selectedIndex, name);
            }
            else if (name === 'delete') {
                return selectedIndex === null;
            }
            else if (name === 'add') {
                return false;
            }
            else if (name === 'up') {
                return selectedIndex === null || selectedIndex === 0;
            }
            else if (name === 'down') {
                return selectedIndex === null || selectedIndex === (this.values().length - 1);
            }
        };
        this.isDisabledButton = (name) => {
            return disabled() || _isDisabled(this.selectedIndex(), name);
        };
        this.isVisibleButton = (name) => {
            if (!this.showButtons()) {
                return false;
            }
            else
                return options.isVisibleButton ? options.isVisibleButton(this.selectedIndex(), name) : true;
        };
        this.padding = options.level !== void 0 ? options.level * propertiesGridEditorsPaddingLeft() : 0;
        this.displayName = (options.info && options.info()) ? getLocalization(options.info().displayName, options.info().localizationId) : options.displayName;
        this.options = options;
        if (!options.displayName) {
            this.collapsed(false);
            this.alwaysShow(true);
        }
        if (options.alwaysShow)
            this.alwaysShow(true);
        this._disposables.push(this.values = ko.computed(() => {
            this._timeoutItemRendered && clearTimeout(this._timeoutItemRendered);
            this._timeoutItemRendered = setTimeout(() => {
                this.listKeyboardHelper && this.listKeyboardHelper.initialize();
            }, 100);
            return ko.unwrap(options.values());
        }));
        var selectedItem = ko.unwrap(options.selectedItem);
        if (selectedItem) {
            this._setSelectedIndex(selectedItem);
            this._disposables.push(options.selectedItem.subscribe((newVal) => {
                this._setSelectedIndex(newVal);
            }));
        }
        this.add = (model) => {
            model.event.stopPropagation();
            options.undoEngine && options.undoEngine().start();
            var item = addHandler();
            if (!item)
                return;
            var index = options.values().push(item);
            options.undoEngine && options.undoEngine().end();
            if (options.selectedItem) {
                this.select({ index: () => index - 1 });
            }
        };
        this.up = (model) => {
            this._move(options.values(), -1);
            model.event.stopPropagation();
        };
        this.down = (model) => {
            this._move(options.values(), 1);
            model.event.stopPropagation();
        };
        this.remove = (model) => {
            model.event.stopPropagation();
            if (this.selectedIndex() < 0)
                return;
            if (removeHandler) {
                options.undoEngine && options.undoEngine().start();
                var selectedItem = options.values()()[this.selectedIndex()];
                removeHandler(selectedItem);
                options.undoEngine && options.undoEngine().end();
            }
            else {
                options.values().splice(this.selectedIndex(), 1);
            }
            var valuesCount = options.values()().length;
            if (valuesCount > 0) {
                this.select({
                    index: () => this.selectedIndex() >= valuesCount ? valuesCount - 1 : this.selectedIndex()
                }, true);
            }
            else {
                this.select({ index: () => null }, true);
            }
        };
        this.select = (model, force = false) => {
            if (this.selectedIndex() === model.index() && !force)
                return;
            this.selectedIndex(model.index());
            if (options.selectedItem) {
                options.selectedItem(this.selectedIndex() !== null ? this.values()[this.selectedIndex()] : null);
            }
        };
        this.disabled = disabled;
        this.listKeyboardHelper = new ListKeyboardHelper();
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    _move(array, offset) {
        if (this.selectedIndex() >= 0) {
            var old_index = this.selectedIndex(), new_index = old_index + offset;
            if ((new_index >= array().length) || (new_index < 0)) {
                return;
            }
            array.splice(new_index, 0, array.splice(old_index, 1)[0]);
            this.selectedIndex(new_index);
        }
    }
    _setSelectedIndex(selectedItem) {
        var index = this.values().indexOf(selectedItem);
        this.selectedIndex(index === -1 ? null : index);
    }
    getDisplayTextButton(key) {
        return getLocalization(this.buttonMap[key].text, this.buttonMap[key].localizationId);
    }
    getDisplayTextEmptyArray() {
        return getLocalization(this._textEmptyArray.text, this._textEmptyArray.localizationId);
    }
    createCollectionItemWrapper(grandfather, index, element) {
        var wrapper = new CollectionItemWrapper(grandfather, this.values, index, this.displayPropertyName);
        addDisposeCallback(element, () => wrapper.dispose());
        return wrapper;
    }
}
