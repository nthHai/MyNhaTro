/**
* DevExpress Analytics (property-grid\widgets\collectioneditor\_bindings.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import * as $ from 'jquery';
import { CollectionEditorViewModel } from './_editor';
import { addDisposeCallback } from '../../../serializer/_internal';
import { getTemplate } from '../templateUtils';
ko.bindingHandlers['dxCollectionEditor'] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var values = valueAccessor(), gridViewModel = new CollectionEditorViewModel(values, viewModel.disabled), templateHtml = getTemplate(values.editorTemplate || '#dx-collectioneditor'), $templateHtml = $.fn.constructor(templateHtml), itemTemplateName = values.info && values.info() && values.info()['template'] || values.template;
        if (itemTemplateName) {
            var itemTemplateHtml = getTemplate(itemTemplateName);
            $templateHtml.find('.dx-collection-item').append($.fn.constructor(itemTemplateHtml));
        }
        else {
            $templateHtml.find('.dx-collection-item').append($.fn.constructor(element).children());
        }
        var $element = $.fn.constructor(element).append($templateHtml);
        var childContext = bindingContext.createChildContext(gridViewModel);
        ko.applyBindings(childContext, $element.children()[0]);
        addDisposeCallback(element, () => gridViewModel.dispose());
        return { controlsDescendantBindings: true };
    }
};
