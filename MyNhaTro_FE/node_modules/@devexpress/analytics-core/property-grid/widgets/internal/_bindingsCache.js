/**
* DevExpress Analytics (property-grid\widgets\internal\_bindingsCache.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import config from 'devextreme/core/config';
import * as ko from 'knockout';
var cache = {};
function createBaseFunction(controlName, optionsName) {
    return function ($context, $index) {
        var obj = {};
        obj[controlName] = function () {
            if (optionsName === '$data')
                return $context.$data;
            return optionsName === undefined ? undefined : $context.$data[optionsName];
        };
        return obj;
    };
}
export function registerBaseBinding(bindingName, optionsName) {
    addToBindingsCache(!optionsName ? bindingName : `${bindingName}: ${optionsName}`, createBaseFunction(bindingName, optionsName));
}
export function addToBindingsCache(key, value) {
    cache[key] = value;
}
function getFromCache(key) {
    return cache[key];
}
registerBaseBinding('svgAttrs');
registerBaseBinding('dxButtonWithTemplate', 'options');
registerBaseBinding('dxButton', 'options');
registerBaseBinding('dxCheckBox', 'options');
registerBaseBinding('dxToolbarBase', 'options');
registerBaseBinding('dxToolbar', 'options');
registerBaseBinding('treelist', 'options');
addToBindingsCache('template: \'dxrd-designer\'', function ($context, $element) {
    return { 'template': function () { return 'dxrd-designer'; } };
});
var currentParseBindingsString = ko.bindingProvider.prototype.parseBindingsString;
ko.utils.extend(ko.bindingProvider.prototype, {
    'parseBindingsString': function (bindingsString, bindingContext, node, options) {
        try {
            var func = getFromCache(bindingsString.trim());
            if (func)
                return func(bindingContext, node);
            return currentParseBindingsString.call(ko.bindingProvider.instance, bindingsString, bindingContext, node, options);
        }
        catch (ex) {
            ex.message = 'Unable to parse bindings.\nBindings value: ' + bindingsString + '\nMessage: ' + ex.message;
            throw ex;
        }
    }
});
var optionsParser = config()['optionsParser'];
config({
    optionsParser: function (optionsString) {
        var func = getFromCache(optionsString.trim());
        if (func)
            return func();
        return optionsParser(optionsString);
    }
});
