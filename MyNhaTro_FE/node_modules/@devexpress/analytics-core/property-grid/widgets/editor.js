/**
* DevExpress Analytics (property-grid\widgets\editor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import * as $ from 'jquery';
import { Disposable } from '../../serializer/utils';
import { findMatchesInString, compareEditorInfo } from './internal/_utils';
import { defaultAccessibilityProvider } from '../_propertiesAccessibilityProvider';
import { EditorValidator } from './editorValidator';
import { getLocalization } from '../localization/localization_utils';
import { propertiesGridEditorsPaddingLeft } from './internal/_internal';
import { editorTemplates } from './editorsInfo';
import config from 'devextreme/core/config';
import { extend } from '../../serializer/_utils';
import { replaceInvalidSymbols } from '../../core/internal/_validation';
import { roundingXDecimals } from '../../core/utils/_units';
export class Editor extends Disposable {
    constructor(modelPropertyInfo, level, parentDisabled = ko.observable(false), textToSearch = undefined) {
        super();
        this._model = ko.observable();
        this._parent = ko.observable(null);
        this.isSearchedProperty = ko.observable(true);
        this.isParentSearched = ko.observable(false);
        this.rtl = config().rtlEnabled;
        this._accessibilityProvider = ko.observable(defaultAccessibilityProvider);
        this._validator = new EditorValidator(this);
        this._cachedValue = undefined;
        this.isEditorSelected = ko.observable(false);
        this.isRequired = false;
        this.isRendered = ko.observable(false);
        this.collapsed = ko.observable(true);
        this.info = ko.observable(modelPropertyInfo);
        this._disposables.push(this.displayName = ko.computed({
            read: () => {
                var info = this.info();
                return info && getLocalization(info.displayName, info['localizationId']);
            },
            write: (value) => { }
        }));
        if (textToSearch) {
            this.textToSearch = textToSearch;
            this._disposables.push(this.isSearchedProperty = ko.computed(() => {
                return this.isParentSearched() || !!findMatchesInString(this.displayName(), textToSearch());
            }));
        }
        this.padding = this._setPadding(this.rtl ? 'right' : 'left', level * propertiesGridEditorsPaddingLeft());
        var defaultValue = ko.observable(null), propertyName = modelPropertyInfo.propertyName;
        this._disposables.push(this._editorOptions = ko.pureComputed(() => this.info().editorOptions));
        this.validatorOptions = modelPropertyInfo.validatorOptions;
        this.isRequired = modelPropertyInfo.isRequired;
        if (modelPropertyInfo.defaultVal !== undefined) {
            defaultValue = ko.observable(modelPropertyInfo.defaultVal);
        }
        if (modelPropertyInfo.from) {
            defaultValue = modelPropertyInfo.from(modelPropertyInfo.defaultVal);
        }
        if (modelPropertyInfo.array) {
            defaultValue = ko.observableArray();
        }
        this._disposables.push(this.values = ko.computed(() => {
            var _values = this.info().valueStore || this.info().valuesArray;
            if (_values) {
                return _values;
            }
            _values = ko.unwrap(this.info().values);
            if (_values) {
                return $.map(_values, (displayValue, value) => {
                    return { value: value, displayValue: displayValue };
                });
            }
        }));
        this.level = level;
        this._init(modelPropertyInfo.editor, defaultValue, propertyName);
        this._disposables.push(this.disabled = ko.computed(() => {
            return parentDisabled() || this._accessibilityProvider() && this._accessibilityProvider().isPropertyDisabled(this);
        }));
        this._disposables.push(this.visible = ko.computed(() => {
            return this.isSearchedProperty() && this._accessibilityProvider() && this._accessibilityProvider().isPropertyVisible(this);
        }));
        this._disposables.push(this.isPropertyModified = ko.computed(() => {
            return !!(this._model() && this._model().isPropertyModified && this._model().isPropertyModified(this.name));
        }));
        this._disposables.push(this.isPropertyHighlighted = ko.pureComputed(() => {
            if (this._shouldSkipHighlighting(this.name))
                return false;
            var controlModel = this._model();
            return !!(controlModel && controlModel.isPropertyHighlighted && controlModel.isPropertyHighlighted(this.name));
        }));
    }
    _setPadding(position, value) {
        var obj = {};
        obj['padding-' + position] = value;
        return obj;
    }
    dispose() {
        this._validator && this._validator.dispose();
        this._validator = null;
        super.dispose();
        this._cachedValue = null;
        this._model(null);
    }
    _shouldSkipHighlighting(propertyName) {
        return this.isComplexEditor;
    }
    _assignValue(modelValue, model, newValue, name) {
        if (ko.isObservable(modelValue)) {
            modelValue(newValue);
        }
        else {
            model[name] = newValue;
        }
    }
    _roundTwoDesemialsForUnitProperties(value, model, propertyName) {
        var properties = model && model['constructor'] && model['constructor'].unitProperties;
        if (!properties || properties.indexOf(propertyName) === -1)
            return value;
        return roundingXDecimals(value);
    }
    _init(editorTemplate, value, name) {
        editorTemplate = editorTemplate || editorTemplates.getEditor('text');
        this.templateName = editorTemplate.header;
        this.contentTemplateName = editorTemplate.content;
        this._cachedValue = undefined;
        this._disposables.push(this.value = ko.computed({
            read: () => {
                var model = this._model();
                if (!model && this._cachedValue) {
                    return this._cachedValue;
                }
                var modelValue = model && model[name] !== undefined ? model[name] : value;
                if (ko.isObservable(modelValue) && !modelValue['push']) {
                    var hasValueInModel = modelValue() !== undefined && modelValue() !== null;
                    this._cachedValue = hasValueInModel ? this._roundTwoDesemialsForUnitProperties(modelValue(), model, name) : this.defaultValue;
                    return this._cachedValue;
                }
                else {
                    this._cachedValue = modelValue;
                    return this._cachedValue;
                }
            },
            write: (newValue) => {
                var model = this._model();
                if (!model) {
                    return;
                }
                var modelValue = model[name];
                this._validator.assignWithValidation(newValue, () => {
                    this._assignValue(modelValue, model, newValue, name);
                });
            }
        }));
        this.name = name;
        this.editorTemplate = editorTemplate && editorTemplate.custom || 'dx-property-editor';
    }
    _getInfoFromModel(viewModel) {
        if (!viewModel)
            return null;
        var modelInfo = viewModel['getInfo'] && viewModel['getInfo']();
        if (modelInfo) {
            return modelInfo.filter(property => property.propertyName === this.name)[0];
        }
        return null;
    }
    update(viewModel) {
        if (!!viewModel) {
            var propertyInfo = this._getInfoFromModel(viewModel);
            var isSameEditorType = propertyInfo && compareEditorInfo(propertyInfo.editor, this.info().editor);
            if (isSameEditorType && this.info() !== propertyInfo) {
                this.info(propertyInfo);
            }
            this._model(this.name in viewModel && (isSameEditorType || !propertyInfo) ? viewModel : null);
        }
        else {
            this._model(null);
        }
    }
    getOptions(templateOptions) {
        var extendedOptions = this.info.peek().editor.extendedOptions;
        return extend(true, {}, templateOptions, this.editorOptions, extendedOptions);
    }
    getValidatorOptions(templateValidatorOptions) {
        return this._validator && this._validator.getValidatorOptions(templateValidatorOptions);
    }
    registerAccessibilityProvider(accessibilityProvider) {
        if (this._accessibilityProvider() != accessibilityProvider)
            this._accessibilityProvider(accessibilityProvider);
    }
    assingParent(parent) {
        if (this._parent() != parent)
            this._parent(parent);
    }
    _getEditorValidationRules() {
        var info = ko.unwrap(this.info);
        if (!info)
            return;
        var validationRules = info.validationRules;
        return validationRules || (validationRules === null ? null : []);
    }
    getValidationRules() {
        return this._validator && this._validator.getValidationRules();
    }
    get validationRules() {
        return this.getValidationRules();
    }
    getIdByDisplayName(preffix) {
        return preffix + '-' + replaceInvalidSymbols(this.displayName());
    }
    getPopupServiceActions() {
        if (!this._model()) {
            return;
        }
        var actions = (this._model().actions || []).concat();
        (this._model().actionProviders || [])
            .forEach((provider) => {
            var additionalActions = provider && provider.getActions(this.name) || [];
            additionalActions.forEach((action) => actions.push(action));
        });
        return actions;
    }
    get editorOptions() { return ko.unwrap(this._editorOptions); }
    get isComplexEditor() { return !!this.contentTemplateName; }
}
