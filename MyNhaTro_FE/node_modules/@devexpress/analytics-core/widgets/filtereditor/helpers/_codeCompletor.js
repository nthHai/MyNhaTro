/**
* DevExpress Analytics (widgets\filtereditor\helpers\_codeCompletor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CodeCompletor, createFunctionCompletion } from '../../common/_codeCompletor';
import { FilterEditorHelper } from './helper';
import { AggregateOperand } from '../../criteria/operators/aggregate';
import { FunctionOperatorType } from '../../criteria/operators/options/function';
export class FilterEditorCodeCompletor extends CodeCompletor {
    constructor(options) {
        super(options);
        var helper = new FilterEditorHelper();
        var functions = [];
        var aggregate = [];
        var operators = [];
        var groups = Object.keys(helper.filterEditorOperators);
        groups.forEach((groupName) => {
            helper.filterEditorOperators[groupName].forEach((operator) => {
                if (operator.insertVal) {
                    var name = operator.name, insertVal = operator.insertVal, paramCount = operator.paramCount;
                    if (operator.type === FunctionOperatorType && functions.filter(x => x.name === name).length === 0) {
                        functions.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type === AggregateOperand && aggregate.filter(x => x.name === name).length === 0) {
                        aggregate.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type !== AggregateOperand && operator.type !== FunctionOperatorType && operators.filter(x => x.name === name).length === 0) {
                        operators.push({ name: name, insertVal: insertVal, paramCount: paramCount });
                    }
                }
            });
        });
        this.filterEditorAvailable = { operators, aggregate, functions };
    }
    getFunctionsCompletions() {
        var functions = [];
        this.filterEditorAvailable.functions.forEach(funcItem => {
            functions.push(createFunctionCompletion({ text: funcItem.name, paramCount: funcItem.insertVal.split(',').length }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    }
    getAggregateCompletions() {
        var functions = [];
        this.filterEditorAvailable.aggregate.forEach(funcItem => {
            functions.push(createFunctionCompletion({ text: funcItem.name, paramCount: 0 }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    }
    getOperatorCompletions(prefix) {
        var operators = [];
        this.filterEditorAvailable.operators.forEach(operator => {
            operators.push((operator.insertVal.match(new RegExp('\\([^\\(\\)]*\\)', 'g'))) ?
                createFunctionCompletion({ text: operator.name, paramCount: operator.paramCount || operator.insertVal.split(',').length }, operator.insertVal, operator.insertVal) :
                { caption: operator.insertVal, snippet: prefix + operator.insertVal, meta: 'operator' });
        });
        return operators;
    }
}
