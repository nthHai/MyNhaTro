/**
* DevExpress Analytics (widgets\_searchHighlighting.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import * as $ from 'jquery';
import { findMatchesInString } from '../property-grid/widgets/internal/_utils';
import { Disposable } from '../serializer/utils';
import { addDisposeCallback } from '../serializer/_internal';
export function cloneHtmlBinding(data, element, valueAccessor, allBindings, viewModel, bindingContext) {
    addDisposeCallback(element, function () {
        data.dispose();
    });
    setTimeout(() => {
        var isInitialized = false;
        ko.computed({
            read: () => {
                if (!isInitialized && ko.bindingHandlers['html'].init) {
                    ko.bindingHandlers['html'].init(element, () => { return data.content; }, allBindings, viewModel, bindingContext);
                    isInitialized = true;
                }
                if (ko.bindingHandlers['html'].update) {
                    ko.bindingHandlers['html'].update(element, () => {
                        data.update(valueAccessor());
                        return data.content;
                    }, allBindings, viewModel, bindingContext);
                }
            },
            disposeWhenNodeIsRemoved: element
        });
    }, 1);
}
export class HighlightEngine extends Disposable {
    constructor(options) {
        super();
        this._$spanProtect = $.fn.constructor('<span>');
        this._$spanSearch = $.fn.constructor('<span>').addClass('dx-datagrid-search-text');
        this.content = ko.observable('');
        this._options = options;
        if (ko.isSubscribable(this._options.text)) {
            this._disposables.push(this._options.text.subscribe(newText => {
                this._update();
            }));
        }
        this._disposables.push(this._options.textToSearch.subscribe(newFind => {
            this._update();
        }));
        this._update();
    }
    _update() {
        this.content(this._getHighlightContent(ko.unwrap(this._options.text), ko.unwrap(this._options.textToSearch), ko.unwrap(this._options.searchOptions)));
    }
    update(options) {
        this._options = options;
        this._update();
    }
    _getHighlightContent(text, textToSearch, options) {
        var searchPattern = textToSearch;
        var result = text;
        if (searchPattern) {
            var match = findMatchesInString(result, searchPattern, options);
            if (match) {
                var newResult = '', curIndex = 0, subString = result;
                match.forEach((item, index) => {
                    var itemIndex = subString.indexOf(item);
                    var textBeforeMath = result.substr(curIndex, itemIndex);
                    subString = subString.substr(itemIndex + item.length);
                    if (textBeforeMath) {
                        this._$spanProtect.text(textBeforeMath);
                        newResult += this._$spanProtect[0].outerHTML;
                    }
                    this._$spanSearch.text(item);
                    newResult += this._$spanSearch[0].outerHTML;
                    curIndex = result.length - subString.length;
                    if (index === match.length - 1) {
                        if (subString) {
                            this._$spanProtect.text(subString);
                            newResult += this._$spanProtect[0].outerHTML;
                        }
                    }
                });
                return newResult;
            }
        }
        this._$spanProtect.text(result);
        result = this._$spanProtect[0].outerHTML;
        return result;
    }
}
ko.bindingHandlers['searchHighlighting'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        cloneHtmlBinding(new HighlightEngine(valueAccessor()), element, valueAccessor, allBindings, viewModel, bindingContext);
    }
};
