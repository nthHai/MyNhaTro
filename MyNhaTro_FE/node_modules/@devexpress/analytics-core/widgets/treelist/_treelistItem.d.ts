/**
* DevExpress Analytics (widgets\treelist\_treelistItem.d.ts)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
import * as ko from 'knockout';
import { CodeResolver } from '../../property-grid/internal/_codeResolver';
import { ISearchOptions } from '../../property-grid/widgets/internal/_utils';
import { Disposable } from '../../serializer/utils';
import { IAction, IDataMemberInfo, IItemsProvider } from '../utils';
import { ITreeListController } from './_treelistController';
export declare var maxSearchLevel: (newVal?: number) => number;
export declare var treeListEditAction: IAction;
export interface ITreeListSearchOptions extends ISearchOptions {
    searchTimeout?: number;
    searchExpr?: string;
    searchBoxTemplate?: string;
}
export declare class DefaultTreeListItemFactory {
    createRootItem(options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: any, rtl?: any): TreeListRootItemViewModel;
    createItem(options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: any, rtl?: any, resolver?: any): TreeListItemViewModel;
}
export interface ITreeListItemFactory {
    createRootItem: (options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: any, rtl?: any) => TreeListRootItemViewModel;
    createItem: (options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: any, rtl?: any, resolver?: any) => TreeListItemViewModel;
}
export interface ITreeListOptions {
    itemsProvider: IItemsProvider;
    selectedPath: ko.Observable<string> | ko.Computed<string>;
    treeListController: ITreeListController;
    templateName?: string;
    loadChildItemsForCollapsedNodes?: boolean;
    rtl?: boolean;
    path?: ko.Observable<string> | ko.Observable<string[]>;
    onItemsVisibilityChanged?: () => void;
    expandRootItems?: boolean;
    pageSize?: number;
    templateHtml?: string;
    factory?: ITreeListItemFactory;
    onItemsChanged?: (items: TreeListItemViewModel[]) => void;
}
export declare class TreeListEllipsisButton {
    private _availableItemsCount;
    private padding;
    private pageSize;
    constructor(_availableItemsCount: ko.Observable<number>, padding: any, pageSize: number);
    templateName: string;
    collapsed: () => boolean;
    visibleItems: () => any[];
    text: () => any;
    renderNext(): void;
}
export declare class TreeListItemViewModel extends Disposable {
    protected resolver: CodeResolver;
    private _rtl;
    private _factory;
    private _data;
    private _actions;
    private _isVisible;
    private _pageSize;
    private _walkCallback;
    private _isLoaded;
    private _actionsSubscription;
    private _subscriptions;
    private _templateName;
    private _visibleItemsCount;
    private _loadChildItemsForCollapsedNodes;
    private _visible;
    private _equal;
    private _treeListController;
    private _loader;
    private _iconName;
    private _getImageClassName;
    private _getImageTemplateName;
    private _getNodeImageClassName;
    private _createItemsObj;
    private _loadItems;
    private _nodeIsLocked;
    private _onItemsChangedCallback;
    protected _onItemsChanged(): void;
    protected _getTemplateName(): string;
    _selectItem(itemPath: string): void;
    _find(itemPath: string): void;
    _getItemsWithLock(): JQueryPromise<TreeListItemViewModel[]>;
    private _applyPadding;
    private _getLoadChildItemsForCollapsedNodes;
    private _initPaginate;
    private _updataParentItemsVisibilityCount;
    constructor(options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: () => undefined, rtl?: boolean, resolver?: CodeResolver);
    dragDropHandler: any;
    dblClickHandler: any;
    _path: string[];
    _onItemsVisibilityChanged: () => void;
    level: number;
    parent: TreeListItemViewModel;
    padding: {};
    items: ko.ObservableArray<TreeListItemViewModel>;
    maxItemsCount: ko.Observable<number>;
    visibleItems: ko.Computed<any[]>;
    collapsed: ko.Observable<boolean>;
    nodeImageClass: ko.Computed<string>;
    imageClassName: ko.Computed<string>;
    showIcon: boolean;
    imageTemplateName: ko.Computed<string>;
    get hasItems(): boolean;
    get data(): IDataMemberInfo;
    set data(newVal: IDataMemberInfo);
    get name(): string;
    get path(): string;
    get pathParts(): string[];
    get text(): string;
    get templateName(): string;
    actionsTemplate(): any;
    treeListEditAction(): IAction;
    get hasContent(): boolean;
    get actions(): IAction[];
    get isDraggable(): boolean;
    get treeListController(): ITreeListController;
    toggleCollapsed: () => void;
    toggleSelected: any;
    isSelected: ko.Observable<boolean>;
    isHovered: ko.Observable<boolean>;
    isMultiSelected: ko.Observable<boolean>;
    getItems: () => JQueryPromise<TreeListItemViewModel[]>;
    dispose(): void;
    get visible(): boolean;
    setVisible(value: boolean): void;
    getCssRules(): {
        'dx-treelist-item-selected dxd-state-selected': boolean;
    };
    mouseenter(): void;
    mouseleave(): void;
    selectedItems(): TreeListItemViewModel[];
    templates: {
        accordionItem: string;
        headerItem: string;
        headerItemContent: string;
        itemTextContent: string;
        actionsContainer: string;
    };
}
export declare class TreeListRootItemViewModel extends TreeListItemViewModel {
    private _options;
    private _resolver;
    dispose(): void;
    walkOnTree(walkCallBack: (item: TreeListItemViewModel) => void): {
        stop: () => void;
    };
    private _visitNextNode;
    private _selectedPathSubscription;
    constructor(_options: ITreeListOptions, path?: string[], onItemsVisibilityChanged?: () => undefined, rtl?: boolean);
    _onItemsChanged(): void;
}
