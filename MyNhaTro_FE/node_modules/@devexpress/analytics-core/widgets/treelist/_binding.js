/**
* DevExpress Analytics (widgets\treelist\_binding.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import * as $ from 'jquery';
import { DefaultTreeListItemFactory } from './_treelistItem';
import { TreeListController } from './_treelistController';
import { TreeListSearchOptions, TreeListSearchViewModel } from './_treeListSearchViewModel';
import dxScrollView from 'devextreme/ui/scroll_view';
import { extend } from '../../serializer/_utils';
import { getTemplate } from '../../property-grid/widgets/templateUtils';
ko.bindingHandlers['treelist'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var treeListViewModel = null;
        var childContext = null;
        var callback = null;
        var values = valueAccessor(), options = ko.unwrap(values), pathArray, updateScrollBar = () => {
            var options = ko.unwrap(values);
            var scrollViewElt = $.fn.constructor(element).closest('.dx-scrollview').get(0);
            var scrollView = scrollViewElt && dxScrollView.getInstance(scrollViewElt);
            scrollView && scrollView['update']();
            if (options.onItemsVisibilityChanged) {
                options.onItemsVisibilityChanged();
            }
        }, updateTreeList = (options) => {
            pathArray && pathArray.dispose();
            var treeListController = options.treeListController || new TreeListController();
            options.treeListController = treeListController;
            treeListController.dragDropHandler = treeListController.dragDropHandler || bindingContext.$root.fieldDragHandler;
            options.factory = options.factory || new DefaultTreeListItemFactory();
            options.itemsProvider = ko.unwrap(options.itemsProvider);
            options.pageSize = options.pageSize || -1;
            treeListViewModel && treeListViewModel.dispose();
            if (!options || !options.itemsProvider)
                return;
            if (!options.rtl) {
                options.rtl = $.fn.constructor(element).closest('.dx-rtl').length > 0;
            }
            pathArray = ko.computed(() => {
                var result = ko.unwrap(options.path);
                if (!Array.isArray(result)) {
                    return !!result ? result.split('.') : [];
                }
                return result;
            });
            treeListViewModel = options.factory.createRootItem(options, pathArray, updateScrollBar, options.rtl);
            var treeListTemplate = options.templateHtml || getTemplate('dx-treelist');
            if (treeListController.root) {
                treeListController.searchEnabled = true;
                treeListController.searchOptions = treeListController.searchOptions || new TreeListSearchOptions();
                treeListController.root(treeListViewModel);
            }
            var $element = $.fn.constructor(element).html(treeListTemplate);
            childContext = bindingContext.createChildContext(treeListViewModel);
            ko.applyBindings(childContext, $element.children()[0]);
            callback && ko.utils.domNodeDisposal.removeDisposeCallback(element, callback);
            callback = function () {
                treeListViewModel && treeListViewModel.dispose();
                treeListViewModel = null;
                subscription && subscription.dispose();
                pathArray && pathArray.dispose();
                callback = null;
                ko.utils.domNodeDisposal.removeDisposeCallback(element, callback);
            };
            ko.utils.domNodeDisposal.addDisposeCallback(element, callback);
        };
        updateTreeList(extend({}, options));
        var subscription = null;
        if (ko.isSubscribable(values)) {
            subscription = values.subscribe((newValue) => {
                newValue && updateTreeList(extend({}, newValue));
            });
        }
        else if (ko.isSubscribable(values.itemsProvider)) {
            subscription = values.itemsProvider.subscribe((newValue) => {
                newValue && updateTreeList(extend({}, values));
            });
        }
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['treeListSearchPanel'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor();
        var template = ko.unwrap(values.template);
        var modelType = ko.unwrap(values.modelType);
        var controllers = ko.unwrap(values.controllers);
        if (!Array.isArray(controllers))
            controllers = [controllers];
        TreeListSearchViewModel.createController(element, controllers, modelType, template);
        return { controlsDescendantBindings: true };
    }
};
