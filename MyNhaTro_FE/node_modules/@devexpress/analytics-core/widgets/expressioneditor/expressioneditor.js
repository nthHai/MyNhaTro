/**
* DevExpress Analytics (widgets\expressioneditor\expressioneditor.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as $ from 'jquery';
import * as ko from 'knockout';
import { getLocalization } from '../../property-grid/localization/localization_utils';
import { StringId } from '../../property-grid/localization/_localizationStringIds';
import { Disposable } from '../../serializer/utils';
import { aceAvailable } from '../ace/_ace-available';
import { CodeCompletor } from '../common/_codeCompletor';
import { DisplayExpressionConverter } from '../common/_displayNameProvider';
import { CriteriaOperatorStateMachine } from '../criteria/utils/criteriaOperatorStateMachine';
import { ResizeHelper } from '../internal/_resizeHelper';
import { getParentContainer, isList, setCursorInFunctionParameter } from '../_utils';
import { Tools } from './tools/_tools';
import { ExpressionEditorParametersTreeListController, ExpressionEditorTreeListController } from './tools/_treeListControllers';
import { RangeSpecific, wrapExpressionValue } from './_expressioneditor';
export function getNotValidRange(value, errorMessage) {
    var start = 0;
    var end = 0;
    var parts = errorMessage.split('\n');
    var errorText = parts[1];
    var errorLength = parts[2].length;
    if (errorText.indexOf('...') === 0) {
        errorText = errorText.split('...')[1];
    }
    var start = value.indexOf(errorText);
    var end = start + errorLength;
    return { start: start, end: end };
}
function createExpressionEditorFieldListProvider(originalProvider, fieldName) {
    return ko.computed(() => {
        var provider = ko.unwrap(originalProvider);
        var unwrappedFieldName = ko.unwrap(fieldName);
        return !unwrappedFieldName ? provider : {
            getItems: (path) => {
                var $deferred = $.Deferred();
                provider.getItems(path)
                    .done((data) => {
                    $deferred.resolve(data.filter(field => field.name !== unwrappedFieldName));
                })
                    .fail(() => $deferred.reject());
                return $deferred.promise();
            },
            getValues: (path) => {
                return provider.getValues(path);
            }
        };
    });
}
export class ExpressionEditor extends Disposable {
    constructor(options, fieldListProvider, disabled = ko.observable(false), rtl = false, _displayNameProvider, popupVisible = ko.observable(false)) {
        super();
        this.options = options;
        this._displayNameProvider = _displayNameProvider;
        this.popupVisible = popupVisible;
        this._updateTextAreaValue = (item, element) => {
            var textArea = this._getTextArea(element), textAreaValue = this.textAreaValue().toString(), cursorPosition = textArea && textArea.selectionStart || textAreaValue.length, newAddedText = textAreaValue[cursorPosition - 1] == ' ' ? (item.val || item.text || item) + ' ' : ' ' + (item.val || item.text || item) + ' ';
            this.textAreaValue([textAreaValue.slice(0, cursorPosition), newAddedText, textAreaValue.slice(cursorPosition)].join(''));
            if (textArea && textArea.setSelectionRange) {
                textArea.focus();
                var posisition = cursorPosition + (newAddedText.indexOf('(') !== -1 ? newAddedText.indexOf('(') + 1 : newAddedText.length);
                textArea.setSelectionRange(posisition, posisition);
            }
        };
        this._updateAceValue = (item, element) => {
            var editor = this.editorContainer(), { row, column: col } = editor.getCursorPosition(), insertion = (item.val || item.text || item) + ' ';
            if (col && editor.getSession().getValue().split('\n')[row][col - 1] !== ' ')
                insertion = ' ' + insertion;
            editor.insert(insertion);
            editor.focus();
            setCursorInFunctionParameter(item.paramCount, editor, insertion);
        };
        this._updateValue = (item, element) => {
            this.aceAvailable ? this._updateAceValue(item, $.fn.constructor(element)) : this._updateTextAreaValue(item, $.fn.constructor(element));
        };
        this.patchFieldName = (fieldName) => fieldName;
        this._parametersPutSelectionHandler = (selectedItemPath, element) => {
            var pathParts = selectedItemPath.split('.');
            var newAddedString = '?' + this.patchFieldName(pathParts[pathParts.length - 1]);
            this._updateValue(newAddedString, element);
        };
        this._fieldsPutSelectionHandler = (selectedItemPath, element) => {
            var path = this.koOptions.peek().path.peek();
            var proposedFieldName = selectedItemPath.substring(path.length + 1);
            var newAddedString = '[' + this.patchFieldName(proposedFieldName) + ']';
            if (this._displayNameProvider) {
                this.displayExpressionConverter.toDisplayExpression(path, newAddedString)
                    .done((result) => { this._updateValue(result, element); })
                    .fail(() => { this._updateValue(newAddedString, element); });
            }
            else {
                this._updateValue(newAddedString, element);
            }
        };
        this.aceAvailable = aceAvailable();
        this.title = () => getLocalization('Expression Editor', 'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption');
        this.value = ko.observable('');
        this.textAreaValue = ko.observable('');
        this.languageHelper = {
            getLanguageMode: () => 'ace/mode/criteria',
            createCompleters: (editor, bindingContext, viewModel) => {
                var path = ko.computed(() => { return viewModel.koOptions() && ko.unwrap(viewModel.koOptions().path) || ''; }), functions = ko.computed(() => { return viewModel.koOptions() && ko.unwrap(viewModel.koOptions().functions) || []; }), completor = new CodeCompletor({
                    editor,
                    bindingContext,
                    fieldListProvider: viewModel.fieldListProvider,
                    path,
                    functions,
                    rootItems: viewModel.options.rootItems,
                    getRealExpression: (path, member) => {
                        return this.displayExpressionConverter && this.displayExpressionConverter.toRealExpression(path, member) || $.Deferred().resolve(member).promise();
                    }
                });
                [path, functions].forEach(x => completor._disposables.push(x));
                return [completor];
            }
        };
        this.aceOptions = {
            showLineNumbers: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            showFoldWidgets: false,
            highlightActiveLine: false
        };
        this.additionalOptions = {
            onChange: (session) => {
                var value = session.getValue();
                try {
                    var operator = CriteriaOperatorStateMachine.parse(value);
                    if (this.koOptions().validate) {
                        this.isValid(this.koOptions().validate(operator));
                    }
                    session.clearAnnotations();
                }
                catch (exception) {
                    var row = exception.hash && exception.hash.line || 0;
                    var column = 0;
                    var lines = exception.message.split('\n');
                    var text = lines[1] + '\n' + lines[2];
                    session.setAnnotations([{ row, column, text, 'type': 'error' }]);
                }
            }
        };
        this.callbacks = {
            focus: $.noop
        };
        this.koOptions = ko.observable(null);
        this.editorContainer = ko.observable();
        this.isValid = ko.observable(true);
        this.buttonItems = [];
        this.rtl = false;
        this.modelValueValid = ko.computed(() => {
            var options = this.koOptions();
            return options && ko.isObservable(options.isValid) ? options.isValid() : true;
        });
        this.modelValueWarning = ko.computed(() => {
            var options = this.koOptions();
            return options && ko.unwrap(options.warningMessage) || '';
        });
        this.getPopupContainer = getParentContainer;
        this.koOptions(options);
        this.patchFieldName = (fieldName) => {
            return this.koOptions().patchFieldName && this.koOptions().patchFieldName(fieldName) || fieldName;
        };
        this.theme = this.koOptions() && this.koOptions().theme;
        this._disposables.push(this.value = ko.computed({
            read: () => {
                var value = this.koOptions() && ko.unwrap(this.koOptions().value);
                return (value && value.toString()) || '';
            },
            write: (newVal) => this.koOptions() && this.koOptions().value(newVal)
        }));
        if (_displayNameProvider && options.path) {
            this.displayExpressionConverter = new DisplayExpressionConverter(_displayNameProvider);
            var pathFunc = ko.pureComputed(() => this.koOptions() && this.koOptions().path && this.koOptions().path());
            this.displayValue = wrapExpressionValue(pathFunc, this.value, this.displayExpressionConverter, this._disposables);
            this._disposables.push(pathFunc);
        }
        else {
            this.displayValue = this.value;
        }
        this.rtl = rtl;
        this.validate = (value, sender) => {
            try {
                CriteriaOperatorStateMachine.parse(value);
                this.isValid(true);
                return true;
            }
            catch (exception) {
                var result = getNotValidRange(value, exception.message);
                var textArea = this._getTextArea(sender && sender.element);
                textArea && textArea.setSelectionRange(result.start, result.end);
                this.isValid(false);
            }
        };
        this._disposables.push(this.popupVisible.subscribe((newVal) => {
            if (!newVal) {
                this.editorContainer(null);
                return;
            }
            this.initDisplayValue();
        }));
        var fieldName = ko.computed(() => { return this.koOptions() && this.koOptions().fieldName && this.koOptions().fieldName(); });
        this._disposables.push(this.fieldListProvider = createExpressionEditorFieldListProvider(fieldListProvider, fieldName));
        this.disabled = disabled;
        var self = this;
        this.save = (sender) => {
            var value = this.getValue();
            if (this.validate(value, sender)) {
                this.displayValue(value);
                this.popupVisible(false);
            }
        };
        var selectedItem = null;
        var selectionHandler = (item) => {
            var selectedItemType = ko.unwrap(item.data['type']);
            if (selectedItem)
                selectedItem.isSelected(false);
            selectedItem = item;
            item.isSelected(true);
        };
        var fieldsTreeListOptions = ko.pureComputed(() => {
            return this.koOptions() && this.koOptions().path && this.koOptions().path() && this._createToolsOptions(this.koOptions().path(), this.fieldListProvider(), new ExpressionEditorTreeListController(fieldName, (data, element) => { this._fieldsPutSelectionHandler(data.path, element); }, selectionHandler));
        });
        this.parametersTreeListController = new ExpressionEditorParametersTreeListController(this._parametersCustomFilter, this._parametersPutSelectionHandler, selectionHandler);
        var parametersTreeListOptions = ko.pureComputed(() => {
            return this._createToolsOptions('', this.fieldListProvider(), this.parametersTreeListController);
        });
        this._disposables.push(this.tools = new Tools(this._updateValue, parametersTreeListOptions, this.koOptions, fieldsTreeListOptions));
        this._disposables.push(this.modelValueValid, this.modelValueWarning);
        this._createMainPopupButtons();
        [fieldName, fieldsTreeListOptions, parametersTreeListOptions].forEach(x => this._disposables.push(x));
        this.resizeHelper = new ResizeHelper({
            onResize: () => this.resizeAceEditor()
        });
    }
    dispose() {
        super.dispose();
        this.koOptions(null);
        this.editorContainer(null);
        this.options = null;
    }
    _createMainPopupButtons() {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: getLocalization('OK', StringId.DataAccessBtnOK), type: 'default', stylingMode: 'contained', onClick: function (sender) { self.save(sender); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: getLocalization('Cancel', StringId.DataAccessBtnCancel), type: 'normal', stylingMode: 'contained', onClick: function () { self.popupVisible(false); } } }
        ];
    }
    _getTextArea(element) {
        var $el = $.fn.constructor(element);
        return ($el && $el.parents('.dx-expressioneditor').find(':input')[0]);
    }
    _createToolsOptions(path, fieldListProvider, treeListController) {
        return {
            itemsProvider: fieldListProvider,
            selectedPath: ko.observable(''),
            path: ko.observable(path),
            templateName: 'dx-ee-treelist-item',
            treeListController: treeListController,
            rtl: this.rtl
        };
    }
    _parametersCustomFilter(item) {
        return item.specifics === 'parameters' || item.specifics === RangeSpecific || !isList(item);
    }
    onShown() {
        this.callbacks.focus();
    }
    onHiding(e) {
        var options = this.koOptions();
        return options && options.onHiding && options.onHiding(e);
    }
    onShowing(e) {
        var options = this.koOptions();
        return options && options.onShowing && options.onShowing(e);
    }
    onContentReady(e) {
        var options = this.koOptions();
        return options && options.onContentReady && options.onContentReady(e);
    }
    resizeAceEditor() {
        if (this.aceAvailable && this.editorContainer()) {
            this.editorContainer().resize();
        }
    }
    initDisplayValue() {
        this.tools.resetCategoriesSelection && this.tools.resetCategoriesSelection();
        this.textAreaValue(this.displayValue());
        if (!this.aceAvailable) {
            this.validate(this.value());
        }
        else {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            session && session.setValue(this.textAreaValue());
        }
    }
    getValue() {
        var value = this.textAreaValue();
        if (this.aceAvailable) {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            value = session && session.getValue();
        }
        return value;
    }
}
