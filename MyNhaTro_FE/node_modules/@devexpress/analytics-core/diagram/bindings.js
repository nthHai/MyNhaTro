/**
* DevExpress Analytics (diagram\bindings.js)
* Version:  22.2.14
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { SnapLinesHelper } from '../core/snapLines/_snapLinesHelper';
import { addDisposeCallback } from '../serializer/_internal';
import { extend } from '../serializer/_utils';
import { Draggable } from '../core/internal/_draggable';
import { convertFromCssPixelUnits } from '../core/internal/_utils';
ko.bindingHandlers['routeLineDraggable'] = {
    init: (element, valueAccessor) => {
        let startDragPosition = null;
        var values = valueAccessor(), options = extend({ snap: '.dxrd-drag-snap-line', snapTolerance: SnapLinesHelper.snapTolerance }, ko.unwrap(values), {
            start: function (event, uiElement) {
                values.starting();
            },
            stop: function (event, uiElement) {
                values.stopped();
            },
            drag: function (event, uiElement) {
                startDragPosition = startDragPosition || { left: convertFromCssPixelUnits(uiElement.dataset.leftPosition), top: convertFromCssPixelUnits(uiElement.dataset.topPosition) };
                var dragDeltaLeft = startDragPosition && event.pageX - startDragPosition.left;
                var dragDeltaTop = startDragPosition && event.pageY - startDragPosition.top;
                values.forceResize({ delta: { dx: dragDeltaLeft || 0, dy: dragDeltaTop || 0 } });
            }
        });
        const draggable = new Draggable(element, options);
        addDisposeCallback(element, () => {
            draggable.dispose();
            element = null;
        });
    }
};
function getInternetExplorerVersion() {
    var rv = -1;
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var re = new RegExp('MSIE ([0-9]{1,}[\\.0-9]{0,})');
        if (re.exec(navigator.userAgent) != null)
            rv = parseFloat(RegExp.$1);
    }
    else if (navigator.appName == 'Netscape') {
        var re = new RegExp('Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})');
        if (re.exec(navigator.userAgent) != null)
            rv = parseFloat(RegExp.$1);
    }
    return rv;
}
ko.bindingHandlers['updateConnectorArrow'] = {
    init: (svgNode, valueAccessor, allBindings, viewModel, bindingContext) => {
        var ieVersion = getInternetExplorerVersion();
        if (ieVersion > -1 && ieVersion <= 11) {
            var updateSubscription = bindingContext.$data.routePointsSet.subscribe(() => {
                if (bindingContext.$data.showArrow())
                    svgNode.parentNode.insertBefore(svgNode, svgNode);
            });
            addDisposeCallback(svgNode.parentNode, () => updateSubscription.dispose());
        }
    }
};
